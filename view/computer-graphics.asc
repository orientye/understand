= Computer Graphics
:revnumber: 0.0.1
:author: orient
:homepage: http://orientye.com
:toc:
:toclevels: 5
:hardbreaks-option:
:stem: latexmath
<<<

== 数学基础
=== 向量

ifdef::env-github[]
- 表示: $\vec{a}$ 或者粗体表示 $\boldsymbol{a}$
- 方向: $\overrightarrow{AB}$ = $\boldsymbol{A-B}$
- 长度/模: $\Vert \vec{a} \Vert$ 或者 $|\vec{a}|$
- 单位向量
    ▪ 表示方向，长度为1
    ▪ normalization: $\hat{a}=\vec{a}/|\vec{a}|$
endif::[]

ifndef::env-github[]
- 表示: latexmath:[$\vec{a}$] 或者粗体表示 latexmath:[$\boldsymbol{a}$]
- 方向: latexmath:[$\overrightarrow{AB}$] = latexmath:[$\boldsymbol{A-B}$]
- 长度/模: latexmath:[$\Vert \vec{a} \Vert$] 或者 latexmath:[$|\vec{a}|$]
- 单位向量
    ▪ 表示方向，长度为1
    ▪ normalization: latexmath:[$\hat{a}=\vec{a}/|\vec{a}|$]
endif::[]

- 加法
    几何: 四边形法则 三角形法则
    代数: 坐标相加

- 图形学里一般使用列向量

- 转置

- 点乘 Dot(scalar) Product
ifdef::env-github[]
    ▪ $ a \cdot b = |\vec{a}| |\vec{b}| \cos\theta $
endif::[]
ifndef::env-github[]
    ▪ latexmath:[$ a \cdot b = |\vec{a}| |\vec{b}| \cos\theta $]
endif::[]
    ▪ 交换律
    ▪ 结合律
    ▪ 分配律
    ▪ 用途:
        向量间的夹角
        一个向量在另外一个向量上的投影(projection)
        向量的接近程度
        分解向量(decompose)
        前后关系(forward/backward)
    ▪ 也叫数量积/内积

- 坐标系
    ▪ 左手/右手
    ▪ 各平台、引擎的坐标系

- 叉乘 Cross(vector) Product
    ▪ 结果是一个向量
        其方向: 垂直于两个向量，右手坐标系
ifdef::env-github[]
        其长度: $ |a \times b| = |\vec{a}| |\vec{b}| \sin\theta $
endif::[]
ifndef::env-github[]
        其长度: latexmath:[$ |a \times b| = |\vec{a}| |\vec{b}| \sin\theta $]
endif::[]
    ▪ 反交换律
    ▪ 结合律
    ▪ 分配律
    ▪ 用途:
        构建坐标系
        左右关系
        内外(inside/outside)
        叉乘可以用矩阵乘以列向量矩阵来表示
    ▪ 向量积/外积

=== 矩阵
- 作用
    通常用来表示变换(transformation), 例如平移(translate)，旋转(rotate)，缩放(scale)，剪切/切变(shear)

- 性质
    交换律: 通常不满足
    结合律: 满足
    分配律: 满足

- 转置(transpose)

- 单位矩阵

- 逆矩阵(inverse)

- 向量操作的矩阵形式(Vector Operations in Matrix Form)

    Q: 点乘
    Q: 叉乘

- 矩阵与线性变换

    线性变换是一类满足线性条件的变换。
    线性条件: T(u+v) = T(u) + T(v) 和T(cu) = cT(u)
    向量的加法和数乘运算在变换前和变换后的效果是一样的，也就是说线性变换保持了向量的加法和数乘运算。
    https://www.zhihu.com/question/322319580

- 正交矩阵与旋转矩阵

    正交矩阵的逆=正交矩阵的转置
    旋转矩阵是正交矩阵。正交矩阵不一定是旋转矩阵。
    任何一组正交基向量在旋转矩阵的变换下仍然是正交的，因此旋转矩阵是正交矩阵。
    但是，反之就不一定，例如某镜像变换。
    https://www.zhihu.com/question/316200199

=== 变换(transformation)

==== 齐次坐标系(homogeneous coordinates)

    齐次坐标就是用N+1维来代表N维坐标。
    
    为什么需要齐次坐标系呢？
    在某些场合下，使用齐次坐标系更为合适:
    对于平移变换，如果维度不变，用矩阵左乘是表达不了平移操作的。加上一个维度后，平移才可以同旋转缩放等操作一样: 统一成矩阵变换的形式。
    对于透视变换，笛卡尔坐标系下平行线永不相交，这不适用于透视场景。
    再例如，点光源与方向光等也可以用齐次坐标来表示(例如，w=1: point light, w=0: directional light)。

    2维点: (x, y, 1)
    2维向量: (x, y, 0)
    3维点: (x, y, z, 1)
    3维向量: (x, y, z, 0)

    参考:
    http://www.songho.ca/math/homogeneous/homogeneous.html
    https://www.tomdalling.com/blog/modern-opengl/explaining-homogenous-coordinates-and-projective-geometry/

==== 2D变换
===== 缩放变换(scale)

===== 反射变换(reflection)

===== 切变变换(shear)

===== 旋转变换(rotate)

===== 平移变换(translate)

===== 仿射变换(affine)

    (先)线性变换 + (后)平移变换

===== 逆变换(inverse transform sampling)

===== composing transforms

===== decomposing transforms

==== 3D变换

===== 旋转

====== 绕任意轴的旋转
- 任意轴经过原点

    Rodrigues' rotation formula
    https://en.wikipedia.org/wiki/Rodrigues%27_rotation_formula

- 任意轴不经过原点
    
    转化为经过原点的任意轴旋转+平移

====== 欧拉角
pitch: 俯仰
yaw: 偏航
roll: 翻滚

优点: 直观易于理解；比矩阵省空间
缺点: 万向节死锁(Gimbal Lock)

什么是万向节死锁?

https://www.zhihu.com/question/47736315
https://stackoverflow.com/questions/17044296/quaternion-rotation-without-euler-angles
https://stackoverflow.com/questions/9715776/using-quaternions-for-opengl-rotations/9716268#9716268
https://www.cnblogs.com/psklf/articles/5656938.html
https://www.cnblogs.com/psklf/p/5667593.html

====== 四元数(quaternion)
如何理解四元数?

优点: 不存在万向节死锁问题；利于旋转插值；比较省空间
缺点: 误差问题导致失效；难于理解

https://www.zhihu.com/question/23005815
https://www.3dgep.com/understanding-quaternions/
https://www.qiujiawei.com/understanding-quaternions/

==== 3D到2D的变换

===== 模型变换(Modeling Tranformation)

===== 视图/摄像机变换(View/Camera Tranformation)
Camera属性: Position  LookAt  Up
想象拿着个相机拍照，Position是相机的位置，LookAt是相机的朝向，Up怎么理解呢？
相机是可以转动的，Up就是固定这个转动。

View矩阵

===== 投影变换(Projection Tranformation)

====== 正交投影(Orthograpic Projection)
Ortho矩阵

====== 透视投影(Perspective Projection)
Persp矩阵 -> Ortho矩阵

l, r, b, t:  fov(field of view) and aspect ratio

参考: https://zhuanlan.zhihu.com/p/362713511#:~:text=%E7%9F%A9%E9%98%B5%E7%9B%B8%E4%B9%98%EF%BC%9A-,%E6%8A%95%E5%BD%B1%E5%8F%98%E6%8D%A2%EF%BC%88Projection%20transformation%EF%BC%89,%E4%BA%A4%E6%8A%95%E5%BD%B1%E5%92%8C%E9%80%8F%E8%A7%86%E6%8A%95%E5%BD%B1%E3%80%82

== 物理基础

== 光栅化
三角形的光栅化
抗锯齿
 