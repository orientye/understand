= unity3d
:revnumber: 0.0.1
:author: orient
:homepage: http://orientye.com
:toc:
:toclevels: 5
:hardbreaks-option:
<<<

== script
=== unity-architecture
==== JIT与AOT
JIT: Just-In-Time，程序运行过程中进行转译
AOT: Ahead-Of-Time，提前将IL转译成机器码并且存储在文件中，此文件不能完全独立运行
完全静态编译: 只支持少数平台，基于AOT进一步生成所有的机器码

==== mono
解决C#的跨平台问题(在mono之前，C#只在windows平台上使用)。

==== IL2CPP
为了解决mono的问题，unity推出了il2cpp, 将c#转成c/c++代码，进而编译出native二进制代码。
C#的一些高级特性，比如垃圾回收，线程等，则都实现到il2cpp runtime库(il2cpp vm)上。

unity采用IL2CPP的原因:
Mono VM在各个平台移植，维护非常耗时，有时甚至不可能完成
Mono版本授权受限，换IL2CPP，IL2CPP VM是完全自己开发的组件，从而解决了授权问题
提高运行效率，换成IL2CPP以后，程序编译成了硬件目标机器指令，运行效率提升1.5-2.0倍

https://docs.unity3d.com/Manual/IL2CPP.html
https://blog.unity.com/topic/il2cpp
https://blog.unity.com/search?q=il2cpp
https://blog.unity.com/engine-platform/an-introduction-to-ilcpp-internals

IL2CPP实现:
unity自带源码位置: Editor\2022.3.32f1\Editor\Data\il2cpp
https://github.com/4ch12dy/il2cpp/

==== coreclr
https://blog.unity.com/engine-platform/porting-unity-to-coreclr

==== 扩展
https://github.com/jacksondunstan/UnityNativeScripting

==== 参考
https://docs.unity3d.com/Manual/unity-architecture.html
https://docs.unity3d.com/Manual/scripting-backends.html

==== ExecutionOrder
https://docs.unity3d.com/Manual/ExecutionOrder.html

=== coroutine
https://docs.unity3d.com/Manual/Coroutines.html
https://docs.unity3d.com/Manual/ExecutionOrder.html#Coroutines

=== 参考
https://docs.unity3d.com/Manual/ScriptingSection.html

== API
=== 类层次
https://docs.unity3d.com/400/Documentation/ScriptReference/20_class_hierarchy.html

=== MonoBehaviour
https://docs.unity3d.com/Manual/class-MonoBehaviour.html
https://docs.unity3d.com/ScriptReference/MonoBehaviour.h

=== Component
https://docs.unity3d.com/ScriptReference/Component.html

=== GameObject
https://docs.unity3d.com/ScriptReference/GameObject.html

=== 参考
https://docs.unity3d.com/ScriptReference/

== packages and feature sets
https://docs.unity3d.com/2023.2/Documentation/Manual/PackagesList.html

https://docs.unity3d.com/cn/current/Manual/CustomPackages.html

== asset
=== The Asset Database
https://docs.unity3d.com/2022.3/Documentation/Manual/AssetDatabase.html

=== AssetBundle
==== 介绍
https://docs.unity3d.com/Manual/AssetBundlesIntro.html

==== xasset
https://github.com/xasset/xasset

==== YooAsset
https://github.com/tuyoogame/YooAsset

==== The Addressable Asset System
https://docs.unity3d.com/Manual/com.unity.addressables.html

==== 参考
https://www.jianshu.com/p/df7cfa6d0ec3

== UI
=== NGUI
NGUI vs. UGUI
https://zhuanlan.zhihu.com/p/445999150

=== UGUI
原生
如果UGUI和NGUI选一个，选UGUI

=== FGUI
跨平台
https://www.fairygui.com/
https://github.com/fairygui

=== 参考
https://www.lfzxb.top/personal-ui-framework-consider/

== shader
=== 分类
1 Shaders that are part of the graphics pipeline are the most common type of shader. They perform calculations that determine the color of pixels on the screen. In Unity, you usually work with this type of shader by using Shader objects.
2 Compute shaders perform calculations on the GPU, outside of the regular graphics pipeline.
3 Ray tracing shaders perform calculations related to ray tracing.

=== 数学基础
二维笛卡尔坐标系:
在屏幕映射时，OpenGL y轴朝上，DirectX y轴朝下。

三维笛卡尔坐标系:
unity使用左手坐标系。

坐标空间:
模型空间，世界空间，观察空间，裁剪空间，屏幕空间。
其中，仅观察空间中unity使用右手坐标系，其它均使用左手坐标系。
除了这些最重要的坐标空间，实际开发中也会遇到其它空间，例如切线空间(tangent space, 通常用于法线映射)。

内置变量:
变换矩阵、摄像机和屏幕参数

=== 基础光照
- 光源

- 吸收和散射
高光反射(specular)表示物体表面是如何反射光线的
漫反射(diffuse)表示有多少光线会被折射、吸收和散射出表面

- 着色

- BRDF光照模型

=== 注意事项

=== 参考
https://docs.unity3d.com/Manual/Shaders.html

== graphics
=== render pipelines
https://docs.unity3d.com/Manual/render-pipelines.html
https://zhuanlan.zhihu.com/p/353687806

=== color
https://docs.unity3d.com/Manual/graphics-color.html

=== 参考
https://docs.unity3d.com/Manual/Graphics.html

== physical
刚体
碰撞体

=== 参考
https://docs.unity3d.com/Manual/PhysicsSection.html

== 动画
模型动画: 顶点动画与骨骼动画
非模型动画

=== 参考
https://docs.unity3d.com/Manual/AnimationSection.html

== 相机
=== 参考
https://docs.unity3d.com/Manual/CamerasOverview.html

== 导航
https://docs.unity3d.com/Manual/com.unity.ai.navigation.html

== 热重载
hot reload
https://www.bilibili.com/video/BV14X4y1y7mB/?vd_source=8390cf4acc81f67e6df66ea39d1fc6fe

== 热更新
=== 概览
https://zhuanlan.zhihu.com/p/535748877

=== hybridclr
https://hybridclr.doc.code-philosophy.com/docs/intro
https://github.com/focus-creative-games/hybridclr

- 基于AOT(本地机器代码执行)+Interpreter(IL解释执行)使用同一个内存数据对象，没有跨域访问的问题。
xLua或ILRuntime热更方案都有一条原则，尽量减少与Unity C#层的交互，但是这种交互又避免不了而且量大，比如要在逻辑热更代码里面访问Unity C#的GameObject对象数据，最终在运行的时候，GameObject会在AOT模式下的原生内存数据结构对象。由于xLua或ILRuntime有自己的虚拟机，所以不能直接访问原生GameObject数据对象，往往要把访问里面的数据包装成函数，这样性能开销就大大的增加了。而huatuo是在IL2CPP模式下的解释执行，直接可以访问原生的数据对象。

- 逻辑代码更新后(1.0版本到2.0版本)，如果发布新版本2.0(重新安装新版本的app)，可以直接把更新的逻辑，直接使用AOT编译出来，不用解释执行，从而获得AOT的性能。
而基于xLua, ILRuntime的热更方案开发的代码(1.0版本到2.0版本)，用户即使重新安装2.0客户端后，还是解释执行，新版本的性能无法达到AOT的性能级别。

- 相比传统的Lua或ILRuntime热更，能更新任意部分的代码。
不用像Lua或ILRuntime一样，分热更代码+框架代码，框架代码有bug还不能热更。

== 多语言

== framework
=== gf
https://github.com/EllanJiang/GameFramework
https://www.lfzxb.top/gameframework-all/

=== et
https://github.com/egametang/ET
https://github.com/egametang/ET/tree/master/Book
https://www.lfzxb.top/et-all/

=== ecs
https://en.wikipedia.org/wiki/Entity_component_system
https://indienova.com/indie-game-development/gdc-overwatch-gameplay-architecture-and-netcode/
https://blog.codingnow.com/eo/ecs/

=== 参考
https://www.zhihu.com/question/268285328

== 库
=== 寻路
https://github.com/recastnavigation/recastnavigation

=== 行为树
https://github.com/meniku/NPBehave

== 工具
=== perf and profile
- Profiler
https://docs.unity3d.com/Manual/ProfilerWindow.html

- Frame Debugger
https://docs.unity3d.com/Manual/FrameDebugger.html

- perfdog
https://perfdog.qq.com/helpCenter

- 参考
https://docs.unity3d.com/Manual/Profiler.html
https://docs.unity3d.com/Manual/graphics-performance-profiling.html

=== debug
- Visual Studio
https://docs.unity3d.com/Manual/SL-DebuggingD3D11ShadersWithVS.html

- Frame Debugger
https://docs.unity3d.com/Manual/FrameDebugger.html

== 扩展
=== package
==== vs. plugin
https://forum.unity.com/threads/unity-plugin-vs-unity-package.263003/

==== rider
https://docs.unity3d.com/Manual/com.unity.ide.rider.html
pausepoints:
https://blog.jetbrains.com/dotnet/2020/06/11/introducing-unity-pausepoints-for-rider/

=== 插件
https://docs.unity3d.com/Manual/Plugins.html

== 性能优化
https://docs.unity3d.com/Manual/com.unity.burst.html

== 团结引擎
https://docs.unity.cn/cn/tuanjiemanual/Manual/intro.html

== tutorial
https://catlikecoding.com/unity/tutorials/
https://www.youtube.com/playlist?list=PLPV2KyIb3jR4GH32npxmkXE-AHnlamcdG

== project
https://github.com/Unity-Technologies

== 源码
https://github.com/Unity-Technologies/UnityCsReference

== 参考
https://docs.unity3d.com/Manual/index.html
https://docs.unity3d.com/cn/current/Manual/Graphics.html