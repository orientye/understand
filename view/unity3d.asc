= unity3d
:revnumber: 0.0.1
:author: orient
:homepage: http://orientye.com
:toc:
:toclevels: 5
:sectnums:
:sectnumlevels: 5
:hardbreaks-option:
<<<

== 编辑器结构
文件目录:

    Assets
    Library
        根据Assets目录下的游戏资源生成的中间文件
        IL指令会被编译到Library/ScripAssemblies/Assembly-CSharp.dll等文件中
        可以使用ILSpy工具对dll进行反编译
    Logs
    Packages
        要使用到的包
    ProjectSetttings
    Temp
        Library生成过程中产生的临时文件
    UserSettings
        本地工程的一些配置信息

    只需要把Assets、Packages、ProjectSetttings上传到SVN或Git。

视图:

    Project视图
    Hierarchy视图
    Inspector视图
    Scene视图
    Game视图
    导航栏视图

Q: gizmos的作用与使用场景
https://docs.unity3d.com/ScriptReference/Gizmos.html

== script
=== unity-architecture
==== JIT与AOT
JIT: Just-In-Time，程序运行过程中进行转译
AOT: Ahead-Of-Time，提前将IL转译成机器码并且存储在文件中，此文件不能完全独立运行
完全静态编译: 只支持少数平台，基于AOT进一步生成所有的机器码

==== mono
解决C#的跨平台问题(在mono之前，C#只在windows平台上使用)。

开发模式下使用的是mono:
https://docs.unity3d.com/Manual/Mono.html

在游戏发布后自动将DLL转换成IL2CPP的方式。

==== IL2CPP
===== 概览
unity采用IL2CPP的原因:

    为了解决mono的问题，unity推出了il2cpp, 将c#转成c/c++代码，进而编译出native二进制代码。
    C#的一些高级特性，比如垃圾回收，线程等，则都实现到il2cpp runtime库(il2cpp vm)上。

    Mono VM在各个平台移植，维护非常耗时，有时甚至不可能完成
    Mono版本授权受限，换IL2CPP，IL2CPP VM是完全自己开发的组件，从而解决了授权问题
    提高运行效率，换成IL2CPP以后，程序编译成了硬件目标机器指令，运行效率提升

https://docs.unity3d.com/Manual/IL2CPP.html
https://blog.unity.com/topic/il2cpp
https://blog.unity.com/search?q=il2cpp
https://blog.unity.com/engine-platform/an-introduction-to-ilcpp-internals

IL2CPP实现:
unity自带源码位置: Editor\2022.3.32f1\Editor\Data\il2cpp
https://github.com/4ch12dy/il2cpp/

垃圾回收:
The Boehm-Demers-Weiser conservative C/C++ Garbage Collector (bdwgc, also known as bdw-gc, boehm-gc, libgc)
https://github.com/ivmai/bdwgc
基本原理是在new和delete时记录引用关系，在收集垃圾的时候进行扫描，卸载无用的垃圾内存。

===== 参考
https://www.lfzxb.top/il2cpp-all-in-one/

==== coreclr
https://blog.unity.com/engine-platform/porting-unity-to-coreclr

==== 扩展
https://github.com/jacksondunstan/UnityNativeScripting

==== 参考
https://docs.unity3d.com/Manual/unity-architecture.html
https://docs.unity3d.com/Manual/scripting-backends.html

=== ExecutionOrder
https://docs.unity3d.com/Manual/ExecutionOrder.html

- 多个脚本的执行顺序
Project Settings -> Script Execution Order
DefaultExecutionOrder attribute:
https://docs.unity3d.com/2022.3/Documentation/ScriptReference/DefaultExecutionOrder.html
RuntimeInitializeOnLoadMethodAttribute:
https://docs.unity3d.com/ScriptReference/RuntimeInitializeOnLoadMethodAttribute.html

=== coroutine
==== 概览
https://blog.matheusamazonas.net/posts/coroutines_async_await

==== unity coroutines
https://docs.unity3d.com/Manual/Coroutines.html
https://docs.unity3d.com/Manual/ExecutionOrder.html#Coroutines

vs. async/await:
https://discussions.unity.com/t/differences-between-async-await-c-and-coroutines-unity3d/680771

==== UniTask
===== 概览
https://github.com/Cysharp/UniTask
https://neuecc.medium.com/unitask-v2-zero-allocation-async-await-for-unity-with-asynchronous-linq-1aa9c96aa7dd
https://stackoverflow.com/questions/78519132/async-method-vs-unitask-return
https://github.com/Cysharp/UniTask?tab=readme-ov-file#async-void-vs-async-unitaskvoid

===== 超时
https://github.com/Cysharp/UniTask?tab=readme-ov-file#timeout-handling
注意事项:
UniTask has .Timeout, .TimeoutWithoutException methods however, if possible, do not use these, please pass CancellationToken. Because .Timeout work from external of task, can not stop timeoutted task. .Timeout means ignore result when timeout. If you pass a CancellationToken to the method, it will act from inside of the task, so it is possible to stop a running task.
https://github.com/Cysharp/UniTask/issues/218

===== 取消
https://github.com/Cysharp/UniTask/?tab=readme-ov-file#cancellation-and-exception-handling

===== 生命周期
销毁时机:
异步方法完成
取消或中断

===== Forget()
概念:
当调用UniTask.Forget()时，实际上是启动了一个异步任务，但调用者立即 “遗忘” 了这个任务，不再对其进行显式的等待或管理。这意味着从调用Forget()的那一刻起，这个异步任务就开始在后台独立运行，调用者不会因为这个任务未完成而被阻塞等待。

潜在的问题:
(1)资源释放
由于调用者不再跟踪这个异步任务，它可能会在后台持续运行，即使在某些情况下它已经不再需要。如果这个异步任务引用了一些资源(如数据库连接、文件句柄等)，并且没有正确地释放这些资源，就可能导致资源泄漏。
例如，如果异步任务中打开了一个文件进行写入，但没有在任务完成时关闭文件，而调用者又无法知道任务何时完成，就可能导致文件一直处于打开状态，占用系统资源。
(2)异常处理
如果异步任务在运行过程中出现错误，调用者可能无法察觉。因为调用者已经 “遗忘” 了这个任务，不会捕获任何可能由这个任务抛出的异常。这可能导致程序出现未预期的行为或错误，并且难以调试或者确定问题的根源。
此时，建议捕获异常。

适用场景: 
UniTask.Forget()通常适用于那些不需要立即结果、对结果不敏感或者可以在后台持续运行而不影响程序主要逻辑的异步任务。例如，日志记录、后台数据同步等任务。

注意事项:
在使用UniTask.Forget()时，应该确保异步任务不会导致严重的资源泄漏或意外的副作用。如果异步任务涉及到重要的资源管理或可能产生严重错误，应该考虑使用其他方式来管理异步任务的生命周期，如等待任务完成、使用取消令牌等。
同时，应该对异步任务进行适当的错误处理，例如在异步任务中使用try-catch块来捕获异常，并采取适当的措施进行处理，以避免异常被忽略而导致程序出现不可预测的行为。

实现:
https://github.com/Cysharp/UniTask/blob/master/src/UniTask/Assets/Plugins/UniTask/Runtime/UniTaskExtensions.cs
https://github.com/Cysharp/UniTask/blob/master/src/UniTask/Assets/Plugins/UniTask/Runtime/UniTaskVoid.cs

===== 源码分析
https://github.com/Cysharp/UniTask/blob/master/src/UniTask/Assets/Plugins/UniTask/Runtime/IUniTaskSource.cs

=== 序列化
https://docs.unity3d.com/Manual/script-serialization.html

使用场景:
https://docs.unity3d.com/Manual/script-serialization-how-unity-uses.html

Asset Serialization -> Mode 推荐使用Force Text，方便查看，不会影响最终游戏的发布效率

序列化嵌套:
基础类型以及数组等支持序列化，但有些类型不支持序列化，例如字典、List<List<T>>等，需要包装在类里。

序列化引用

序列化继承

=== 脚本属性
- 公共/非公共属性
非公共属性: 默认情况下，非公共属性(private或protected)不会在Inspector中显示。
[SerializeField]: 用于在Inspector中显示非公共属性。
[HideInInspector]: 用于隐藏公共属性，使其不在Inspector中显示。

- 序列化属性

- Header属性

- 编辑模式下执行脚本

- 枚举序列化别名

- 必须包含的组件

- 其它UI扩展面板

- 可选择属性

- 自定义属性

=== 通过脚本操作对象和组件
DontDestoryOnLoad():
https://docs.unity3d.com/ScriptReference/Object.DontDestroyOnLoad.html

=== 参考
https://docs.unity3d.com/Manual/ScriptingSection.html

== API
=== 类层次
https://docs.unity3d.com/400/Documentation/ScriptReference/20_class_hierarchy.html

=== MonoBehaviour
==== 简介
https://docs.unity3d.com/Manual/class-MonoBehaviour.html
https://docs.unity3d.com/ScriptReference/MonoBehaviour.html
游戏脚本

继承关系:
MonoBehaviour ――――――▷ Behaviour ――――――▷ Component ――――――▷ Object

==== 生命周期
===== 执行顺序
https://docs.unity3d.com/6000.0/Documentation/Manual/execution-order.html

===== 初始化和销毁
Awake()/OnDestory()、OnEnable()/OnDisable()、OnApplicationQuit()

Awake(): 脚本首次被初始化时调用，整个生命周期只会执行一次
OnEnable(): 脚本被启动时调用，整个生命周期会执行多次
OnApplicationQuit(): 程序退出时调用
OnDisable(): 脚本被关闭时调用，整个生命周期会执行多次
OnDestory(): 脚本被销毁时调用，整个生命周期只会执行一次

===== 二次初始化
OnEnable()后会调用Reset(), 然后调用Start()方法。

Reset()运行模式下不会执行，通常用来做一些编辑器下的初始化工作，尽量使用UNITY_EDITOR的宏将其包裹起来。

为什么会有Start()呢？
Awake() vs. Start()
https://stackoverflow.com/questions/34652036/awake-and-start
https://docs.unity3d.com/ScriptReference/MonoBehaviour.Awake.html
https://docs.unity3d.com/ScriptReference/MonoBehaviour.Start.html

===== 固定更新FixedUpdate()
默认每0.02秒调用一次，可以在Editor->Project Settings->Time里配置。

FixedUpdate()底层依赖Update(), 会在当前帧的Update()前执行。
如果帧率稳定，表现较好；如果帧率不稳定，FixedUpdate()则会表现糟糕。

通过设置最大间隔时间参数Maximum Allowed Timestep，便不会出现一帧内执行太多次的FixedUpdate()。

一般物理相关的更新都放在FixedUpdate()中。

===== 内置协程回调
IEnumerator

yield return:

    yield return null 等待一帧
    yield return StartCoroutine(CallSomething())
    yield return new WaitForSeconds(5)
    yield return new WaitForFixedUpdate()

与UniTask比较:
https://medium.com/@burakzgen/unity-tips-6-b47d3af4b9ff

内置协程回调相比于UniTask，几乎没什么优势，一般不太建议使用。

===== 脚本逻辑更新
Update()
LateUpdate()

===== 渲染
逻辑更新结束后就进入场景渲染了、之后是Gizmo渲染、以及GUI渲染。
https://docs.unity3d.com/6000.0/Documentation/Manual/execution-order.html#Rendering

=== GameObject
https://docs.unity3d.com/Manual/GameObjects.html
https://docs.unity3d.com/ScriptReference/GameObject.html
游戏对象

=== Object
https://docs.unity3d.com/Manual/class-Object.html
https://docs.unity3d.com/ScriptReference/Object.html

=== Component
https://docs.unity3d.com/ScriptReference/Component.html
游戏组件

游戏组件与游戏对象的关系

游戏组件的种类

=== Transform
https://docs.unity3d.com/Manual/ScriptingTransform.html
https://docs.unity3d.com/ScriptReference/RectTransform.html

=== Vectors
https://docs.unity3d.com/Manual/VectorCookbook.html

=== Quaternion
https://docs.unity3d.com/Manual/class-Quaternion.html

=== ScriptableObject
https://docs.unity3d.com/Manual/class-ScriptableObject.html

=== Time and frame rate management
https://docs.unity3d.com/Manual/TimeFrameManagement.html

=== Mathf
https://docs.unity3d.com/Manual/class-Mathf.html

=== Random
https://docs.unity3d.com/Manual/class-Random.html

=== Debug
https://docs.unity3d.com/Manual/class-Debug.html

=== Gizmos and Handles
https://docs.unity3d.com/Manual/GizmosAndHandles.html

=== 参考
https://docs.unity3d.com/ScriptReference/

== packages and feature sets
https://docs.unity3d.com/Manual/PackagesList.html
https://docs.unity3d.com/2023.2/Documentation/Manual/PackagesList.html
https://docs.unity3d.com/cn/current/Manual/CustomPackages.html

== asset
=== 概要
https://learn.unity.com/tutorial/assets-resources-and-assetbundles
https://cloudycliff.github.io/post/unity_asset_best_practice_0/

=== The Asset Database
https://docs.unity3d.com/2022.3/Documentation/Manual/AssetDatabase.html

=== AssetBundle
==== 介绍
https://docs.unity3d.com/Manual/AssetBundlesIntro.html

==== xasset
https://github.com/xasset/xasset

==== YooAsset
https://github.com/tuyoogame/YooAsset

==== The Addressable Asset System
https://docs.unity3d.com/Manual/com.unity.addressables.html

==== 参考
https://www.jianshu.com/p/df7cfa6d0ec3

== UI
=== NGUI
NGUI vs. UGUI
https://zhuanlan.zhihu.com/p/445999150

=== UGUI
原生
如果UGUI和NGUI选一个，选UGUI

==== 游戏界面
- Text组件
- 富文本
UGUI支持富文本，但只支持简单的标签，无法支持图文混排。
- 描边和阴影
- 动态字体
- 字体花屏
- Text Mesh Pro
官方推荐的字体库
- SDF字体
- 图文混排
- 样式
- 文字fallback
- 点击事件
- Image组件
- Raw Image组件
- Button组件
- Toggle组件
- Scroll View组件
- Slider组件
- Scrollbar组件
- Dropdown组件(下拉选单)
- InputField组件

==== 界面布局
- Rect Transform组件
- 拉伸
- 自动布局
- 文本自适应
- Layout Element组件
- Layout Group组件
- Content Size Filter组件

==== Canvas组件
- 概念
Canvas组件是UI的基础画布，所有UI元素必须放在Canvas对象下面，并且支持嵌套。
Canvas支持3种绘制方式: Overlay(最上层)、Camera与World Space(3D布局)。
其中，用得最多的是Camera，它可以把正交摄像机投影出来的UI元素绘制在Canvas面板上。
3D界面则使用透视摄像机让UI达到更好的交互效果。

- UI摄像机
- 3D界面
- 自适应UI
- Canvas与3D排序

- 裁剪
UGUI提供了两种裁剪方式:
一种是Mask裁剪，优点是可以裁剪出任意形状的UI，缺点是需要额外占用一个Draw Call
另一种是矩形裁剪，Rect Mask 2D并不会额外占用一个Draw Call，应尽可能使用这种方式来裁剪

- 裁剪粒子

==== Atlas图集
- 创建Atlas
- 读取Atlas
- Variant
- 监听加载事件

- 多图集管理

==== 事件系统
- Graphic Raycaster组件
- UI事件
- UI事件管理
- UnityAction和UnityEvent
- C#事件系统
- 3D事件
- K帧动画
- 使用Scroll Rect组件制作游戏摇杆
- 点击区域优化

=== UI Toolkit
设计目标是替代UGUI，UGUI的最大问题是效率低。
当前还没有UGUI成熟。
自Unity 2021.2起，UI Toolkit被官方内置在Unity中，与UGUI的地位相当。

vs. UGUI
https://docs.unity3d.com/Manual/UI-system-compare.html

- 性能
- 使用
- (当前)不足
- 推荐使用场景

=== FGUI
跨平台
https://www.fairygui.com/
https://github.com/fairygui

=== 参考
https://www.lfzxb.top/personal-ui-framework-consider/

== 2D游戏开发
=== Sprite Renderer组件
- 渲染原理
- 渲染排序
- 裁剪
SpriteRender与 Particl System 都可以使用 Sprite Mask 进行裁剪。
裁剪的原理是使用 Shader 的模板测试。

- 2D帧动画

- 2D骨骼动画
IK反向运动: 改动子节点影响父节点

- 精灵资源库

=== Tile地图

=== 2D物理系统
Unity 2D和3D项目的物理引擎均基于PhysX。

- Collider 2D组件
- Rigidbody 2D组件
- 碰撞事件
- 碰撞方向
- 触发器监听
- 复合碰撞体
- Effectors 2D组件
- 关节
- 物理材质与恒定力
- 计算区域

=== 像素风
=== 精灵形状
=== 精灵编辑器

== 3D游戏开发
=== Renderer
- Mesh Renderer(网格渲染器)
- Skinned Mesh Renderer(蒙皮网格渲染器)
- Particle System(粒子系统)
- Trail Renderer(拖尾渲染器)
- Line Renderer(线渲染器)
- Terrain(地形)

=== 游戏对象和资源
- 静态对象
勾选static

- 标记(tag)
个游戏对象只能设置一个独有的标记

- 层
层通常需要和LayerMask配合使用

- Prefab
https://docs.unity3d.com/Manual/Prefabs.html

- Prefab嵌套
https://docs.unity3d.com/Manual/NestedPrefabs.html

- Prefab和游戏对象

- 实例化

- 游戏资源
Unity使用的资源可以分为外部资源和内部资源。
内部资源: unity中创建的资源，如Prefab、场景、材质球、动画剪辑、RenderTexture等；
外部资源: 通过第三方工具产生的资源，如贴图、模型、声音、视频等。
Unity并不会直接使用外部资源，而是将它们生成为另一份资源来使用，好处是可以通过一些配置对原始资源进行加工。
引擎真正使用的资源被保存在Library/Artifacts/中，文件名是生成的资源的MD5名称。
常用的游戏资源类型:

    模型文件:
        文件后缀.fbx
        引擎中的对应类型是Mesh和AnimationClip
    贴图文件:
        文件后缀.bmp、.tif、.tga、.jpg、.png或.psd
        引擎中的对应类型是Texture、Texture2D、Sprite
    音频文件:
        .mp3、.ogg、.wav等
        引擎中的对应类型是AudioClip
    文本文件:
        .txt、.json、.yaml等
        引擎中的对应类型是TextAsset

- 场景
https://docs.unity3d.com/Manual/working-with-scenes.html

- 场景模板
场景模板管线: A Scene Template Pipeline script lets you execute custom code when you create a new scene from the template.
https://docs.unity3d.com/Manual/scene-templates.html

=== 动画系统
- Animator组件
- TimeLine编辑工具

=== 3D物理系统
- 角色控制器(Charator Controller)
- 刚体物理(Rigibody Physics)
- 碰撞体(Collider)
- 关节(Joints)
- 衔接(Articulations)
- 布娃娃物理(Ragdoll Physics)
- 布料(Cloth)

=== 输入系统
- 射线
UI点击事件和点选模型在底层都是通过射线实现的。
检测点击事件就是检测点击的这条射线是否会与物体发生碰撞。

=== Transform组件
- 角色移动

=== 3D与2D结合
https://zhuanlan.zhihu.com/p/363965652

== 静态对象
作用: 提升性能
https://docs.unity3d.com/Manual/StaticObjects.html

=== 光照贴图
=== 反射探针
=== 遮挡剔除
=== 静态合批
=== 导航网格

== graphics
=== render pipelines
==== 概念
https://docs.unity3d.com/Manual/render-pipelines.html
https://zhuanlan.zhihu.com/p/353687806

前向渲染: 适用于光源较少、透明物体较多的场景。
延迟渲染: 适用于光源数量较多的场景，但不适合透明物体，且需要较高的硬件性能。
前向渲染+: 结合了前向渲染和延迟渲染的优点，适合需要处理多个光源且仍需支持透明物体的场景。

===== 前向渲染(Forward Rendering)
概念:

    前向渲染是传统的渲染方法。
    在前向渲染中，每个像素的渲染都涉及所有的光源。
    每个物体的每个表面会根据场景中所有的光源进行计算，这意味着渲染时会处理每个物体与光源的交互。

优点:

    简单高效: 适合较少的光源和相对简单的场景。
    透明度支持: 前向渲染在处理透明物体时非常高效，因为它逐个像素进行计算。
    支持多种后处理效果: 可以与许多后处理效果(如光晕、景深等)很好地结合。
    硬件兼容性好: 对旧的硬件或低端设备有更好的支持。

缺点:

    性能瓶颈: 如果场景中有很多光源，性能可能会下降，因为每个物体都需要计算所有光源的影响。
    难以处理复杂的光源交互: 当有很多动态光源时，前向渲染的性能会受到显著影响。

应用场景:

    适合低光源、透明物体较多的场景，
    如一些移动设备上的游戏、VR项目，或者需要精细控制每个物体外观的场景。

设置:

    Edit > Project Settings > Graphics:
    在 Scriptable Render Pipeline Settings 中选择 Forward Rendering，
    或者在 Quality Settings 中选择前向渲染模式。

===== 延迟渲染(Deferred Rendering)
概念:

    延迟渲染是一种不同于前向渲染的方法，它将渲染过程分为多个阶段，
    特别是在计算光照时，先将场景的几何信息(如位置、法线、颜色等)渲染到多个缓冲区(G-buffer)中，
    再在后续的步骤中计算光源的影响。
    这使得延迟渲染能够在渲染大量光源时，显著减少性能损失。

优点:

    处理大量光源:
        延迟渲染非常适合具有大量光源的场景，因为所有光源的计算是在后期阶段统一进行的，与物体的数量无关。
    灵活的光照计算:
        光源不直接影响物体的渲染，可以更灵活地处理多个动态光源。
    适合现代硬件:
        在强大硬件上，延迟渲染能够提供更高的性能，尤其是在场景中有大量动态光源时。

缺点:

    不适合透明物体:
        延迟渲染处理透明物体时非常困难，因为它依赖于 G-buffer 中的几何数据，透明物体的渲染需要特殊处理。
    内存消耗大:
        需要多个缓冲区来存储物体的几何信息，这会增加显存的消耗。
    对低端硬件性能要求较高:
        延迟渲染对硬件的要求较高，在低端设备上可能不太适用。

应用场景:

    适合需要处理大量动态光源的场景，如大型开放世界游戏、具有多个光源的场景等。

设置:

    Edit > Project Settings > Graphics:
    在 Scriptable Render Pipeline Settings 中选择 Deferred Rendering，
    或者在 Quality Settings 中选择延迟渲染模式。

===== 前向渲染+(Forward+ Rendering)
概念:

    前向渲染+(也叫做 Forward+)是前向渲染和延迟渲染的结合，它在某些情况下可以获得两者的优点。
    前向渲染+ 通过将场景分割成多个区域(例如，基于摄像机视锥体的区域)，并为每个区域计算光源的影响，
    避免了每个物体都需要计算所有光源的情况。这使得它在处理多个光源时既高效又能提供较好的性能。

优点:

    减少计算量:
        它通过对光源进行分组，在计算时只考虑光源对视野中的物体的影响，避免了传统前向渲染的性能瓶颈。
    适应多光源场景:
        相比传统的前向渲染，前向渲染+ 可以更好地处理多光源场景，同时保留前向渲染的优势，如对透明物体的支持。

缺点:

    内存和复杂度:
        相较于传统的前向渲染，前向渲染+ 需要更多的内存和计算复杂度，
        因此在一些场景中可能不如传统前向渲染高效。

应用场景:

    适合在需要处理多个光源的同时，仍然保留前向渲染的灵活性和透明物体渲染的场景。

设置:

    前向渲染+ 通常是通过自定义 Scriptable Render Pipeline(SRP)实现的，
    如使用 Universal Render Pipeline (URP) 或 High Definition Render Pipeline (HDRP)。
    在 URP 或 HDRP 中，可以通过渲染设置启用前向渲染+。

==== SRP(Scriptable Render Pipeline)
SRP(可编程管线)
基于SRP，Unity开发了URP(通用渲染管线)与HDRP(高清渲染管线)。
https://docs.unity3d.com/Manual/scriptable-render-pipeline-introduction.html

- SRP Core

- 摄像机组件工具
Free Camera组件
Camera Switcher组件

- Look Dev

- Render Graph Viewer

- 对URP的展望

==== URP(Universal Render Pipeline)
Unity自2021版本不再维护内置渲染管线，而是使用URP完全代替它。
https://docs.unity3d.com/Manual/universal-render-pipeline.html
https://docs.unity3d.com/Manual/com.unity.render-pipelines.universal.html

- 调试与修改

- vs. 内置渲染管线

- 升级着色器

- LightMode

- Shader Graph

- Renderer Pipeline Asset

- Renderer Pipeline Asset Data

- URP Global Settings

- URP Renderer Feature

==== HDRP(High Definition Render Pipeline)
https://docs.unity3d.com/Manual/high-definition-render-pipeline.html

==== SRP Batch
- 不透明物体绘制

- 半透明物体绘制

- Early-Z

- Alpha Test

- Alpha Blend

- Set Pass Call与Draw Call

- SRP Batch原理
可以减少Set Pass Call的数量，但无法减少Draw Call的数量

==== 渲染技术
===== Blinn-Phong光照计算
===== PBR光照计算
===== 阴影
===== 渲染数据传递
===== SRP流程
===== GPU渲染管线
===== 前向渲染流程
===== 多摄像机与Final Blit
===== ScriptableRenderPass

==== 自定义渲染管线
===== 参与渲染的对象
===== MVP矩阵计算
===== Render Objects
===== Rendering Layer Mask
===== 自定义 Render Feature
===== 裁剪与层
===== UI部分模糊
===== 降低分辨率不包含UI

==== Render Graph
Render Graph是一种用于管理和优化渲染流程的技术，广泛应用于实时渲染和游戏引擎中。它通过图形化的方式描述渲染任务的依赖关系，帮助开发者更高效地组织渲染管线。

1. 核心元素
节点(Node): 每个节点代表一个渲染任务，如绘制场景、应用后处理效果等。
边(Edge): 边表示任务间的依赖关系，确保任务按正确顺序执行。
资源(Resource): 渲染过程中使用的纹理、缓冲区等资源。

2. 主要优势
依赖管理: 自动处理任务间的依赖，避免手动管理。
资源优化: 自动复用和释放资源，减少内存占用。
模块化设计: 便于扩展和维护，适合复杂渲染管线。

3. 工作流程
定义节点和依赖: 明确每个渲染任务及其依赖关系。
构建图结构: 将节点和依赖关系转化为图。
执行渲染: 按图顺序执行任务，确保依赖关系得到满足。

4. 应用场景
游戏引擎: 如Unity、Unreal Engine等，用于管理复杂渲染管线。
实时渲染: VR、AR等需要高效渲染的场景。
后处理效果: 如Bloom、SSAO等，依赖关系复杂的效果。

5. 工具与库
FrameGraph: 用于Vulkan的Render Graph库。
RDG(Render Dependency Graph): Unreal Engine中的实现。
Unity SRP(Scriptable Render Pipeline): 支持Render Graph的模块化渲染管线。

参考:
https://zhuanlan.zhihu.com/p/24181086877

=== color
https://docs.unity3d.com/Manual/graphics-color.html

- color space
https://docs.unity3d.com/Manual/LinearLighting.html
gamma color space is the historically standard format, linear color space rendering gives more precise results.
Is there a reason to ever use gamma color space?
Only when you're targeting old hardware or old graphics APIs. OpenGL ES 2.0 and WebGL 1.0 don't support linear space, besides that gamma can be faster than linear on old mobile devices.
对于需要更真实光照效果的项目，建议使用Linear颜色空间；而对于更注重性能和兼容性的项目，Gamma颜色空间可能是一个更好的选择。

- high dynamic range
https://docs.unity3d.com/Manual/HDR.html

=== 光照
https://docs.unity3d.com/Manual/LightingOverview.html

Physically Based Rendering:
https://www.pbrt.org/

Optimizing PBR
https://community.arm.com/cfs-file/__key/communityserver-blogs-components-weblogfiles/00-00-00-20-66/siggraph2015_2D00_mmg_2D00_renaldas_2D00_slides.pdf

=== 相机
https://docs.unity3d.com/Manual/CamerasOverview.html

=== shader
==== 分类
1 Shaders that are part of the graphics pipeline are the most common type of shader. They perform calculations that determine the color of pixels on the screen. In Unity, you usually work with this type of shader by using Shader objects.
2 Compute shaders perform calculations on the GPU, outside of the regular graphics pipeline.
3 Ray tracing shaders perform calculations related to ray tracing.

==== 数学基础
二维笛卡尔坐标系:

    在屏幕映射时，OpenGL y轴朝上，DirectX y轴朝下。

三维笛卡尔坐标系:

    unity使用左手坐标系。

坐标空间:

    模型空间，世界空间，观察空间，裁剪空间，屏幕空间。
    其中，仅观察空间中unity使用右手坐标系，其它均使用左手坐标系。
    除了这些最重要的坐标空间，实际开发中也会遇到其它空间:
        例如切线空间(tangent space, 通常用于法线映射)。

内置变量:

    变换矩阵、摄像机和屏幕参数

==== 基础光照
- 光源
Directional Light(方向光)
Spot Light(聚光灯)
Point Light(点光源)
Area Light(面光源)

- 吸收和散射
高光反射(specular)表示物体表面是如何反射光线的
漫反射(diffuse)表示有多少光线会被折射、吸收和散射出表面

- 着色

- BRDF光照模型

==== 注意事项

==== 参考
https://docs.unity3d.com/Manual/Shaders.html

=== 参考
https://docs.unity3d.com/Manual/Graphics.html

== physical
刚体
碰撞体

=== 参考
https://docs.unity3d.com/Manual/PhysicsSection.html

== 动画
=== 概念
模型动画: 顶点动画与骨骼动画
非模型动画

=== timeline
https://docs.unity3d.com/Manual/com.unity.timeline.html

Q: timeline解决什么问题？
Q: timeline有何缺点？

=== DOTween
https://github.com/Demigiant/dotween

=== 参考
https://docs.unity3d.com/Manual/AnimationSection.html

== 导航
https://docs.unity3d.com/Manual/com.unity.ai.navigation.html

== 持久化

== 资源管理
=== 编辑器模式
- 游戏资源

- 加载资源

- 卸载资源
Resources.UnloadAsset()
Resources.UnloadUnusedAssets()

- 创建与修改资源

- 创建与修改游戏对象

- reimport
Q: reimport本质上是干什么的？
Q: 什么时候需要reimport?

=== 运行模式
- 参与打包的资源

- Resources

- 通过脚本计算依赖

- StreamingAssets

- 场景资源
只需要将场景添加到Build Settings中就可以参与打包了。

=== AssetBundle
- 设置AB

- 设置依赖

- 纯脚本打包

- 差异打包

- AB压缩格式

- 加载AB

- 内存与卸载

- 场景AB

- CDN下载流程

- 加载流程

- 多进程AB构建

=== 代码编译
ScriptAssemblies/Assembly-CSharp.dll

- Plugins
Plugins目录下的代码会编译到Assembly-CSharp-firstpass.dll中，修改逻辑代码就不再同时编译这部分代码了。
Plugins目录下的代码是优先编译的，Assembly-CSharp.dll可以调用它们，但是它们不能反向调用Assembly-CSharp.dll。

- Assembly

- Editor
Assembly-CSharp-Editor.dll

- IL2CPP

- AB中的脚本

- 热更新代码

=== Shader编译
- 打包与运行

- Shader重复打包

- Shader宏

- Shader与AB包

- Shader打包剥离

=== 美术资源管理
- 版本管理
- 材质丢失
- 协作开发与多工程
- 美术资源生成

== 自动化与打包
=== 自动化设置资源
- 设置贴图格式
默认贴图格式是Automatic

- 动画控制器
应该禁止使用Animation Controller文件

- 设置模型格式

- 导出动画文件

- 生成角色Prefab

- 生成场景

- 场景dirty状态

- 自动生成UI图集

- 更换Shader残留宏

- 自动生成变种收集器

- 剔除顶点色

=== 自动化打包
- 打包过程中的事件
- 打包机的选择
- 打包后自动压缩
- 调用shell脚本
- 命令行打开工程
- 脚本化打包参数
- Jenkins

== 热重载
hot reload
https://www.bilibili.com/video/BV14X4y1y7mB/?vd_source=8390cf4acc81f67e6df66ea39d1fc6fe

== 热更新
=== 概览
https://zhuanlan.zhihu.com/p/535748877

=== hybridclr
https://hybridclr.doc.code-philosophy.com/docs/intro
https://github.com/focus-creative-games/inspect_hybridclr
https://github.com/focus-creative-games/hybridclr

- 基于AOT(本地机器代码执行)+Interpreter(IL解释执行)使用同一个内存数据对象，没有跨域访问的问题。
xLua或ILRuntime热更方案都有一条原则，尽量减少与Unity C#层的交互，但是这种交互又避免不了而且量大，比如要在逻辑热更代码里面访问Unity C#的GameObject对象数据，最终在运行的时候，GameObject会在AOT模式下的原生内存数据结构对象。由于xLua或ILRuntime有自己的虚拟机，所以不能直接访问原生GameObject数据对象，往往要把访问里面的数据包装成函数，这样性能开销就大大的增加了。而huatuo是在IL2CPP模式下的解释执行，直接可以访问原生的数据对象。

- 逻辑代码更新后(1.0版本到2.0版本)，如果发布新版本2.0(重新安装新版本的app)，可以直接把更新的逻辑，直接使用AOT编译出来，不用解释执行，从而获得AOT的性能。
而基于xLua, ILRuntime的热更方案开发的代码(1.0版本到2.0版本)，用户即使重新安装2.0客户端后，还是解释执行，新版本的性能无法达到AOT的性能级别。

- 相比传统的Lua或ILRuntime热更，能更新任意部分的代码。
不用像Lua或ILRuntime一样，分热更代码+框架代码，框架代码有bug还不能热更。

== 多语言

== framework
=== gf
https://github.com/EllanJiang/GameFramework
https://www.lfzxb.top/gameframework-all/

=== et
https://github.com/egametang/ET
https://github.com/egametang/ET/tree/master/Book
https://www.lfzxb.top/et-all/

=== ecs(entity component system)
https://en.wikipedia.org/wiki/Entity_component_system
https://developer.unity.cn/projects/677ca79dedbc2a001f135aec
https://developer.unity.cn/projects/677cd9d4edbc2a001eac2828
https://indienova.com/indie-game-development/gdc-overwatch-gameplay-architecture-and-netcode/
https://blog.codingnow.com/eo/ecs/

=== dots(data-oriented tech stack)
https://unity.com/dots

=== 参考
https://www.zhihu.com/question/268285328

== 库
=== 寻路
https://github.com/recastnavigation/recastnavigation

=== 行为树
https://github.com/meniku/NPBehave

== 工具
- Visual Studio
https://docs.unity3d.com/Manual/SL-DebuggingD3D11ShadersWithVS.html

- stack trace
https://docs.unity3d.com/Manual/StackTrace.html

- unit test
https://docs.unity3d.com/Manual/testing-editortestsrunner.html

- roslyn
https://docs.unity3d.com/Manual/roslyn-analyzers.html

== 扩展
=== package
==== vs. plugin
https://forum.unity.com/threads/unity-plugin-vs-unity-package.263003/

==== rider
https://docs.unity3d.com/Manual/com.unity.ide.rider.html
pausepoints:
https://blog.jetbrains.com/dotnet/2020/06/11/introducing-unity-pausepoints-for-rider/

=== 插件
https://docs.unity3d.com/Manual/Plugins.html

=== 编辑器扩展

== 性能优化
=== 概要
https://docs.unity3d.com/Manual/UnderstandingPerformance.html

=== Profiler
https://docs.unity3d.com/Manual/Profiler.html
https://docs.unity3d.com/Manual/ProfilerWindow.html
Q: 如何对Unity单元测试程序进行性能分析？

=== Frame Debugger
https://docs.unity3d.com/Manual/FrameDebugger.html

=== perfdog
https://perfdog.qq.com/helpCenter

=== burst
https://docs.unity3d.com/Manual/com.unity.burst.html

=== 参考
https://docs.unity3d.com/Manual/Profiler.html
https://docs.unity3d.com/Manual/graphics-performance-profiling.html

== 团结引擎
https://docs.unity.cn/cn/tuanjiemanual/Manual/intro.html

== tutorial
https://catlikecoding.com/unity/tutorials/
https://www.youtube.com/playlist?list=PLPV2KyIb3jR4GH32npxmkXE-AHnlamcdG

== project
https://github.com/Unity-Technologies

== 源码
https://github.com/Unity-Technologies/UnityCsReference

== 项目规范
https://www.zhihu.com/question/3854922557/answer/57599729291

== AI
https://unity.com/ai

== 参考
https://docs.unity3d.com/Manual/index.html
https://docs.unity3d.com/cn/current/Manual/Graphics.html
《Unity3D游戏开发》第3版 宣雨松
https://developer.unity.cn/u/unityji-zhu-bo-ke?tab=article