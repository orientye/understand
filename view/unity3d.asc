= unity3d
:revnumber: 0.0.1
:author: orient
:homepage: http://orientye.com
:toc:
:toclevels: 5
:sectnums:
:sectnumlevels: 5
:hardbreaks-option:
<<<

== 编辑器结构
文件目录:

    Assets
    Library
        根据Assets目录下的游戏资源生成的中间文件
        IL指令会被编译到Library/ScripAssemblies/Assembly-CSharp.dll等文件中
        可以使用ILSpy工具对dll进行反编译
    Logs
    Packages
        保存的是要用到的包
    ProjectSetttings
    Temp
        Library生成过程中产生的临时文件
    UserSettings
        本地工程的一些配置信息

    只需要把Assets、Packages、ProjectSetttings上传到SVN或Git。

视图:

    Project视图
    Hierarchy视图
    Inspector视图
    Scene视图
    Game视图
    导航栏视图

Q: gizmos的作用与使用场景

== script
=== unity-architecture
==== JIT与AOT
JIT: Just-In-Time，程序运行过程中进行转译
AOT: Ahead-Of-Time，提前将IL转译成机器码并且存储在文件中，此文件不能完全独立运行
完全静态编译: 只支持少数平台，基于AOT进一步生成所有的机器码

==== mono
解决C#的跨平台问题(在mono之前，C#只在windows平台上使用)。

开发模式下使用的是mono:
https://docs.unity3d.com/Manual/Mono.html

在游戏发布后自动将DLL转换成IL2CPP的方式。

==== IL2CPP
为了解决mono的问题，unity推出了il2cpp, 将c#转成c/c++代码，进而编译出native二进制代码。
C#的一些高级特性，比如垃圾回收，线程等，则都实现到il2cpp runtime库(il2cpp vm)上。

unity采用IL2CPP的原因:
Mono VM在各个平台移植，维护非常耗时，有时甚至不可能完成
Mono版本授权受限，换IL2CPP，IL2CPP VM是完全自己开发的组件，从而解决了授权问题
提高运行效率，换成IL2CPP以后，程序编译成了硬件目标机器指令，运行效率提升1.5-2.0倍

https://docs.unity3d.com/Manual/IL2CPP.html
https://blog.unity.com/topic/il2cpp
https://blog.unity.com/search?q=il2cpp
https://blog.unity.com/engine-platform/an-introduction-to-ilcpp-internals

IL2CPP实现:
unity自带源码位置: Editor\2022.3.32f1\Editor\Data\il2cpp
https://github.com/4ch12dy/il2cpp/

垃圾回收:
The Boehm-Demers-Weiser conservative C/C++ Garbage Collector (bdwgc, also known as bdw-gc, boehm-gc, libgc)
https://github.com/ivmai/bdwgc
基本原理是在new和delete时记录引用关系，在收集垃圾的时候进行扫描，卸载无用的垃圾内存。

==== coreclr
https://blog.unity.com/engine-platform/porting-unity-to-coreclr

==== 扩展
https://github.com/jacksondunstan/UnityNativeScripting

==== 参考
https://docs.unity3d.com/Manual/unity-architecture.html
https://docs.unity3d.com/Manual/scripting-backends.html

=== ExecutionOrder
https://docs.unity3d.com/Manual/ExecutionOrder.html

=== 序列化
https://docs.unity3d.com/Manual/script-serialization.html
使用场景:
https://docs.unity3d.com/Manual/script-serialization-how-unity-uses.html

=== coroutine
==== 概览
https://blog.matheusamazonas.net/posts/coroutines_async_await

==== unity coroutines
https://docs.unity3d.com/Manual/Coroutines.html
https://docs.unity3d.com/Manual/ExecutionOrder.html#Coroutines

vs. async/await:
https://discussions.unity.com/t/differences-between-async-await-c-and-coroutines-unity3d/680771

==== UniTask
===== 概览
https://github.com/Cysharp/UniTask
https://neuecc.medium.com/unitask-v2-zero-allocation-async-await-for-unity-with-asynchronous-linq-1aa9c96aa7dd
https://stackoverflow.com/questions/78519132/async-method-vs-unitask-return
https://github.com/Cysharp/UniTask?tab=readme-ov-file#async-void-vs-async-unitaskvoid

===== 超时
https://github.com/Cysharp/UniTask?tab=readme-ov-file#timeout-handling
注意事项:
UniTask has .Timeout, .TimeoutWithoutException methods however, if possible, do not use these, please pass CancellationToken. Because .Timeout work from external of task, can not stop timeoutted task. .Timeout means ignore result when timeout. If you pass a CancellationToken to the method, it will act from inside of the task, so it is possible to stop a running task.
https://github.com/Cysharp/UniTask/issues/218

===== 取消
https://github.com/Cysharp/UniTask/?tab=readme-ov-file#cancellation-and-exception-handling

===== 生命周期
销毁时机:
异步方法完成
取消或中断

===== Forget()
概念:
当调用UniTask.Forget()时，实际上是启动了一个异步任务，但调用者立即 “遗忘” 了这个任务，不再对其进行显式的等待或管理。这意味着从调用Forget()的那一刻起，这个异步任务就开始在后台独立运行，调用者不会因为这个任务未完成而被阻塞等待。

潜在的问题：
（1）资源释放
由于调用者不再跟踪这个异步任务，它可能会在后台持续运行，即使在某些情况下它已经不再需要。如果这个异步任务引用了一些资源（如数据库连接、文件句柄等），并且没有正确地释放这些资源，就可能导致资源泄漏。
例如，如果异步任务中打开了一个文件进行写入，但没有在任务完成时关闭文件，而调用者又无法知道任务何时完成，就可能导致文件一直处于打开状态，占用系统资源。
（2）异常处理
如果异步任务在运行过程中出现错误，调用者可能无法察觉。因为调用者已经 “遗忘” 了这个任务，不会捕获任何可能由这个任务抛出的异常。这可能导致程序出现未预期的行为或错误，并且难以调试或者确定问题的根源。
此时，建议捕获异常。

适用场景：
UniTask.Forget()通常适用于那些不需要立即结果、对结果不敏感或者可以在后台持续运行而不影响程序主要逻辑的异步任务。例如，日志记录、后台数据同步等任务。

注意事项：
在使用UniTask.Forget()时，应该确保异步任务不会导致严重的资源泄漏或意外的副作用。如果异步任务涉及到重要的资源管理或可能产生严重错误，应该考虑使用其他方式来管理异步任务的生命周期，如等待任务完成、使用取消令牌等。
同时，应该对异步任务进行适当的错误处理，例如在异步任务中使用try-catch块来捕获异常，并采取适当的措施进行处理，以避免异常被忽略而导致程序出现不可预测的行为。

实现：
https://github.com/Cysharp/UniTask/blob/master/src/UniTask/Assets/Plugins/UniTask/Runtime/UniTaskExtensions.cs
https://github.com/Cysharp/UniTask/blob/master/src/UniTask/Assets/Plugins/UniTask/Runtime/UniTaskVoid.cs

===== 源码分析
https://github.com/Cysharp/UniTask/blob/master/src/UniTask/Assets/Plugins/UniTask/Runtime/IUniTaskSource.cs

=== 参考
https://docs.unity3d.com/Manual/ScriptingSection.html

== API
=== 类层次
https://docs.unity3d.com/400/Documentation/ScriptReference/20_class_hierarchy.html

=== MonoBehaviour
==== 简介
https://docs.unity3d.com/Manual/class-MonoBehaviour.html
https://docs.unity3d.com/ScriptReference/MonoBehaviour.html
游戏脚本

==== 生命周期
===== 执行顺序
https://docs.unity3d.com/6000.0/Documentation/Manual/execution-order.html

===== 初始化和销毁
Awake()/OnDestory()、OnEnable()/OnDisable()、OnApplicationQuit()

Awake(): 脚本首次被初始化时调用，整个生命周期只会执行一次
OnEnable(): 脚本被启动时调用，整个生命周期会执行多次
OnApplicationQuit(): 程序退出时调用
OnDisable(): 脚本被关闭时调用，整个生命周期会执行多次
OnDestory(): 脚本被销毁时调用，整个生命周期只会执行一次

===== 二次初始化
OnEnable()后会调用Reset(), 然后调用Start()方法。

Reset()运行模式下不会执行，通常用来做一些编辑器下的初始化工作，尽量使用UNITY_EDITOR的宏将其包裹起来。

为什么会有Start()呢？
Awake() vs. Start()
https://stackoverflow.com/questions/34652036/awake-and-start
https://docs.unity3d.com/ScriptReference/MonoBehaviour.Awake.html
https://docs.unity3d.com/ScriptReference/MonoBehaviour.Start.html

===== 固定更新FixedUpdate()
默认每0.02秒调用一次，可以在Editor->Project Settings->Time里配置。

FixedUpdate()底层依赖Update(), 会在当前帧的Update()前执行。
如果帧率稳定，表现较好；如果帧率不稳定，FixedUpdate()则会表现糟糕。

通过设置最大间隔时间参数Maximum Allowed Timestep，便不会出现一帧内执行太多次的FixedUpdate()。

一般物理相关的更新都放在FixedUpdate()中。

===== 内置协程回调

=== GameObject
https://docs.unity3d.com/Manual/GameObjects.html
https://docs.unity3d.com/ScriptReference/GameObject.html
游戏对象

=== Object
https://docs.unity3d.com/Manual/class-Object.html
https://docs.unity3d.com/ScriptReference/Object.html

=== Component
https://docs.unity3d.com/ScriptReference/Component.html
游戏组件

游戏组件与游戏对象的关系

游戏组件的种类

=== Transform
https://docs.unity3d.com/Manual/ScriptingTransform.html
https://docs.unity3d.com/ScriptReference/RectTransform.html

=== Vectors
https://docs.unity3d.com/Manual/VectorCookbook.html

=== Quaternion
https://docs.unity3d.com/Manual/class-Quaternion.html

=== ScriptableObject
https://docs.unity3d.com/Manual/class-ScriptableObject.html

=== Time and frame rate management
https://docs.unity3d.com/Manual/TimeFrameManagement.html

=== Mathf
https://docs.unity3d.com/Manual/class-Mathf.html

=== Random
https://docs.unity3d.com/Manual/class-Random.html

=== Debug
https://docs.unity3d.com/Manual/class-Debug.html

=== Gizmos and Handles
https://docs.unity3d.com/Manual/GizmosAndHandles.html

=== 参考
https://docs.unity3d.com/ScriptReference/

== packages and feature sets
https://docs.unity3d.com/2023.2/Documentation/Manual/PackagesList.html

https://docs.unity3d.com/cn/current/Manual/CustomPackages.html

== asset
=== 概要
https://learn.unity.com/tutorial/assets-resources-and-assetbundles
https://cloudycliff.github.io/post/unity_asset_best_practice_0/

=== The Asset Database
https://docs.unity3d.com/2022.3/Documentation/Manual/AssetDatabase.html

=== AssetBundle
==== 介绍
https://docs.unity3d.com/Manual/AssetBundlesIntro.html

==== xasset
https://github.com/xasset/xasset

==== YooAsset
https://github.com/tuyoogame/YooAsset

==== The Addressable Asset System
https://docs.unity3d.com/Manual/com.unity.addressables.html

==== 参考
https://www.jianshu.com/p/df7cfa6d0ec3

== UI
=== NGUI
NGUI vs. UGUI
https://zhuanlan.zhihu.com/p/445999150

=== UGUI
原生
如果UGUI和NGUI选一个，选UGUI

=== FGUI
跨平台
https://www.fairygui.com/
https://github.com/fairygui

=== UI Toolkit

=== 参考
https://www.lfzxb.top/personal-ui-framework-consider/

== shader
=== 分类
1 Shaders that are part of the graphics pipeline are the most common type of shader. They perform calculations that determine the color of pixels on the screen. In Unity, you usually work with this type of shader by using Shader objects.
2 Compute shaders perform calculations on the GPU, outside of the regular graphics pipeline.
3 Ray tracing shaders perform calculations related to ray tracing.

=== 数学基础
二维笛卡尔坐标系:
在屏幕映射时，OpenGL y轴朝上，DirectX y轴朝下。

三维笛卡尔坐标系:
unity使用左手坐标系。

坐标空间:
模型空间，世界空间，观察空间，裁剪空间，屏幕空间。
其中，仅观察空间中unity使用右手坐标系，其它均使用左手坐标系。
除了这些最重要的坐标空间，实际开发中也会遇到其它空间，例如切线空间(tangent space, 通常用于法线映射)。

内置变量:
变换矩阵、摄像机和屏幕参数

=== 基础光照
- 光源

- 吸收和散射
高光反射(specular)表示物体表面是如何反射光线的
漫反射(diffuse)表示有多少光线会被折射、吸收和散射出表面

- 着色

- BRDF光照模型

=== 注意事项

=== 参考
https://docs.unity3d.com/Manual/Shaders.html

== graphics
=== render pipelines
https://docs.unity3d.com/Manual/render-pipelines.html
https://zhuanlan.zhihu.com/p/353687806

前向渲染(Forward)
前向渲染+(Forward+)
延迟渲染(Deferred)

=== color
https://docs.unity3d.com/Manual/graphics-color.html

- color space
https://docs.unity3d.com/Manual/LinearLighting.html
gamma color space is the historically standard format, linear color space rendering gives more precise results.
Is there a reason to ever use gamma color space?
Only when you're targeting old hardware or old graphics APIs. OpenGL ES 2.0 and WebGL 1.0 don't support linear space, besides that gamma can be faster than linear on old mobile devices.
对于需要更真实光照效果的项目，建议使用Linear颜色空间；而对于更注重性能和兼容性的项目，Gamma颜色空间可能是一个更好的选择。

- high dynamic range
https://docs.unity3d.com/Manual/HDR.html

=== 参考
https://docs.unity3d.com/Manual/Graphics.html

== 光照
https://docs.unity3d.com/Manual/LightingOverview.html

Physically Based Rendering:
https://www.pbrt.org/

Optimizing PBR
https://community.arm.com/cfs-file/__key/communityserver-blogs-components-weblogfiles/00-00-00-20-66/siggraph2015_2D00_mmg_2D00_renaldas_2D00_slides.pdf

== physical
刚体
碰撞体

=== 参考
https://docs.unity3d.com/Manual/PhysicsSection.html

== 动画
=== 概念
模型动画: 顶点动画与骨骼动画
非模型动画

=== timeline
https://docs.unity3d.com/Manual/com.unity.timeline.html

=== 参考
https://docs.unity3d.com/Manual/AnimationSection.html

== 相机
=== 参考
https://docs.unity3d.com/Manual/CamerasOverview.html

== 导航
https://docs.unity3d.com/Manual/com.unity.ai.navigation.html

== 热重载
hot reload
https://www.bilibili.com/video/BV14X4y1y7mB/?vd_source=8390cf4acc81f67e6df66ea39d1fc6fe

== 热更新
=== 概览
https://zhuanlan.zhihu.com/p/535748877

=== hybridclr
https://hybridclr.doc.code-philosophy.com/docs/intro
https://github.com/focus-creative-games/hybridclr

- 基于AOT(本地机器代码执行)+Interpreter(IL解释执行)使用同一个内存数据对象，没有跨域访问的问题。
xLua或ILRuntime热更方案都有一条原则，尽量减少与Unity C#层的交互，但是这种交互又避免不了而且量大，比如要在逻辑热更代码里面访问Unity C#的GameObject对象数据，最终在运行的时候，GameObject会在AOT模式下的原生内存数据结构对象。由于xLua或ILRuntime有自己的虚拟机，所以不能直接访问原生GameObject数据对象，往往要把访问里面的数据包装成函数，这样性能开销就大大的增加了。而huatuo是在IL2CPP模式下的解释执行，直接可以访问原生的数据对象。

- 逻辑代码更新后(1.0版本到2.0版本)，如果发布新版本2.0(重新安装新版本的app)，可以直接把更新的逻辑，直接使用AOT编译出来，不用解释执行，从而获得AOT的性能。
而基于xLua, ILRuntime的热更方案开发的代码(1.0版本到2.0版本)，用户即使重新安装2.0客户端后，还是解释执行，新版本的性能无法达到AOT的性能级别。

- 相比传统的Lua或ILRuntime热更，能更新任意部分的代码。
不用像Lua或ILRuntime一样，分热更代码+框架代码，框架代码有bug还不能热更。

== 多语言

== framework
=== gf
https://github.com/EllanJiang/GameFramework
https://www.lfzxb.top/gameframework-all/

=== et
https://github.com/egametang/ET
https://github.com/egametang/ET/tree/master/Book
https://www.lfzxb.top/et-all/

=== ecs
https://en.wikipedia.org/wiki/Entity_component_system
https://indienova.com/indie-game-development/gdc-overwatch-gameplay-architecture-and-netcode/
https://blog.codingnow.com/eo/ecs/

=== dots
https://unity.com/dots

=== 参考
https://www.zhihu.com/question/268285328

== 库
=== 寻路
https://github.com/recastnavigation/recastnavigation

=== 行为树
https://github.com/meniku/NPBehave

== 工具
- Visual Studio
https://docs.unity3d.com/Manual/SL-DebuggingD3D11ShadersWithVS.html

- stack trace
https://docs.unity3d.com/Manual/StackTrace.html

- unit test
https://docs.unity3d.com/Manual/testing-editortestsrunner.html

- roslyn
https://docs.unity3d.com/Manual/roslyn-analyzers.html

== 扩展
=== package
==== vs. plugin
https://forum.unity.com/threads/unity-plugin-vs-unity-package.263003/

==== rider
https://docs.unity3d.com/Manual/com.unity.ide.rider.html
pausepoints:
https://blog.jetbrains.com/dotnet/2020/06/11/introducing-unity-pausepoints-for-rider/

=== 插件
https://docs.unity3d.com/Manual/Plugins.html

== 性能优化
- 概要
https://docs.unity3d.com/Manual/UnderstandingPerformance.html

- Profiler
https://docs.unity3d.com/Manual/ProfilerWindow.html

- Frame Debugger
https://docs.unity3d.com/Manual/FrameDebugger.html

- perfdog
https://perfdog.qq.com/helpCenter

- burst
https://docs.unity3d.com/Manual/com.unity.burst.html

- 参考
https://docs.unity3d.com/Manual/Profiler.html
https://docs.unity3d.com/Manual/graphics-performance-profiling.html

== 团结引擎
https://docs.unity.cn/cn/tuanjiemanual/Manual/intro.html

== tutorial
https://catlikecoding.com/unity/tutorials/
https://www.youtube.com/playlist?list=PLPV2KyIb3jR4GH32npxmkXE-AHnlamcdG

== project
https://github.com/Unity-Technologies

== 源码
https://github.com/Unity-Technologies/UnityCsReference

== 参考
https://docs.unity3d.com/Manual/index.html
https://docs.unity3d.com/cn/current/Manual/Graphics.html