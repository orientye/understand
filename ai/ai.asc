= AI
:hardbreaks-option:
:revnumber: 0.0.1
:author: orient
:toc:
:toclevels: 5
:homepage: http://orientye.com

== 概览

=== 概念
- 分类
机器学习(machine learning)
深度学习(deep learning)
有监督学习(supervised learning)与无监督学习(unsupervised learning)
强化学习(reinforcement learning)
参考:
https://www.zhihu.com/question/279973545
https://arxiv.org/pdf/1810.06339

- 张量(tensor)
n维数组，也称为张量（tensor）。
无论使用哪个深度学习框架，其张量类（在MXNet中为ndarray，在PyTorch和TensorFlow中为Tensor）都与Numpy的ndarray类似。但深度学习框架又比Numpy的ndarray多了一些重要功能：首先，GPU很好地支持加速计算，而NumPy仅支持CPU计算；其次，张量类支持自动微分。
深度学习操作的主要对象是张量。它提供了基本数学运算、广播、索引、切片、内存节省和转换其他Python对象等功能。

- AIGC
人工智能生成内容（Artificial Intelligence Generated Content）

== 机器学习

=== 概念
==== 学习
在机器学习中，学习（learning）是一个训练模型的过程。通过这个过程，发现正确的参数集，从而使模型强制执行所需的行为。换句话说，用数据训练（train）模型。
训练过程通常包含如下步骤：
    从一个随机初始化参数的模型开始，这个模型基本没有“智能”；
    获取一些数据样本；
    调整参数，使模型在这些样本中表现得更好；
    重复第（2）步和第（3）步，直到模型在任务中的表现令人满意。

==== 核心组件
可以用来学习的数据（data）；
如何转换数据的模型（model）；
一个目标函数（objective function），用来量化模型的有效性；
调整模型参数以优化目标函数的算法（algorithm）。

=== 监督学习
==== 概念
监督学习是机器学习的一种方法，可以由训练资料中学到或建立一个模式（函数/learning model），并依此模式推测新的实例。训练资料是由输入对象（通常是向量）和预期输出所组成。函数的输出可以是一个连续的值（称为回归分析），或是预测一个分类标签（称作分类）。

    回归(regression):
        主要用于预测数值型数据
        应用实例:
            股票价格波动的预测，房屋价格的预测等

    分类(classification):
        将实例数据划分到合适的类别中
        应用实例:
            判断网站是否被黑客入侵(二分类)，手写数字的自动识别(多分类)

==== 线性回归
===== 概念
回归(regression):
回归是能为一个或多个自变量与因变量之间关系建模的一类方法。在自然科学和社会科学领域，回归经常用来表示输入和输出之间的关系。
在机器学习领域中的大多数任务通常都与预测(prediction)有关。

线性回归(linear regression):
可以追溯到19世纪初，它在回归的各种标准工具中最简单而且最流行。
线性回归基于几个简单的假设：首先，假设自变量和因变量之间的关系是线性的，即可以表示为中元素的加权和，这里通常允许包含观测值的一些噪声；其次，假设任何噪声都比较正常，如噪声遵循正态分布。

线性模型

代价函数(cost function/lost function损失函数):
损失函数能够量化目标的实际值与预测值之间的差距。通常会选择非负数作为损失，且数值越小表示损失越小，完美预测时的损失为0。
回归问题中最常用的损失函数是平方误差函数。

训练数据集用于拟合(overfitting)模型参数，测试数据集用于评估拟合的模型。

从线性回归到深度网络:
可以将线性回归是描述为一个单层神经网络

===== 实现

==== 梯度下降
梯度下降(gradient descent):
梯度下降和梯度下降的变体不仅用于训练线性回归，还用于训练所有AI中一些最大和最复杂的模型。

学习率(learning rate)alpha

实际中的执行可能会非常慢：因为在每一次更新参数之前，必须遍历整个数据集。因此，通常会在每次需要计算更新的时候随机抽取一小批样本，这种变体叫做小批量随机梯度下降（minibatch stochastic gradient descent）。

==== softmax回归

==== 参考
https://zh.d2l.ai/chapter_linear-networks/index.html

=== 无监督学习
==== 概念
无监督学习是机器学习的一种方法，没有给定事先标记过的训练示例，自动对输入的资料进行分类或分群。

无监督学习的主要运用包含：聚类分析（cluster analysis）、关系规则（association rule）、维度缩减（dimensionality reduce）。它是监督式学习和强化学习等策略之外的一种选择。

一个常见的无监督学习是数据聚类。在人工神经网络中，生成对抗网络（GAN）、自组织映射（SOM）和适应性共振理论（ART）则是最常用的非监督式学习。

== 强化学习
=== 概念
在强化学习问题中，智能体（agent）在一系列的时间步骤上与环境交互。在每个特定时间点，智能体从环境接收一些观察（observation），并且必须选择一个动作（action），然后通过某种机制（有时称为执行器）将其传输回环境，最后智能体从环境中获得奖励（reward）。此后新一轮循环开始，智能体接收后续观察，并选择后续操作，依此类推。

当环境可被完全观察到时，强化学习问题被称为马尔可夫决策过程（markov decision process）。当状态不依赖于之前的操作时，称该问题为上下文赌博机（contextual bandit problem）。当没有状态，只有一组最初未知回报的可用动作时，这个问题就是经典的多臂赌博机（multi-armed bandit problem）。

== 深度学习
=== 概念
卷积神经网络（CNN）：
主要用于处理图像数据。它通过卷积层和池化层自动提取图像的特征，从而实现图像分类、目标检测等任务。

循环神经网络（RNN）：
适用于处理序列数据，如文本、时间序列数据等。它能够记住之前的信息，并利用这些信息来处理当前的输入。长短期记忆网络（LSTM）和门控循环单元（GRU）是常见的 RNN 变体，能够更好地处理长序列数据中的长期依赖关系。

生成对抗网络（GAN）：
由生成器和判别器组成。生成器试图生成逼真的假数据，而判别器则试图区分真实数据和生成器生成的数据。通过不断的对抗训练，生成器和判别器的性能都不断提高。

== 多层感知机
=== 概念
Multilayer Perceptrons，即MLP
最简单的深度网络称为多层感知机。多层感知机由多层神经元组成，每一层与它的上一层相连，从中接收输入；同时每一层也与它的下一层相连，影响当前层的神经元。

多层感知机在输出层和输入层之间增加一个或多个全连接隐藏层，并通过激活函数转换隐藏层的输出。

常用的激活函数包括ReLU函数、sigmoid函数和tanh函数。

== 计算机视觉

== 自然语言处理

== 工具
- Jupyter Notebook

- GPU
https://zh.d2l.ai/chapter_appendix-tools-for-deep-learning/selecting-servers-gpus.html

参考:
https://zh.d2l.ai/chapter_appendix-tools-for-deep-learning/index.html

== 框架/库
https://github.com/pytorch
https://github.com/apache/mxnet
https://github.com/tensorflow/tensorflow

参考:
https://www.zhihu.com/question/46587833

== project
https://github.com/vietnh1009/Super-mario-bros-PPO-pytorch
https://github.com/karpathy/nanoGPT
https://github.com/openai

== 参考
https://en.d2l.ai/
https://zh.d2l.ai/
https://www.bilibili.com/video/BV1Bq421A74G/
https://www.bilibili.com/video/BV1Wv411h7kN/
https://www.coursera.org/specializations/machine-learning-introduction#courses
https://cs231n.stanford.edu/
https://github.com/tangyudi/Ai-Learn
https://github.com/apachecn/ai-roadmap/
https://github.com/mahseema/awesome-ai-tools