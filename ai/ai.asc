= AI
:hardbreaks-option:
:revnumber: 0.0.1
:author: orient
:toc:
:homepage: http://orientye.com

== 概览

=== 概念
==== 分类
机器学习(machine learning)
深度学习(deep learning)
有监督学习(supervised learning)与无监督学习(unsupervised learning)
强化学习(reinforcement learning)

参考:
https://www.zhihu.com/question/279973545
https://arxiv.org/pdf/1810.06339

==== 张量(tensor)
n维数组，也称为张量（tensor）。
无论使用哪个深度学习框架，其张量类（在MXNet中为ndarray，在PyTorch和TensorFlow中为Tensor）都与Numpy的ndarray类似。但深度学习框架又比Numpy的ndarray多了一些重要功能：首先，GPU很好地支持加速计算，而NumPy仅支持CPU计算；其次，张量类支持自动微分。
深度学习操作的主要对象是张量。它提供了基本数学运算、广播、索引、切片、内存节省和转换其他Python对象等功能。

== 机器学习

=== 监督学习
==== 概念
监督学习是机器学习的一种方法，可以由训练资料中学到或建立一个模式（函数/learning model），并依此模式推测新的实例。训练资料是由输入对象（通常是向量）和预期输出所组成。函数的输出可以是一个连续的值（称为回归分析），或是预测一个分类标签（称作分类）。

    回归(regression):
        主要用于预测数值型数据
        应用实例:
            股票价格波动的预测，房屋价格的预测等

    分类(classification):
        将实例数据划分到合适的类别中
        应用实例:
            判断网站是否被黑客入侵(二分类)，手写数字的自动识别(多分类)

==== 线性回归模型
===== 概念
回归(regression):
回归是能为一个或多个自变量与因变量之间关系建模的一类方法。在自然科学和社会科学领域，回归经常用来表示输入和输出之间的关系。
在机器学习领域中的大多数任务通常都与预测(prediction)有关。

线性回归(linear regression):
可以追溯到19世纪初，它在回归的各种标准工具中最简单而且最流行。
线性回归基于几个简单的假设：首先，假设自变量和因变量之间的关系是线性的，即可以表示为中元素的加权和，这里通常允许包含观测值的一些噪声；其次，假设任何噪声都比较正常，如噪声遵循正态分布。

线性模型

代价函数(cost function/lost function损失函数):
损失函数能够量化目标的实际值与预测值之间的差距。通常会选择非负数作为损失，且数值越小表示损失越小，完美预测时的损失为0。
回归问题中最常用的损失函数是平方误差函数。

训练数据集用于拟合(overfitting)模型参数，测试数据集用于评估拟合的模型。

==== 梯度下降
梯度下降(gradient descent):
梯度下降和梯度下降的变体不仅用于训练线性回归，还用于训练所有AI中一些最大和最复杂的模型。

学习率(learning rate)alpha

===== 参考
https://zh.d2l.ai/chapter_linear-networks/index.html

=== 无监督学习
==== 概念
无监督学习是机器学习的一种方法，没有给定事先标记过的训练示例，自动对输入的资料进行分类或分群。

无监督学习的主要运用包含：聚类分析（cluster analysis）、关系规则（association rule）、维度缩减（dimensionality reduce）。它是监督式学习和强化学习等策略之外的一种选择。

一个常见的无监督学习是数据聚类。在人工神经网络中，生成对抗网络（GAN）、自组织映射（SOM）和适应性共振理论（ART）则是最常用的非监督式学习。

== 强化学习
=== 概念
在强化学习问题中，智能体（agent）在一系列的时间步骤上与环境交互。在每个特定时间点，智能体从环境接收一些观察（observation），并且必须选择一个动作（action），然后通过某种机制（有时称为执行器）将其传输回环境，最后智能体从环境中获得奖励（reward）。此后新一轮循环开始，智能体接收后续观察，并选择后续操作，依此类推。

当环境可被完全观察到时，强化学习问题被称为马尔可夫决策过程（markov decision process）。当状态不依赖于之前的操作时，称该问题为上下文赌博机（contextual bandit problem）。当没有状态，只有一组最初未知回报的可用动作时，这个问题就是经典的多臂赌博机（multi-armed bandit problem）。

== 深度学习

== 计算机视觉

== 自然语言处理

== 工具
- Jupyter Notebook

== 框架/库
https://github.com/pytorch
https://github.com/apache/mxnet
https://github.com/tensorflow/tensorflow

参考: https://www.zhihu.com/question/46587833

== 参考
https://www.bilibili.com/video/BV1Bq421A74G/
https://www.bilibili.com/video/BV1Wv411h7kN/
https://zh.d2l.ai/
https://www.coursera.org/specializations/machine-learning-introduction#courses
https://cs231n.stanford.edu/
https://github.com/tangyudi/Ai-Learn
https://github.com/apachecn/ai-roadmap/