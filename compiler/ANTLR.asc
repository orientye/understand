= antlr
:hardbreaks-option:
:revnumber: 0.0.1
:author: orient
:toc:
:toclevels: 6
:homepage: http://orientye.com
<<<

== 概览
全名: ANother Tool for Language Recognition

- vs. flex-and-bison
https://tomassetti.me/why-you-should-not-use-flex-yacc-and-bison/
https://stackoverflow.com/questions/212900/advantages-of-antlr-versus-say-lex-yacc-bison

- 文档
https://github.com/antlr/antlr4/blob/master/doc/index.md
https://www.antlr.org/

== grammars-v4
https://github.com/antlr/grammars-v4/

The grammar is kept application independent and programming language neutral.

规则文件以.g4 结尾，词法规则和语法规则可以放在同一个文件里，也可以分成两个文件这样更清晰。

词法规则都是大写字母开头，而语法规则都是以小写字母开头的。

== Parse-Tree Listeners and Visitors
监听器和访问者机制将语法与应用程序代码分离开来，可以不在语法中嵌入操作(代码)的情况下构建语言应用程序。
这种解耦可以很好地封装应用程序，而不是将其分割并分散到语法中。
没有嵌入式动作，就可以在不同的应用中重复使用相同的语法，还能为同一语法生成不同编程语言的解析器。

org.antlr.v4.runtime.tree.ParseTreeListener
vistor: antlr4 -no-listener -visitor xyz.g4

listener vs. visitor:
The biggest difference between the listener and visitor mechanisms is that listener methods are called by the ANTLR-provided walker object, whereas visitor methods must walk their children with explicit visit calls.
Visitors work very well if we need application-specific return values because we get to use the built-in Java return value mechanism. If we prefer not having to explicitly invoke visitor methods to visit children, we can switch to the listener mechanism. Unfortunately, that means giving up the cleanliness of using Java method return values.
ANTLR generates listener event methods that return no values (void return types). To return values to listener methods executing on nodes higher in the parse tree, we can store partial results in a field of our listener. Eg. Simulating Return Values with a Stack

== Precedence, Left Recursion, and Associativity
=== 优先级
声明顺序

=== 结合性
<assoc=right>

=== 左递归
ANTLR v4’s major improvements is that it can now handle direct left recursion.
注意:
尽管ANTLR v4能处理直接左递归，但不能处理间接左递归，例如:

    expr : expo // indirectly invokes expr left recursively via expo
    | ...
    ;
    expo : expr '^'<assoc=right> exp

https://github.com/antlr/grammars-v4/issues/1827

- 左递归的消除

- 参考
https://github.com/antlr/antlr4/blob/master/doc/left-recursion.md

== Labeling Rule Alternatives for Precise Event Methods

    e : e MULT e # Mult
    | e ADD e # Add
    | INT # Int
    ;

    Now ANTLR generates a separate listener method for each alternative of e.
    Consequently, we don’t need the op token label anymore.
    For alternative label X, ANTLR generates enterX() and exitX().

    public interface LExprListener extends ParseTreeListener {
        void enterMult(LExprParser.MultContext ctx);
        void exitMult(LExprParser.MultContext ctx);
        void enterAdd(LExprParser.AddContext ctx);
        void exitAdd(LExprParser.AddContext ctx);
        void enterInt(LExprParser.IntContext ctx);
        void exitInt(LExprParser.IntContext ctx);
        ...
    }

    visitor同理，参考4.2 Building a Calculator Using a Visitor

== Sharing Information Among Event Methods
- Traversing Parse Trees with Visitors

- Simulating Return Values with a Stack

- Annotating Parse Trees

    e returns [int value]
        : e '*' e # Mult
        | e '+' e # Add
        | INT # Int
        ;

    ParseTreeProperty

== Error Reporting and Recovery
BaseErrorListener

java org.antlr.v4.runtime.misc.TestRig $grammar $startrule -diagnostics
PredictionMode.LL_EXACT_AMBIG_DETECTION

DefaultErrorStrategy

== Attributes and Actions
=== Actions
Grammars without actions are easier to read, aren’t tied to a particular target language, and aren’t tied to a specific application.

embedded actions can be useful for three reasons:
• Simplicity: Sometimes it’s easier just to stick in a few actions and avoid creating a tree listener or visitor.
• Efficiency: In resource-critical applications, we might not want to waste the time or memory needed to build a parse tree.
• Predicated parsing: In rare cases, we can’t parse properly without referencing data collected previously in the input stream. Some grammars need to build up a symbol table and then recognize future input differently, depending on whether an identifier is, say, a type or a method.

Actions are arbitrary chunks of code written in the target language (the language in which ANTLR generates code) enclosed in {...}.

Typically, actions operate on the attributes of tokens and rule references.

Labels refer to Token or ParserRuleContext objects derived from matching a token or invoking a rule. 例如下面的op=('*'|'/'):

    e returns [int v]
        : a=e op=('*'|'/') b=e {$v = eval($a.v, $op.type, $b.v);}
        | a=e op=('+'|'-') b=e {$v = eval($a.v, $op.type, $b.v);}
        | INT {$v = $INT.int;}
        | ID
        {
            String id = $ID.text;
            $v = memory.containsKey(id) ? memory.get(id) : 0;
        }
        | '(' e ')' {$v = $e.v;}
        ;

Actions Outside of Grammar Rules:
To specify a header action, we use @header {...} in our grammar. To inject fields
or methods into the generated code, we use @members {...}. In a combined
parser/lexer grammar, these named actions apply to both the parser and the
lexer. (ANTLR option -package lets us set the package without a header action.)
To restrict an action to the generated parser or lexer, we use @parser::name or
@lexer::name

=== Token Attributes

=== Parser Rule Attributes

== Altering the Parse with Semantic Predicates
semantic predicates:
special actions, {...}?, called semantic predicates that let us selectively deactivate portions of a grammar at runtime.

使用场景:
(1) handle multiple, slightly different versions (dialects) of the same language
(2) resolving grammar ambiguities

== Wielding Lexical Black Magic
=== Broadcasting Tokens on Different Channels
token channels

TokenStreamRewriter:
https://www.antlr.org/api/Java/org/antlr/v4/runtime/TokenStreamRewriter.html

BufferedTokenStream:
https://www.antlr.org/api/Java/org/antlr/v4/runtime/BufferedTokenStream.html
public List<Token> getHiddenTokensToRight​(int tokenIndex, int channel)

=== Context-Sensitive Lexical Problems

=== Islands in the Stream
lexical modes:
lexical modes that let lexers switch between contexts (modes).
Modes allow you to group lexical rules by context, such as inside and outside of XML tags.

== API
=== Package
- org.antlr.v4.runtime
https://www.antlr.org/api/Java/org/antlr/v4/runtime/package-summary.html

- org.antlr.v4.runtime.atn
This is used internally for ANTLR’s Adaptive LL(*) lexing and parsing strategy. The atn term means augmented transition network and is a state machine that can represent a grammar where edges represent grammar elements. ANTLR walks the ATN during lexing and parsing to make predictions based upon lookahead symbols.
https://www.antlr.org/api/Java/org/antlr/v4/runtime/atn/package-summary.html

- org.antlr.v4.runtime.dfa
Using the ATN to make predictions is expensive, so the runtime caches prediction results in deterministic finite automata (DFA).
https://www.antlr.org/api/Java/org/antlr/v4/runtime/dfa/package-summary.html

- org.antlr.v4.runtime.misc

- org.antlr.v4.runtime.tree
https://www.antlr.org/api/Java/org/antlr/v4/runtime/tree/package-summary.html
ParseTreeWalker: https://www.antlr.org/api/Java/org/antlr/v4/runtime/tree/ParseTreeWalker.html
AbstractParseTreeVisitor<T>: https://www.antlr.org/api/Java/org/antlr/v4/runtime/tree/AbstractParseTreeVisitor.html

- org.antlr.v4.runtime.tree.gui

参考: https://www.antlr.org/api/Java/index.html

=== Recognizers
[java, source]
----
public abstract class Lexer extends Recognizer<Integer, LexerATNSimulator> implements TokenSource
public abstract class Parser extends Recognizer<Token, ParserATNSimulator>

public abstract class Recognizer<Symbol, ATNInterpreter extends ATNSimulator>
public abstract class ATNSimulator

public interface TokenSource
----

Lexer: https://www.antlr.org/api/Java/org/antlr/v4/runtime/Lexer.html

=== Input Streams of Characters and Tokens
Lexers process characters (short integers), and parsers process token types (integers).
That is why the root of the ANTLR input stream class hierarchy is called IntStream.

    IntStream https://www.antlr.org/api/Java/org/antlr/v4/runtime/IntStream.html
        TokenStream
            BufferedTokenStream
                CommonTokenStream
            UnbufferedTokenStream
        CharStream
            ANTLRInputStream
                ANTLRFileStream
            UnbufferedCharStream

If your input is too big to buffer or is infinite (for example, via a socket), you can use UnbufferedCharStream and UnbufferedTokenStream.

=== Tokens and Token Factories

    Token
        WritableToken
            CommonToken

    TokenFactory
        CommonTokenFactory

=== Parse Trees

    Tree
        SyntaxTree
            ParseTree: https://www.antlr.org/api/Java/org/antlr/v4/runtime/tree/ParseTree.html
                RuleNode: https://www.antlr.org/api/Java/org/antlr/v4/runtime/tree/RuleNode.html
                    RuleContext
                        ParserRuleContext: https://www.antlr.org/api/Java/org/antlr/v4/runtime/ParserRuleContext.html
                TerminalNode: https://www.antlr.org/api/Java/org/antlr/v4/runtime/tree/TerminalNode.html
                    ErrorNode
                    TerminalNodeImpl
                        ErrorNodeImpl

RuleNode and TerminalNode correspond to subtree roots and leaf nodes.

=== Error Listeners and Strategies
Listeners let us alter error messages and where they go. Strategy implementations alter how parsers react to errors.

    ANTLRErrorListener
        BaseErrorListener
            ConsoleErrorListener
            DiagnosticErrorListener
        ProxyErrorListener

    ANTLRErrorStrategy
        DefaultErrorStrategy
            BailErrorStrategy

    java.lang.RuntimeException
        RecognitionException
            FailedPredicateException
            InputMismatchException
            LexerNoViableAltException
            NoViableAltException

=== Maximizing Parser Speed
先尝试SSL(a slightly weaker parsing strategy)

    parser.getInterpreter().setSLL(true); // try with simpler/faster SLL(*)
    parser.getInterpreter().setSLL(false); // try full LL(*)

=== Altering ANTLR’s Code Generation
ANTLR uses two things to generate code: a StringTemplate4 group file (containing templates) and a Target subclass called LanguageTarget where Language is the grammar language option.

== Removing Direct Left Recursion

== Grammar Reference
=== Grammar Lexicon
=== Grammar Structure
=== Parser Rules
=== Actions and Attributes

=== Lexer Rules
fragment:
https://stackoverflow.com/questions/6487593/what-does-fragment-mean-in-antlr

=== Wildcard Operator and Nongreedy Subrules
EBNF subrules like (...)?, (...)*, and (...)+ are greedy—they consume as much input as possible, but sometimes that’s not what’s needed.
We want that loop to be nongreedy, so we need to use different syntax:

    .*?

borrowed from regular expression notation.
We can make any subrule that has a ?, *, or + suffix nongreedy by adding another ? suffix.
parser与lexer都能使用，lexer使用更多。
例如:

    STRING : '"' .*? '"' ; // match anything in "..."

=== Semantic Predicates
{...}?

=== Options
=== ANTLR Tool Command-Line Options

=== snippets
- ^
stat: ID '=' expr NEWLINE -> ^('=' ID expr);
这条规则的含义是，对于ID '=' expr NEWLINE，ANTLR将生成一个AST，其中=作为根节点，ID和expr作为=的子节点。

== 源码
https://github.com/antlr/antlr4
https://pragprog.com/titles/tpantlr2/the-definitive-antlr-4-reference/

== 示例
https://github.com/antlr/grammars-v4
https://github.com/antlr/grammars-v4/tree/master/sql
https://github.com/mysql/mysql-workbench/tree/8.0/library/parsers/grammars

== 实战
=== lua2csharp
https://stackoverflow.com/questions/11955707/using-antlr-to-parse-lua-if-statements-in-specific-functions

== 工具
ANTLRWorks: https://www.antlr3.org/works/

== 命令与选项
antlr命令: java org.antlr.v4.Tool命令的别名
grun 命令: java org.antlr.v4.gui.TestRig命令的别名

指定包名:

    antlr.bat -package org.orient LuaLexer.g4 LuaParser.g4
    或者在g4文件里定义action:
    @header {
        package org.orient;
        import java.util.*;
    }

grun Hello r -tokens:

    [@1,6:10='parrt',<2>,1:6]:
        the token is the second token (indexed from 0),
        goes from character position 6 to 10 (inclusive starting from 0)
        has text parrt
        has token type 2 (ID)
        is on line 1 (from 1)
        is at character position 6 (starting from zero and counting tabs as a single character)
        注意，只有6这个postion是相对于行的，其它的数字都是相对于整个流的。

再例如，grun XML tokens -tokens t.xml:

    <tools>
    <tool name="ANTLR">A parser generator</tool>
    </tools>

    [@0,0:0='<',<1>,1:0]
    [@1,1:5='tools',<10>,1:1]
    [@2,6:6='>',<5>,1:6]
    [@3,7:8='\n\t',<4>,1:7]
    [@4,9:9='<',<1>,2:1]
    [@5,10:13='tool',<10>,2:2]
    [@6,15:18='name',<10>,2:7]
    [@7,19:19='=',<7>,2:11]
    [@8,20:26='"ANTLR"',<8>,2:12]
    [@9,27:27='>',<5>,2:19]
    [@10,28:45='A parser generator',<4>,2:20]
    [@11,46:46='<',<1>,2:38]
    [@12,47:51='/tool',<9>,2:39]
    [@13,52:52='>',<5>,2:44]
    [@14,53:53='\n',<4>,2:45]
    [@15,54:54='<',<1>,3:0]
    [@16,55:60='/tools',<9>,3:1]
    [@17,61:61='>',<5>,3:7]
    [@18,62:62='\n',<4>,3:8]
    [@19,63:62='<EOF>',<-1>,4:9

== 参考
《The Definitive ANTLR 4 Reference》
https://www.antlr.org/
http://staff.ustc.edu.cn/~yuzhang/compiler/2021f/lectures/05antlr.pdf