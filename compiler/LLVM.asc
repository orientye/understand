= LLVM
:hardbreaks-option:
:revnumber: 0.0.1
:author: orient
:toc:
:homepage: http://orientye.com

== 概览

=== 主要思想
LLVM: Low Level Virtual Machine，底层虚拟机

▪ LLVM IR is a Complete Code Representation
▪ LLVM is a Collection of Libraries
▪ LLVM Target Description Files

参考:
http://www.aosabook.org/en/llvm.html
https://llvm.org/pubs/2004-09-22-LCPCLLVMTutorial.html[The LLVM Compiler Framework and Infrastructure Tutorial]

=== vs. gcc
GCC也是三段式(前端frontend、优化器optimizer、后端backend)，实现了很多前端，支持了很多语言，但是没有给其它语言的开发者提供代码重用的接口。尽管gcc是开源的，但是其源代码重用的难度比较大。
LLVM则更组件化。

=== 尚未实现
例如，LLVM并不对语法做解析。因为有大量工具可用于完成这个工作，例如lex/yacc、flex/bison和ANTLR。解析必定会从编译中脱离出来，因此毫不奇怪LLVM并未试图去实现该功能。

LLVM也不直接解决大部分针对特定语言的软件文化。例如，如何安装编译器的二进制文件，如何在安装中管理软件包，如何升级工具链等，这都需要开发人员自己去做。

最后也是最重要的一点是，LLVM仍然尚未对部分通用语言成分给出原语。许多语言都具有某种垃圾回收的内存管理方式，或者是作为管理内存的主要方式，或者是作为对RAII(C++和Rust使用)等策略的附属方式。LLVM并没有提供垃圾收集机制，而是提供了一些实现垃圾回收的工具，支持将代码标记为一些可简化垃圾收集器编写的元数据。

参考: https://www.infoq.cn/article/what-is-llvm-the-power-behind-swift-rust-clang-and-more

== Tutorial
=== My First Language Frontend with LLVM Tutorial
https://llvm.org/docs/tutorial/MyFirstLanguageFrontend/index.html

https://llvm.org/docs/tutorial/MyFirstLanguageFrontend/LangImpl02.html[Chapter #2: Implementing a Parser and AST]
The parser we will build uses a combination of Recursive Descent Parsing and Operator-Precedence Parsing to parse the Kaleidoscope language (the latter for binary expressions and the former for everything else).

binary-expression-parsing:
https://llvm.org/docs/tutorial/MyFirstLanguageFrontend/LangImpl02.html#binary-expression-parsing
优先级(Priority)和结合性(Associativity)
参考:
https://time.geekbang.org/column/article/120388

=== Building a JIT in LLVM
https://llvm.org/docs/tutorial/#building-a-jit-in-llvm

参考:
https://stackoverflow.com/questions/6833068/why-is-llvm-considered-unsuitable-for-implementing-a-jit

=== External Tutorials
https://llvm.org/docs/tutorial/#external-tutorials

=== Advanced Topics
https://llvm.org/docs/tutorial/#advanced-topics

== Pass
https://llvm.org/docs/WritingAnLLVMPass.html
https://llvm.org/docs/Passes.html
Writing an LLVM Pass: https://llvm.org/devmtg/2019-10/talk-abstracts.html#tut4

== Code Generation
https://llvm.org/docs/UserGuides.html#code-generation

== Optimization
https://llvm.org/docs/UserGuides.html#optimizations
https://llvm.org/docs/Frontend/PerformanceTips.html

== Architecture & Platform Information
https://llvm.org/docs/CompilerWriterInfo.html

== 参考
https://llvm.org/
https://llvm.org/docs/
https://llvm.org/docs/tutorial/
https://llvm.org/docs/Reference.html
https://nondot.org/sabre/
https://llvm.org/devmtg/
