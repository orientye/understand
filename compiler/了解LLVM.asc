= 了解LLVM
:hardbreaks-option:
:revnumber: 0.0.1
:author: orient
:toc:
:homepage: http://orientye.com

== 概览

=== 主要思想
▪ LLVM IR is a Complete Code Representation
▪ LLVM is a Collection of Libraries
▪ LLVM Target Description Files
参考: http://www.aosabook.org/en/llvm.html

=== 尚未实现
例如，LLVM并不对语法做解析。因为有大量工具可用于完成这个工作，例如lex/yacc、flex/bison和ANTLR。解析必定会从编译中脱离出来，因此毫不奇怪LLVM并未试图去实现该功能。

LLVM也不直接解决大部分针对特定语言的软件文化。例如，如何安装编译器的二进制文件，如何在安装中管理软件包，如何升级工具链等，这都需要开发人员自己去做。

最后也是最重要的一点是，LLVM仍然尚未对部分通用语言成分给出原语。许多语言都具有某种垃圾回收的内存管理方式，或者是作为管理内存的主要方式，或者是作为对RAII(C++和Rust使用)等策略的附属方式。LLVM并没有提供垃圾收集机制，而是提供了一些实现垃圾回收的工具，支持将代码标记为一些可简化垃圾收集器编写的元数据。

参考: https://www.infoq.cn/article/what-is-llvm-the-power-behind-swift-rust-clang-and-more

== project
=== My First Language Frontend with LLVM Tutorial
https://llvm.org/docs/tutorial/MyFirstLanguageFrontend/index.html
中文: https://github.com/Hanseltu/kaleidoscope-tutorial

== 参考
https://llvm.org/
https://llvm.org/docs/