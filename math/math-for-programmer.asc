= 程序员数学
:hardbreaks-option:
:revnumber: 0.0.1
:author: orient
:toc:
:toclevels: 5
:sectnums:
:sectnumlevels: 5
:stem: latexmath
:homepage: http://orientye.com

<<<

== 概念
=== 数学研究的对象(丘成桐)
- 数字
数论、整数数论、解析数论、代数数论等

- 几何形象
平面几何、射影几何、微分几何、代数几何等

- 函数
研究数与数之间的关系，几何形象与几何形象之间的关系等

- 概率

=== 数学史
==== 法国数学
https://www.zhihu.com/question/31918891

==== 欧拉
https://zhuanlan.zhihu.com/p/148603379

==== 高斯
https://www.zhihu.com/question/35107219

==== 顶级数学家
https://www.zhihu.com/question/340827879

== 位运算

=== 与运算&
判断是否为2次幂

    NO: if (n & (n - 1))

2次幂的性质: % -> &

    ringbuffer(如kfifo): in % size 可以转化为 in & (size – 1), 其中size为2次幂

=== 异或运算^
x ^ x = 0
x ^ 0 = x

== unsigned

=== kfifo
自动溢出结果依然正确:
数据长度: in - out
空闲长度: size - in + out
缓冲区空: in == out
缓冲区满: size == (in - out)

=== bsearch/bsort/pivot
http://orientye.com/go-sort/

== 浮点数与定点数
https://langdev.stackexchange.com/questions/665/what-are-the-pros-and-cons-of-fixed-point-arithmetics-vs-floating-point-arithmet

== 随机数
=== Fisher–Yates shuffle
Fisher-Yates shuffle(也称Knuth shuffle)是一种用于生成随机排列的高效算法，能够均匀地打乱一个有限序列(如数组)。其核心思想是从原始序列中随机抽取元素，依次放到新序列(或交换到原序列的末尾)，确保每个排列出现的概率相等。

[source, python]
----
import random

def fisher_yates_shuffle(arr):
    n = len(arr)
    for i in range(n-1, 0, -1):  # 从后往前遍历
        j = random.randint(0, i)  # 随机选择0到i的索引
        arr[i], arr[j] = arr[j], arr[i]  # 交换
    return arr
----

java collections-shuffle:
https://stackoverflow.com/questions/2249520/javas-collections-shuffle-is-doing-what


均匀性：每个排列的概率均为 1/n!，保证公平性。
时间复杂度：O(n)，优于暴力法(生成所有排列再随机选)。
空间复杂度：O(1)(原地交换)。

应用场景:
洗牌(扑克牌游戏)。
随机化实验顺序。
机器学习中的数据打乱(如 mini-batch)。

== 参考
《高观点下的初等数学》

- 数学简史
《数学历史的启示》龚昇
《数学简史》莫里斯·克莱因

- 《The-Princeton-Companion-to-Mathematics》中文:《普林斯顿数学指南》
- 《Algebra, Topology, Differential Calculus, and Optimization Theory For Computer Science and Machine Learning》
- 法兰西数学精品译丛

- https://oi-wiki.org/math/
- https://www.zhihu.com/question/266030969/answer/49307951365
