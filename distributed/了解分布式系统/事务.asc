:toc:
:toclevels: 4
:hardbreaks-option:

== 事务

=== 概念
▪ 什么是事务
https://en.wikipedia.org/wiki/Database_transaction

▪ 本地事务
    
    例如传统数据库事务, ACID
    
▪ 分布式事务

    典型的分布式事务场景:
        微服务架构如跨JVM进程
        单体系统访问多个数据库实例, 即跨数据库实例
        多个服务访问同一个数据库实例

=== X/Open XA协议
- link:./一致性.asc#2pc[2PC与XA]

=== TCC(Try-Confirm-Cancel)模型
▪ Try阶段

    完成所有业务检查（一致性）
    预留必须业务资源（准隔离性）
▪ Confirm阶段

    真正执行业务，不作任何业务检查
    只使用Try阶段预留的业务资源
    Confirm操作要求具备幂等设计
    Confirm失败后需要进行重试

▪ Cancel阶段

    取消执行，释放Try阶段预留的业务资源
    Cancel阶段的异常和Confirm阶段异常处理方案基本上一致，要求满足幂等设计

TCC框架:
https://github.com/seata/seata
https://github.com/changmingxie/tcc-transaction
https://github.com/liuyangming/ByteTCC
https://github.com/dromara/hmily

=== SAGA

=== 可靠消息最终一致性
==== 本地事件表

==== MQ事务消息

==== MQ非事务消息

=== 最大努力通知
▪ 消息重复通知机制:
因为接收通知方可能没有收到通知

▪ 消息校对机制:
如果尽最大努力也没有通知到接收方, 或者接收方消费消息后要再次消费, 此时可由接收方主动向通知方查询消息信息来满足需求。

▪ 示例: 充值系统1s, 2s, 4s, 16s...发起通知

▪ 最大努力通知 vs. 可靠消息最终一致性
1) 思想不同
可靠消息最终一致性, 发起通知放需要保证将事务发出去, 并且将消息发送到接受方, 消息的可靠性关键由发起通知放来保证
最大努力通知, 发送通知方尽最大努力将处理结果通知给接收方, 但是可能消息接收不到, 此时需要接受通知方主动调用发起通知方的接口查询业务处理结果，通知的可靠性关键在接受通知方
2) 应用场景不同
可靠消息最终一致性关注的是交易过程中的事务一致, 以异步的方式完成交易
最大努力通知关注的是交易后的通知事务, 即将交易结果可靠的通知出去
3) 技术解决方向不同
可靠消息最终一致性要解决消息从发出到接受的一致性, 即消息发出并且被接收到。
最大努力通知无法保证消息从出发到接受的一致性, 只提供消息接受的可靠性机制。可靠机制是, 最大努力的将消息通知给接受方, 当消息无法被接收方接受时, 由接收方主动查询消息(业务处理结果)。

参考: https://www.infoq.cn/article/solution-of-distributed-system-transaction-consistency
参考: http://seata.io/zh-cn/docs/overview/what-is-seata.html
参考: http://yun.itheima.com/course/572.html?1910zzpts