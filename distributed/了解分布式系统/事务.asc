:toc:
:toclevels: 4
:hardbreaks-option:

== 事务

=== 概念
▪ 什么是事务
https://en.wikipedia.org/wiki/Database_transaction

▪ 本地事务
    
    例如传统数据库事务, ACID
    
▪ 分布式事务

    典型的分布式事务场景:
        微服务架构如跨JVM进程
        单体系统访问多个数据库实例, 即跨数据库实例
        多个服务访问同一个数据库实例

=== X/Open XA协议
- link:./一致性.asc#2pc[2PC与XA]

=== TCC(Try-Confirm-Cancel)模型
▪ Try阶段

    完成所有业务检查（一致性）
    预留必须业务资源（准隔离性）
▪ Confirm阶段

    真正执行业务，不作任何业务检查
    只使用Try阶段预留的业务资源
    Confirm操作要求具备幂等设计
    Confirm失败后需要进行重试

▪ Cancel阶段

    取消执行，释放Try阶段预留的业务资源
    Cancel阶段的异常和Confirm阶段异常处理方案基本上一致，要求满足幂等设计

TCC框架:
https://github.com/seata/seata
https://github.com/changmingxie/tcc-transaction
https://github.com/liuyangming/ByteTCC
https://github.com/dromara/hmily

=== SAGA

=== 本地事件表

=== MQ非事务消息

=== MQ事务消息

=== 最大努力通知

参考: https://www.infoq.cn/article/solution-of-distributed-system-transaction-consistency
参考: http://seata.io/zh-cn/docs/overview/what-is-seata.html