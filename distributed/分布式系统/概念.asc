:toc:
:toclevels: 5
:hardbreaks-option:

== 概念

=== 集中式与分布式
- 集中式系统特点

    结构简单
    硬件成本(例如IOE)
    单点

- 分布式系统难点

    ▪ 时钟与事件顺序
    ▪ failure&timeout(三态: 成功/失败/超时)

    硬件故障(Hardware Faults)，软件错误(Software Errors)，人为错误(Human Errors)

    常见异常类型: 服务器宕机 网络异常 磁盘故障

    硬盘的平均无故障时间(MTTF: mean time to failure)约为10到50年。
    因此从数学期望上讲，在拥有10000个磁盘的存储集群上，平均每天会有1个磁盘出故障。

- 集群与分布式的区别

    集群: 同一个业务，部署在多个服务器上
    分布式: 一个业务分拆多个子业务，部署在不同的服务器上

=== CAP
- 一致性(Consistency)

    每次读取要么获得最近写入的数据，要么获得一个错误。

- 可用性(Availability)

    每次请求都能获得一个(非错误)响应，但不保证返回的是最新写入的数据。

- 分区容忍(Partition tolerance)

    尽管任意数量的消息被节点间的网络丢失(或延迟)，系统仍继续运行。

=== BASE
- 基本可用(Basically Available)

    系统出现了不可预知的故障，但还是能用，相比较正常的系统:
    存在响应时间上的损失:
        例如，正常情况下的搜索引擎0.5秒即返回给用户结果，而基本可用的搜索引擎可以在2秒作用返回结果。
    存在功能上的损失:
        例如正常情况下电商网站上用户可以顺利完成每一笔订单，而大促期间为了购物系统的稳定性，部分消费者可能会被引导到降级页面。

- 软状态(Soft State)

    硬状态: 要求多个节点的数据副本都是一致的
    软状态: 允许系统中的数据存在中间状态，该状态不影响整体可用性，即允许多个不同节点的数据副本存在数据延时

- 最终一致性(Eventual Consistency)

    整个系统不可能一直是软状态，必须有个时间期限。
    在期限过后，应当保证所有副本保持数据一致性，从而达到数据的最终一致性。
    这个时间期限取决于网络延时、系统负载、数据复制方案设计等因素。

=== 分布方式
- 哈希

- 范围

- 数据量

- 一致性哈希
    一致性哈希解决的问题: 哈希算法在面对节点数量变化时，最坏情况下所有数据都需要迁移
    在一致哈希算法中，增加或者移除一个节点，仅仅影响该节点在哈希环上顺时针相邻的后继节点
    一致性哈希算法并不保证节点能够在哈希环上分布均匀，解决方案是引入虚拟节点
    虚拟节点除了会提高节点的均衡度，还会提高系统的稳定性: 当节点变化时，会有不同的节点共同分担系统的变化
    https://docs.datastax.com/en/cassandra-oss/3.0/cassandra/architecture/archDataDistributeHashing.html
    https://docs.datastax.com/en/cassandra-oss/3.0/cassandra/architecture/archDataDistributeDistribute.html
    hash slot vs. consistent hashing
    https://stackoverflow.com/questions/50246763/does-redis-cluster-use-consistent-hashing

- 设计要点

    ▪ 分布均匀
        200G数据，5个节点，理想情况是每个节点存储40G数据左右
        2000个请求，5个节点，理想情况是每个节点处理400个请求左右

    ▪ 数据稳定
        当添加或移除节点时，不要出现大范围的数据迁移

    ▪ 节点异构性
        硬件配置
        地理属性

    ▪ 性能
        例如范围查询？

=== 负载均衡

==== 各层负载均衡
- 二层负载均衡

    如LVS DR模式

- 三层负载均衡

    如LVS TUN模式

- 四层负载均衡

    如LVS NAT模式

- 七层负载均衡

    如ngnix，HAProxy

==== 算法
- round-robin
- 加权/weight round-robin
- random
- 加权/weight random
- 通用hash
- 一致性/consistent hash
- least connection
- least time 最小平均响应时间(nginx商业版)
- locality aware
- 带状态的负载均衡(sticky connection)

=== shared architecture
- shared disk
https://en.wikipedia.org/wiki/Shared-disk_architecture
例如oracle RAC

- shared nothing
https://en.wikipedia.org/wiki/Shared-nothing_architecture
例如mysql cluster

=== 存储与计算分离
优点: 按需/弹性
缺点: 计算层与存储层的通信开销与异常处理、读写一致性等挑战
反之，则是存储与计算的融合