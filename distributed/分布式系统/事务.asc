:toc:
:toclevels: 5
:hardbreaks-option:

== 事务

=== 概念
▪ 什么是事务
https://en.wikipedia.org/wiki/Database_transaction

▪ 本地事务

    例如传统数据库事务ACID

▪ 分布式事务

    典型的分布式事务场景:
        微服务架构如跨JVM进程
        单体系统访问多个数据库实例，即跨数据库实例
        多个服务访问同一个数据库实例

▪ 刚性事务

    完全遵循ACID规范，即数据库事务正确执行的四个基本要素:
        原子性(Atomicity)、一致性(Consistency)、隔离性(Isolation)、持久性(Durability)
    例如单数据库

▪ 柔性事务

    为了满足可用性、性能与降级服务的需要，降低一致性(Consistency)与隔离性(Isolation)的要求，遵循BASE理论:
        基本业务可用性(Basic Availability)、柔性状态(Soft state)、最终一致性(Eventual consistency)
    柔性事务也部分遵循ACID规范:
        原子性: 严格遵循
        一致性: 事务完成后的一致性严格遵循；事务中的一致性可适当放宽
        隔离性: 并行事务间不可影响；事务中间结果可见性允许安全放宽
        持久性: 严格遵循
    例如分布式事务

=== X/Open XA协议
- link:./一致性.asc#2pc[2PC与XA]

=== TCC(Try-Confirm-Cancel)模型
▪ Try阶段

    完成所有业务检查(一致性)
    预留必须业务资源(准隔离性)

▪ Confirm阶段

    真正执行业务，不作任何业务检查
    只使用Try阶段预留的业务资源
    Confirm操作要求具备幂等设计
    Confirm失败后需要进行重试

▪ Cancel阶段

    取消执行，释放Try阶段预留的业务资源
    Cancel阶段的异常和Confirm阶段异常处理方案基本上一致，要求满足幂等设计

TCC(Try-Confirm-Cancel)实际上是服务化的两阶段提交协议，业务开发者需要实现这三个服务接口，第一阶段服务由业务代码编排来调用Try接口进行资源预留，所有参与者的Try接口都成功了，事务管理器会提交事务，并调用每个参与者的Confirm接口真正提交业务操作，否则调用每个参与者的Cancel接口回滚事务。

TCC框架:
https://github.com/seata/seata
https://seata.io/zh-cn/
http://seata.io/zh-cn/docs/overview/what-is-seata.html
https://github.com/changmingxie/tcc-transaction
https://github.com/liuyangming/ByteTCC
https://github.com/dromara/hmily

=== SAGA
Saga是一种补偿协议，在Saga模式下，分布式事务内有多个参与者，每一个参与者都是一个冲正补偿服务，需要用户根据业务场景实现其正向操作和逆向回滚操作。

分布式事务执行过程中，依次执行各参与者的正向操作，如果所有正向操作均执行成功，那么分布式事务提交。如果任何一个正向操作执行失败，那么分布式事务会退回去执行前面各参与者的逆向回滚操作，回滚已提交的参与者，使分布式事务回到初始状态。

Saga理论出自Hector&Kenneth 1987发表的论文Sagas。

Saga正向服务与补偿服务也需要业务开发者实现。

https://www.sofastack.tech/blog/sofa-meetup-3-seata-retrospect/
https://juejin.cn/post/6857520180894351374#heading-19

=== 可靠消息最终一致性
==== 本地事件表

http://icyfenix.cn/architect-perspective/general-architecture/transaction/distributed.html
https://houbb.github.io/2018/09/02/sql-distribute-transaction-mq

==== MQ事务消息

==== MQ非事务消息

=== 最大努力通知
▪ 消息重复通知机制:
因为接收通知方可能没有收到通知

▪ 消息校对机制:
如果尽最大努力也没有通知到接收方, 或者接收方消费消息后要再次消费, 此时可由接收方主动向通知方查询消息信息来满足需求。

▪ 示例: 充值系统1s, 2s, 4s, 16s...发起通知

▪ 最大努力通知 vs. 可靠消息最终一致性
1) 思想不同
可靠消息最终一致性, 发起通知放需要保证将事务发出去, 并且将消息发送到接受方, 消息的可靠性关键由发起通知放来保证
最大努力通知, 发送通知方尽最大努力将处理结果通知给接收方, 但是可能消息接收不到, 此时需要接受通知方主动调用发起通知方的接口查询业务处理结果，通知的可靠性关键在接受通知方
2) 应用场景不同
可靠消息最终一致性关注的是交易过程中的事务一致, 以异步的方式完成交易
最大努力通知关注的是交易后的通知事务, 即将交易结果可靠的通知出去
3) 技术解决方向不同
可靠消息最终一致性要解决消息从发出到接受的一致性, 即消息发出并且被接收到。
最大努力通知无法保证消息从出发到接受的一致性, 只提供消息接受的可靠性机制。可靠机制是, 最大努力的将消息通知给接受方, 当消息无法被接收方接受时, 由接收方主动查询消息(业务处理结果)。

=== 参考
https://www.infoq.cn/article/solution-of-distributed-system-transaction-consistency