= 了解ID及分布式ID
:revnumber: 0.0.1
:author: orient
:toc:
:homepage: http://orientye.com

<<<

== 设计指标
- 唯一性
- 单调有序/趋势有序
- 自身是否附带信息
- 性能
- 扩展性
- 安全性

== Mysql ID
- 优点: 简单
- 缺点: 强依赖DB; 水平扩展困难

== MongoDB ID
- 优点: 客户端生成; 类似SnowFlake
- 缺点: 12字节; 无序
- https://docs.mongodb.com/manual/reference/method/ObjectId/
- Q: 如何实现递增整形ID？
    
    https://docs.mongodb.com/manual/reference/operator/update/inc/
    https://stackoverflow.com/questions/21218651/mongodb-auto-increment-id

== UUID/GUID
- 550e8400-e29b-41d4-a716-446655440000
- 优点

    性能非常高, 本地生成

- 缺点

    无法保证趋势递增
    不安全，基于MAC地址生成UUID的算法可能会造成MAC地址泄露
    UUID字符串表示占用空间较大, 作为主键索引查询效率低

== SnowFlake
- 优点:

    毫秒数在高位, 自增序列在低位, 整个ID趋势递增
    不依赖数据库等第三方系统, 以服务的方式部署, 稳定性和性能均较好
    可以根据自身业务特性分配bit位, 非常灵活

- 缺点:

    强依赖机器时钟, 如果机器上时钟回拨, 会导致ID重复等问题
    https://zhuanlan.zhihu.com/p/59289093

    (如何解决？可以参考美团 Leaf)
    美团Leaf: https://tech.meituan.com/2017/04/21/mt-leaf.html

== blockchain中的ID
- hash256:13f86351213270f199ead22863cb6f870564dee4cbd31e24e5ea0b6cb9830ff5
- 优点: 简单
- 缺点: 不满足有序性
- 一种扩展的 blockchain的ID:

    利用区块链的历史区块交易的唯一性，有序性，产生ID
    优点: 有序
    缺点: 可能发生回滚