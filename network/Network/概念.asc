:toc:
:toclevels: 5
:hardbreaks-option:

== 概念

=== IP地址
- 分类

    A                  0.0.0.0 - 127.255.255.255
    B                128.0.0.0 - 191.255.255.255
    C                192.0.0.0 - 223.255.255.255
    D (multicast)    224.0.0.0 - 239.255.255.255
    E (reserved)     240.0.0.0 - 255.255.255.255

- 私有网段，有A、B、C三个地址段

    A  10.0.0.0/8:          10.0.0.0 - 10.255.255.255
    B  172.16.0.0/12:       172.16.0.0 - 172.31.255.255
    C  192.168.0.0/16:      192.168.0.0 - 192.168.255.255

- 子网寻址/子网掩码

    IPv6地址/n(0 <= n <= 128)表示前n位组成子网前缀

- loopback addr

    127.0.0.1
    ipv6  0000:0000:0000:0000:0000:0000:0000:0001(::1)

    Q: ping 127.0.0.1与ping 本机IP区别？
    Q: ping 127.0.0.1与ping 跨机IP区别？
    Q: 断网了还能ping通127.0.0.1吗？
    A: 能，断网不影响本地回环。
    Q: 127.0.0.1网络IO需要经过网卡吗？
    A: 不需要经过网卡。即使把网卡拔了本机网络还可以正常使用的。
    Q: 数据包在内核中是什么走向，和外网发送相比流程上有什么区别？
    A: 本机网络IO和跨机IO比较起来节约了一些开销。
    例如发送数据不需要进RingBuffer的驱动队列，直接把skb传给接收协议栈(经过软中断)。
    但是内核其它路径一点都没少: 系统调用、协议栈(传输层、网络层等)、网络设备子系统、邻居子系统整个走了一个遍。
    驱动程序也走了(虚拟的回环设备lo)。
    因此即使是本机网络IO，也是有一定开销的。
    A: 使用127.0.0.1能比本机IP例如192.168.x更快吗？
    Q: 没有区别: 内核知道本机上所有的IP，只要发现目的地址是本机IP就可以全走loopback回环设备了。

- 任意地址

    0.0.0.0(IPv4)
    ::(IPv6)
    According to RFC 5735
    0.0.0.0/8 - Addresses in this block refer to source hosts on "this" network. 
    Address 0.0.0.0/32 may be used as a source address for this host on this network; 
    other addresses within 0.0.0.0/8 may be used to refer to specified hosts on this network.

- 保留地址

    https://en.wikipedia.org/wiki/Reserved_IP_addresses

=== 连接
- (Src IP, Src Port, Dst IP, Dst Port)
- {<protocol>, <src addr>, <src port>, <dest addr>, <dest port>}

- TCP和UDP采用16 bit的端口号来识别应用程序

    Q: Ping调用的ICMP协议没有端口号, 同一内网的两台机器同时ping同一个外网ip, 那么如何区分的

- NAT: Network address translation

    https://en.wikipedia.org/wiki/Network_address_translation
    Q: 很多云主机上为什么ifconfig看不到外网地址？如何获取自身的外网地址呢？
    Q: 在内网环境的VMWare虚拟机(NAT模式), 如何充当(内网)服务器呢？

- IPv6

    vs.ipv4:  https://www.ibm.com/docs/zh/i/7.5?topic=6-comparison-ipv4-ipv6

- 网络字节序

    大端字节序(big endian)
    查看机器字节序: lscpu | grep 'Byte Order'

=== 分层
- TCP/IP分层模型

    应用层  Telnet, HTTP
    传输层  TCP, UDP
    网络层  IP, ICMP, IGMP
    链路层  设备驱动程序及接口卡 也叫网络接口层
    https://en.wikipedia.org/wiki/Internet_protocol_suite#Layering_evolution_and_representations_in_the_literature

- OSI分层模型

    应用层
    表示层
    会话层
    传输层
    网络层
    数据链路层
    物理层

    一般用L+数字n表示OSI模型的第n层, 如L2指数据链路层, L3指网络层

- 链路层/二层帧(Frame)
- 网络层/三层包(Packet)
- 传输层/四层段(Segment)
- 应用层/最上层(Message)

- 各层术语

    -----------------------------------------------------------------------------
    MTU:  Maximum Transfer Unit 链路层的帧中数据部分最大字节数，以太网一般1500字节
    -----------------------------------------------------------------------------
    TTL:  Time To Live
    -----------------------------------------------------------------------------
    MSL:  Maximum Segment Lifetime
        RFC 793(原始 TCP 规范)建议 MSL 为 120 秒。
        MSL默认值: linux 60秒  windows 120秒 一些unix系统可能是30秒/15秒。
    MSS:  Maximum Segment Size 一般MSS=1500-20-20字节
    RTT:  Round-Trip Time
        RTT是指数据包从发送端发出到接收端确认(ACK)返回的总时间(单位:毫秒)，即:
        RTT = 发送时间 + 传播时间 + 接收处理时间 + ACK返回时间
        通常用于流控与拥塞
    RTO:  Retransmission Timeout 
    -----------------------------------------------------------------------------

=== Q&A
Q: 浏览器里输入: www.taobao.com 然后返回了结果, 这个过程中发生了什么?

Q: 为什么需要ip分片？
IP分片是由于不同网络具有不同的最大传输单元(MTU)导致的。
当IP层要发送的数据报长度超过底层物理网络的MTU时，就需要将数据报分片，以便适应不同的网络环境，确保数据能够顺利传输。

Q: 为什么ip分片，还需要tcp分段?
如果在只有IP分片，那么如果一个IP分片丢失，整个IP报文的所有分片都得重传，因为IP层本身没有超时重传机制。显然，这么做效率会很低。
因此，TCP会进行分段传输: TCP在建立连接的时候通常会协商双方的MSS值，当TCP层发现数据超过MSS时，则会进行分段; 如果一个TCP分段丢失，就会以MSS为单位进行重传，而不用重传所有的分片。
注意: UDP协议本身不进行分段，当UDP数据报的长度超过网络的最大传输单元(MTU)时，会由IP层进行分片。

Q: IPv6分片与IPv4分片有何不同?
IPv4:
分片是尽力而为的中间网络行为，可能导致效率低下(如分片重组开销、攻击风险)。
IPv6:
简化路由器处理: 禁止中间设备分片，提升转发效率。
增强端到端控制: 源主机负责分片，确保更可靠的传输。
安全性优化: 减少分片攻击面(如重叠分片攻击)

Q: 在转发过程中，IP地址与MAC地址会变吗?
转发的过程中，源IP地址和目标IP地址是不会变的(前提是没有使用NAT网络)，源MAC地址和目标MAC地址是会变化的。
在发送数据包时，如果目标主机不是本地局域网，填入的MAC地址是路由器地址，并将数据包转发给路由器，路由器一直转发到目标主机的路由器，当发现IP地址是局域网内的主机后就会arp请求获取目标主机的MAC地址，从而转发到目的主机。
