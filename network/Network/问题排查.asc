:toc:
:toclevels: 5
:hardbreaks-option:

== 问题排查

=== 命令与工具
==== 尽量使用新的命令

    尽量用iproute2工具集, 而不是net-tools(比较古老):
        用ip addr; ip link替换ifconfig
        用ip route替换route; netstat -r
        用ss替换netstat
        用nstat替换netstat -s

    解读:
    netstat比ss开销大: netstat通过读取/proc/net/下面的文件来解析网络连接信息; 而ss使用的是netlink方式，效率会高很多。

==== dstat

    可以查看整体情况
    dstat -tcp

==== sar

    sar -n DEV, EDEV, FC, ICMP, EICMP, ICMP6, EICMP6, IP, EIP, IP6, EIP6, NFS, NFSD, SOCK, SOCK6, SOFT, TCP, ETCP, UDP and UDP6

==== ping

==== hping3

    向网络主机发送(几乎)任意TCP/IP数据包并显示目标回复

==== traceroute

    Traceroute 的实现一共有三种方法, 分别是:
        TCP traceroute(使用tracetcp程序可以实现)
        UDP traceroute(Linux默认情况下使用)
        ICMP traceroute(MS Windows默认情况下使用)

==== mtr

==== ifconfig
现代 Linux 系统逐渐淘汰 ifconfig，优先使用 ip

==== netstat

==== nstat
nstat用于查看内核的网络统计信息（/proc/net/netstat 和 /proc/net/snmp）。
它比传统的 netstat 更轻量级，适合监控网络协议栈的详细数据，尤其在排查网络性能问题时非常有用。

    nstat -z | grep -i drop
    watch -n 1 "nstat -z | grep -i retrans" #持续监控TCP重传(排查丢包)

==== ip

==== ss

    ss -natp #可以查看每个tcp的连接状态
    ss -ltn  #监听端口
    ss -tn   #已连接端口
    ss -i

===== Recv-Q Send-Q
- 1. 对于 LISTEN 状态的套接字（服务端监听端口）
    ** Recv-Q
        表示当前已完成三次握手但尚未被应用程序调用 accept() 取走的连接数（即等待处理的已建立连接队列长度）。
        若该值持续增长，可能表明应用程序处理能力不足。
    ** Send-Q
        表示监听端口的最大连接队列长度（即 backlog 参数限制，可通过 somaxconn 系统调优）。
        例如，Send-Q 显示 128 表示最多允许 128 个连接在队列中等待 accept()。
- 2. 对于非 LISTEN 状态的套接字（已建立连接）
    ** Recv-Q
        表示内核已接收但应用程序尚未读取的数据量（字节）。
        若该值持续较大，可能表明应用程序读取速度过慢或存在阻塞。
    ** Send-Q
        表示内核已发送但未收到对方 ACK 确认的数据量（字节）。
        若该值持续较大，可能表明网络延迟高、丢包或对端接收缓慢。

==== iptables/firewalld

==== sysctl

==== ethtool

    ethtool -S 可以查看网卡统计信息(例如接收和发送的数据包总数，接收和发送的流量，丢弃的包数量，错误的数据包数量等)
    例如ethtool -S ens33

==== cat /proc/net/dev

    更高一层的网卡统计
    里显示的统计只是sysfs里的一个子集，适合作为一个常规的统计参考

==== tcpdump/wireshark/tshark
Q: tcpdump能否抓到被iptable封禁的包？
A: tcpdump工作在设备层，在ip层以前就能处理。netfilter工作在ip, arp等层，是在tcpdump后面工作的，因此iptable封禁规则不会影响到tcpdump。

==== charles/fiddler

==== tcpreplay/ipdecap/scapy

==== dropwatch

==== perf/iperf3

==== systemtap

==== TCP Tracepoints

    轻量级, linux内核4.16及以上

    当系统中的网络连接数较多时，tcpdump抓包会对系统性能会产生较明显的影响;
    TCP Tracepoints则是比较轻量级的分析方案。

==== tc

    show/manipulate traffic control settings

    模拟网络异常
        普通网络延迟: tc qdisc add dev eth0 root netem delay 100ms
        抖动延迟:
            可模拟较真实的差网络条件，延迟的同时伴随丢包
            该命令将eth0网卡的传输设置为100ms, 同时大约有30%的包会延迟±10ms发送
            tc qdisc add dev eth0 root netem delay 100ms 10ms 30%
        丢包1%:
            tc qdisc add dev eth0 root netem loss 1%
        重复包:
            tc qdisc add dev eth0 root netem duplicate 1%

    模拟数据包乱序:
        该命令将eth0网卡的传输设置为:有25%的数据包(50%相关)会被立即发送, 其他的延迟10毫秒
        tc qdisc change dev eth0 root netem delay 10ms reorder 25% 50%

    查看已经配置的网络条件:
        tc qdisc show dev eth0

    删除已经配置的网络条件:
        将以上命令中的add改为del

==== nc(netcat)
https://zh.wikipedia.org/zh-cn/Netcat

==== Nmap
用于网络发现和安全审计的网络安全
https://zh.wikipedia.org/zh-cn/Nmap

=== 丢包
==== 网卡
RingBuffer溢出丢包
网卡端口协商丢包
网卡流控丢包
报文mac地址丢包
其它网卡异常
    网卡firmware版本bug
    网卡插线网口规格等
    报文长度丢包

==== 驱动
网络接口丢包
netdev_max_backlog溢出丢包
单核负载高丢包

==== 协议栈
neighbor系统丢包
ip层丢包
tcp层丢包
udp层丢包
socket配置
