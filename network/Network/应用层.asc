:toc:
:toclevels: 5
:hardbreaks-option:

== 应用层

=== 概念
- 同步/异步, 阻塞/非阻塞, BIO, NIO, AIO
https://www.zhihu.com/question/19732473/answer/26091478

- reactor, proactor

=== 协议
- MQTT
Message Queuing Telemetry Transport
https://en.wikipedia.org/wiki/MQTT
适用范围: 在低带宽、不可靠的网络下提供基于云平台的远程设备的数据传输和监控。

- AMPQ
Advanced Message Queuing Protocol
https://en.wikipedia.org/wiki/Advanced_Message_Queuing_Protocol
适用范围: 最早应用于金融系统之间的交易消息传递，在物联网应用中，主要适用于移动手持设备与后台数据中心的通信和分析。

- DDS
Data Distribution Service for Real-Time Systems
https://en.wikipedia.org/wiki/Data_Distribution_Service
适用范围: 布式高可靠性、实时传输设备数据通信。目前DDS已经广泛应用于国防、民航、工业控制等领域。

- 常见IM协议
XMPP(Extensible Messaging and Presence Protocol)
SIMPLE(session initiation protocol for instant messaging and presence leveraging extensions)
IMPP(Instant Messaging and Presence Protocol)

- 常见邮件协议
邮局协议(POP)、Internet消息访问协议(IMAP)和简单邮件传输协议(SMTP)

参考:
https://en.wikipedia.org/wiki/Application_layer

=== 库与框架
==== TCP网络编程本质
三个半事件:

- 连接建立: server的accept, client的connect
- 连接断开: 主动断开: close, shutdown    被动断开: read返回值
- 消息到达: fd可读
- 消息发送完毕
- 实际中的网络库为了方便可能还有timer事件

==== linux网络并发服务模型
- (based) one conn(req) one thread/process
- reactor (主线程IO) (libuv, nodejs, 准确来说是reactor + thread pool(例如dns, file等异步操作在work thread里处理))
- reactor + thread(s) (主线程IO + 工作线程)
- reactors + thread pool
- reactors in threads(one loop per thread)
- reactors in processes(nginx)
- 以上混入coroutine, csp(golang), actor(erlang)

以下两种模式可以忽略:
- Half-Sync/Half-Async: https://www.dre.vanderbilt.edu/~schmidt/PDF/PLoP-95.pdf
    不就是reactor + thread(s)么?
- Leader Follower
    这种模式复杂，相比one thread one loop, 看不到什么优点

==== buffer设计
- 对于non blocking网络编程, tcp connection input以及output buffer都是必须的
- buffer设计要考虑的因素

    对外表现连续
    多个socket一个buffer还是一个socket一个buffer: 见下文Q&A
    buffer是固定大小还是非固定大小

=== Q&A
Q: server一个端口能同时接受多种协议的请求吗?
A: https://github.com/apache/incubator-brpc/blob/master/docs/cn/new_protocol.md
A: https://my.oschina.net/succy/blog/4724766

Q: 从4G与WiFi之间的切换应用层是否无感知? 如何做到无感知?
A: https://en.wikipedia.org/wiki/Multipath_TCP
A: https://www.multipath-tcp.org/
A: https://multipath-tcp.org/pmwiki.php/Users/Android
A: https://zhuanlan.zhihu.com/p/46977447

Q: TCP消息多大合适?
A: 太小不合适, 大量的header浪费(一般52字节: ethernet header 14字节 + ip header 20字节 + tcp header 20字节); 
太大也不合适？
A: https://www.zhihu.com/question/353545745
A: https://blog.codingnow.com/2015/01/skynet_netpack.html (个人不太赞同其中的某些处理方式)

Q: 多个socket一个buffer还是一个socket一个buffer? (实际上一个buffer往往对应send和recv两个buffer)
A: muduo是后一种做法: https://github.com/chenshuo/muduo/blob/master/muduo/net/TcpConnection.h, 但muduo解决了buffer过小或过大的问题, 具体做法是，在栈上准备一个65536字节的stackbuf，然后利用readv()来读取数据，iovec有两块，第一块指向muduo Buffer中的writable字节，另一块指向栈上的stackbuf。这样如果读入的数据不多，那么全部都读到Buffer中去了；如果长度超过Buffer的writable字节数，就会读到栈上的stackbuf里，然后程序再把stackbuf里的数据append到Buffer中: https://www.cnblogs.com/solstice/archive/2011/04/17/2018801.html
A: skynet采用了前一种做法