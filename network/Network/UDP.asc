:toc:
:toclevels: 5
:hardbreaks-option:

== UDP

=== 格式
https://en.wikipedia.org/wiki/User_Datagram_Protocol#UDP_datagram_structure

UDP datagram header:

    0      7 8     15 16    23 24    31
    +--------+--------+--------+--------+
    |     Source      |   Destination   |
    |      Port       |      Port       |
    +--------+--------+--------+--------+
    |                 |                 |
    |     Length      |    Checksum     |
    +--------+--------+--------+--------+
    固定大小的8个字节

=== Q&A
Q: 如何实现可靠的UDP?
根据场景可以分为: 尽力可靠(允许缺失); 无序可靠; 有序可靠
如何实现可靠? 重传!
案例: QUIC

Q: UDP数据包理想长度？
The maximum safe UDP payload is 508 bytes. This is a packet size of 576, minus the maximum 60-byte IP header and the 8-byte UDP header. Any UDP payload this size or smaller is guaranteed to be deliverable over IP (though not guaranteed to be delivered). Anything larger is allowed to be outright dropped by any router for any reason. Except on an IPv6-only route, where the maximum payload is 1,212 bytes. As others have mentioned, additional protocol headers could be added in some circumstances. A more conservative value of around 300-400 bytes may be preferred instead.

Q: UDP数据包最大长度？
根据UDP协议，从UDP数据包的包头可以看出，UDP最大包长度是(2的16次方-1)个字节。由于UDP包头占8个字节，而在IP层进行封装后的IP包头占去20字节，所以这个是UDP数据包的最大理论长度是65536 - 1 - 8 - 20 = 65507字节

Q: UDP会发生粘包吗？
UDP不存在粘包问题，是由于UDP发送的时候，没有经过Negal算法优化，不会将多个小包合并一次发送出去。另外，在UDP协议的接收端，采用了链式结构来记录每一个到达的UDP包，这样接收端应用程序一次recv只能从socket接收缓冲区中读出一个数据包。也就是说，发送端send了几次，接收端必须recv几次（无论recv时指定了多大的缓冲区）。

Q: UDP存在发送缓冲区吗？存在接受缓冲区吗？

Q: sendto如何实现的?

Q: recvfrom如何实现的?

Q: UDP阻塞模式下，sendto的表现？
https://stackoverflow.com/questions/4165174/when-does-a-udp-sendto-block

Q: UDP非阻塞模式下，sendto的表现？

Q: UDP阻塞模式下，recvfrom的表现？

Q: UDP非阻塞模式下，recvfrom的表现？

Q: UDP接收buffer如果小了呢？
A: 会丢弃不够的

Q: UDP丢包如何解决？
查看网卡ifconfig eth0或者ethtool -S eth0或者netstat -s -u查看有无drop, error, tx_, rx_等信息, 报文错误、防火墙、UDP buffer size 不足、系统负载过高

参考:
https://www.eet-china.com/mp/a163639.html

=== P2P
- 使用STUN协议(RFC 3489)
STUN协议即常说的UDP打洞，基本思想通过公网上安装的一个STUN server(一般有2个IP地址)充当联系人，client首先与公网上的STUN server联系，判断自己处于内网还是公网，若处于内网，则继续与STUN server联系，判断NAT是哪种类型，若是Cone nat则支持STUN，若是Symmetic nat则不支持以STUN形式的P2P.
STUN最成功的案例要属skype, 但STUN方案也有不足之处, 主要有2点：
1)需要额外的STUN服务器.
2)symmetic nat无法穿透.

- 使用UPNP端口映射技术
UPNP直接把一个内网端口映射到一个网关设备的外网IP的一个端口上,任何发送到外网IP的这个端口的数据,都会被自动转发到内网映射的端口上,只要做了端口映射,就无须关心NAT地址转换所带来的麻烦,对于应用程序从端口映射过的内网地址发出的数据,NAT会把从这个内网地址发出的数据IP头改为相应的公网IP和端口(简称IPPORT1),对方响应的数据被发送到IPPORT1,NAT设备又会把数据传给绑定IPPORT1的内网地址. 
相比于STUN, UPNP有着以下几点优势：
1)无需额外的服务器.
2)开发相比STUN简单.
使用UPNP需要网关支持UPNP(现在的网关设备还没见过不支持UPNP的).
windows系列的操作系统已经内置了UPNP的支持,并且为了方便应用程序的调用,提供了一组UPNP的com组件形式.
emule开源项目是一个P2P共享的文件传输软件，其UPNP模块有两种形式，一是使用操作系统提供的UPNP接口，二是使用miniupnpc(一个upnp开源项目)提供的接口，用于没有提供UPNP功能的操作系统,miniupnpc项目主页上有支持的NAT设备清单，emule优先选择操作系统提供的UPNP接口，若失败，则尝试miniupnpc提供的接口.

=== DNS
https://draveness.me/whys-the-design-dns-udp-tcp/

Q: DNS可以不用53端口吗?
A: 服务器端可以不用53端口，但客户端一般必须用53，因为没法告诉客户端不用53

参考:
https://en.wikipedia.org/wiki/Domain_Name_System

=== QUIC
quick udp internet connection
相比现在广泛应用的http2+tcp+tls协议, QUIC有如下优势:

▪ 握手延迟

    传输层握手和TLS握手放到一起

▪ 改进的拥塞控制

    TCP的拥塞控制实际上包含了四个算法: 慢启动, 拥塞避免, 快速重传, 快速恢复。
    QUIC协议当前默认使用了TCP协议的Cubic拥塞控制算法,
    同时也支持CubicBytes, Reno, RenoBytes, BBR, PCC等拥塞控制算法。
    从拥塞算法本身来看, QUIC只是按照TCP协议重新实现了一遍, 那么QUIC协议到底改进在哪些方面呢？
    主要有如下几点:
        可插拔
        单调递增的Packet Number
        不允许Reneging
        更多的Ack块
        Ack Delay时间
        基于stream和connecton级别的流量控制

▪ 连接迁移

    任何一条QUIC连接不再由IP及端口四元组标识, 而是以一个64位的随机数作为ID来标识。
    这样IP或者端口发生变化时, 只要ID不变, 连接依然维持着, 上层业务逻辑感知不到变化不会中断, 也就不需要重连。
    由于这个ID是客户端随机产生的, 并且长度有64位, 因此冲突概率非常低。

▪ 避免队头阻塞的多路复用

    HTTP/1.1有队头阻塞，因为它需要完整地发送响应，并且不能多路复用它们
    HTTP/2通过引入"帧"(frames)来标识每个资源块属于哪个"流"(stream)来解决这个问题
    然而TCP不知道这些单独的"流"(streams), 只是把所有的东西看作一个大流
    如果一个TCP包丢失，所有后续的包都需要等待它的重传，即使它们包含来自不同流的无关联数据。
    TCP具有传输层队头阻塞。
    即HTTP/2解决了HTTP协议层面的队头阻塞，但是TCP的队头阻塞仍然没有解决。
    解决方案: 需要让传输层知道不同的、独立的流！

▪ 前向冗余纠错

    FEC: Forward Error Correcting
    如果接收端出现少量(即不超过纠错能力)的丢包或错包, 可以借助FEC恢复, 因而降低了重传概率

▪ 用户态实现

    可以快速演进

▪ 安全性

    TCP Header是完全明文的, QUIC除了一些必要的字段, Header也被加密。

Q: QUIC和HTTP/3真的完全消除了队头阻塞?

Q: QUIC协议的缺点?

参考:
https://en.wikipedia.org/wiki/QUIC
https://www.chromium.org/quic
https://zhuanlan.zhihu.com/p/330300133
https://calendar.perfplanet.com/2020/head-of-line-blocking-in-quic-and-http-3-the-details/
https://mp.weixin.qq.com/s/AeO0VarELHy2Ma6u2hQFhg

=== 参考
https://en.wikipedia.org/wiki/User_Datagram_Protocol
https://en.wikipedia.org/wiki/User_Datagram_Protocol#Standards
https://www.kernel.org/doc/html/latest/networking/ip-sysctl.html#udp-variables