== 应用层
:hardbreaks-option:

=== 协议
- HTTP/S

    参考《了解HTTP》

- MQTT, AMPQ, DDS等

- Protobuf

    参考《了解rpc》

Q: 一个端口能同时接受http和tcp请求吗?
A: https://my.oschina.net/succy/blog/4724766

=== 库与框架
==== TCP网络编程本质
三个半事件:

- 连接建立: server的accept, client的connect
- 连接断开: 主动断开: close, shutdown    被动断开: read返回值
- 消息到达: fd可读
- 消息发送完毕
- 实际中的网络库为了方便可能还有timer事件

==== linux网络并发服务模型
- (based) one conn(req) one thread/process
- reactor (主线程IO) (libuv,nodejs)
- reactor + thread (主线程IO + 工作线程)
- reactors + thread pool
- reactors in threads(one loop per thread)
- reactors in processes(nginx)
- coroutine, csp(golang), actor(erlang)
- Half-Sync/Half-Async: https://www.dre.vanderbilt.edu/~schmidt/PDF/PLoP-95.pdf