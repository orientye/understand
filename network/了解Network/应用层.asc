:toc:
:toclevels: 4
:hardbreaks-option:

== 应用层

=== 协议
- MQTT, AMPQ, DDS等

=== 库与框架
==== TCP网络编程本质
三个半事件:

- 连接建立: server的accept, client的connect
- 连接断开: 主动断开: close, shutdown    被动断开: read返回值
- 消息到达: fd可读
- 消息发送完毕
- 实际中的网络库为了方便可能还有timer事件

==== linux网络并发服务模型
- (based) one conn(req) one thread/process
- reactor (主线程IO) (libuv, nodejs, 准确的说是reactor + thread pool(例如dns, file等异步操作在work thread里处理))
- reactor + thread(s) (主线程IO + 工作线程)
- reactors + thread pool
- reactors in threads(one loop per thread)
- reactors in processes(nginx)
- 以上混入coroutine, csp(golang), actor(erlang)
以下两种模式可以忽略:
- Half-Sync/Half-Async: https://www.dre.vanderbilt.edu/~schmidt/PDF/PLoP-95.pdf
    不就是reactor + thread(s)么?
- Leader Follower
    这种模式复杂，相比one thread one loop, 看不到什么优点

=== Q&A
Q: server一个端口能同时接受多种协议的请求吗?
A: https://github.com/apache/incubator-brpc/blob/master/docs/cn/new_protocol.md
A: https://my.oschina.net/succy/blog/4724766

Q: 从4G与WiFi之间的切换应用层是否无感知? 如何做到无感知?
A: https://en.wikipedia.org/wiki/Multipath_TCP
A: https://www.multipath-tcp.org/
A: https://multipath-tcp.org/pmwiki.php/Users/Android