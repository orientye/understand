:toc:
:toclevels: 5
:hardbreaks-option:

== 问题排查

=== 常用命令与工具
==== 尽量使用新的命令
尽量用iproute2工具集, 而不是net-tools(比较古老):
用ip addr; ip link 替换 ifconfig
用ip route 替换 route; netstat -r
用ss替换netstat
用nstat替换netstat -s

==== dstat
可以查看整体情况
dstat -tcp

==== sar
sar -n DEV, EDEV, FC, ICMP, EICMP, ICMP6, EICMP6, IP, EIP, IP6, EIP6, NFS, NFSD, SOCK, SOCK6, SOFT, TCP, ETCP, UDP and UDP6

==== ping

==== hping3
向网络主机发送(几乎)任意TCP/IP数据包并显示目标回复

==== traceroute
Traceroute 的实现一共有三种方法, 分别是:
TCP traceroute(使用tracetcp程序可以实现)
UDP traceroute(Linux默认情况下使用)
ICMP traceroute(MS Windows默认情况下使用)

==== mtr

==== ifconfig

==== netstat

==== nstat
nstat -z | grep -i drop

==== ip

==== ss
ss -natp可以查看每个tcp的连接状态

==== iptables/firewalld

==== sysctl

==== ethtool
ethtool -S 可以查看网卡统计信息(例如接收和发送的数据包总数，接收和发送的流量，丢弃的包数量，错误的数据包数量等)
例如ethtool -S ens33

==== cat /proc/net/dev
更高一层的网卡统计
里显示的统计只是sysfs里的一个子集，适合作为一个常规的统计参考

==== tcpdump/wireshark/tshark
Q: tcpdump能否抓到被iptable封禁的包？
A: tcpdump工作在设备层，在ip层以前就能处理。netfilter工作在ip, arp等层，是在tcpdump后面工作的，因此iptable封禁规则不会影响到tcpdump。

==== charles/fiddler

==== tcpreplay/ipdecap/scapy

==== dropwatch

==== perf/iperf3

==== systemtap

==== TCP Tracepoints
轻量级, linux内核4.16及以上

==== tc
show/manipulate traffic control settings

模拟网络异常

普通网络延迟: tc qdisc add dev eth0 root netem delay 100ms

抖动延迟:
可模拟较真实的差网络条件，延迟的同时伴随丢包
该命令将eth0网卡的传输设置为100ms, 同时大约有30%的包会延迟±10ms发送
tc qdisc add dev eth0 root netem delay 100ms 10ms 30%

丢包1%:
tc qdisc add dev eth0 root netem loss 1%

重复包:
tc qdisc add dev eth0 root netem duplicate 1%

模拟数据包乱序:
该命令将eth0网卡的传输设置为:有25%的数据包(50%相关)会被立即发送, 其他的延迟10毫秒
tc qdisc change dev eth0 root netem delay 10ms reorder 25% 50%

查看已经配置的网络条件:
tc qdisc show dev eth0

删除已经配置的网络条件:
将以上命令中的add改为del

==== nc(netcat)
https://zh.wikipedia.org/zh-cn/Netcat

==== Nmap
用于网络发现和安全审计的网络安全
https://zh.wikipedia.org/zh-cn/Nmap

=== 丢包
==== 网卡
RingBuffer溢出丢包
网卡端口协商丢包
网卡流控丢包
报文mac地址丢包
其它网卡异常
    网卡firmware版本bug
    网卡插线网口规格等
    报文长度丢包

==== 驱动
网络接口丢包
netdev_max_backlog溢出丢包
单核负载高丢包

==== 协议栈
neighbor系统丢包
ip层丢包
tcp层丢包
udp层丢包
socket配置
