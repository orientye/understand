= rpc
:hardbreaks-option:
:revnumber: 0.0.1
:author: orient
:toc:
:homepage: http://orientye.com
<<<

== 概述
- 概念
	
	Remote Procedure Call，即远程过程调用
	用于解决分布式系统中服务之间的调用问题，实现调用远程方法就跟调用本地方法一样的体验

- 调用方式

    同步
    异步
    并行

- 协议

- 序列化

- 线程模型

- 动态代理

- 注册与发现

- 负载均衡

- 安全

- 扩展功能

	服务治理

== 序列化

=== protobuf
https://developers.google.com/protocol-buffers/docs/proto3
https://halfrost.com/protobuf_encode/

=== messagepack

=== memorypack

=== json
json vs. json5
JSON5 is an extension to the popular JSON file format that aims to be easier to write and maintain by hand (e.g. for config files). It is not intended to be used for machine-to-machine communication. (Keep using JSON or other file formats for that.)
json5: https://github.com/json5/json5

=== bson

=== capnproto
核心思想: no encoding/decoding step
https://github.com/capnproto/capnproto

=== 参考
https://stackoverflow.com/questions/21854687/improving-performance-of-protocol-buffers

== gRPC

- 服务调用

	普通RPC调用
		同步阻塞，通常实现类xxxBlockingStub(基于proto定义生成)
		异步非阻塞，基于Future-Listener机制，通常实现类xxxFutureStub
		异步非阻塞，基于Reactive的响应编程模式，通常实现类是xxxStub

	基于HTTP/2.0的streaming调用方式
		服务端streaming: 例如短信群发功能
		客户端streaming: 例如汇总功能
		双向streaming

即:
Unary RPC:  rpc simpleHello(Person) returns (Result) {}
Server streaming RPC:  rpc serverStreamHello(Person) returns (stream Result) {}
Client streaming RPC:  rpc clientStreamHello(stream Person) returns (Result) {}
Bidirectional streaming RPC:  rpc biStreamHello(stream Person) returns (stream Result) {}

https://grpc.io/docs/what-is-grpc/core-concepts/

cpp:
https://grpc.io/docs/languages/cpp/basics/
https://grpc.io/docs/languages/cpp/async/

== Thrift

== Spring Cloud

== brpc

== dubbo
=== 概览
https://cn.dubbo.apache.org/zh-cn/overview/home/

概念与架构: https://cn.dubbo.apache.org/zh-cn/overview/what/overview/

与 gRPC、Spring Cloud、Istio 的关系: https://cn.dubbo.apache.org/zh-cn/overview/what/xyz-difference/

=== 协议
https://cn.dubbo.apache.org/zh-cn/overview/reference/protocols/
https://zhuanlan.zhihu.com/p/446499369

=== 线程模型
- 概要
https://cn.dubbo.apache.org/zh-cn/overview/mannual/java-sdk/advanced-features-and-usage/performance/threading-model/

- 通过不同的派发策略和不同的线程池配置的组合来应对不同的场景:

	<dubbo:protocol name="dubbo" dispatcher="all" threadpool="fixed" threads="100" />

- Dispatcher

	all 所有消息都派发到线程池，包括请求，响应，连接事件，断开事件，心跳等
	direct 所有消息都不派发到线程池，全部在IO线程上直接执行
	message 只有请求响应消息派发到线程池，其它连接断开事件，心跳等消息，直接在IO线程上执行
	execution 只有请求消息派发到线程池，响应和其它连接断开事件，心跳等消息，直接在IO线程上执行
	connection 在IO线程上，将连接断开事件放入队列，有序逐个执行，其它消息派发到线程池

- ThreadPool

	fixed 固定大小线程池，启动时建立线程，不关闭，一直持有(缺省)
	cached 缓存线程池，空闲一分钟自动删除，需要时重建
	limited 可伸缩线程池，但池中的线程数只会增长不会收缩。只增长不收缩是为了避免收缩时突然来了大流量引起的性能问题
	eager 优先创建Worker线程池
		在任务数量大于corePoolSize但是小于maximumPoolSize时，优先创建Worker来处理任务。
		当任务数量大于maximumPoolSize时，将任务放入阻塞队列中。
		阻塞队列充满时抛出RejectedExecutionException。
		(相比于cached:cached在任务数量超过maximumPoolSize时直接抛出异常而不是将任务放入阻塞队列)
	
- 参考
https://cn.dubbo.apache.org/zh-cn/docsv2.7/user/examples/thread-model/

=== 参考
https://github.com/apache/dubbo

== tars

== PhxRPC

== srpc
https://github.com/sogou/srpc/tree/master/docs
https://github.com/sogou/workflow/tree/master/docs

Workflow:
FAQ: https://github.com/sogou/workflow/issues/170
https://www.zhihu.com/question/20124494/answer/2298649258
https://zhuanlan.zhihu.com/p/165638263
https://zhuanlan.zhihu.com/p/484293077

SRPC架构介绍: https://zhuanlan.zhihu.com/p/249071112

== flare
https://github.com/Tencent/flare

== hertz
https://github.com/cloudwego/hertz

== kitex
https://github.com/cloudwego/kitex

== 实战

=== 超时与重试
超时的意义是什么？

重试的意义是什么？或者说什么情况下需要重试?

重试需要注意的问题？

https://cloud.tencent.com/developer/article/1605116

brpc:
https://github.com/apache/brpc/blob/master/docs/cn/client.md#%E8%B6%85%E6%97%B6
https://github.com/apache/brpc/blob/master/docs/cn/client.md#%E9%87%8D%E8%AF%95

grpc:
https://learn.microsoft.com/zh-cn/aspnet/core/grpc/retries?view=aspnetcore-7.0

=== 负载均衡
brpc:
https://github.com/apache/brpc/blob/master/docs/cn/load_balancing.md

dubbo:
https://cn.dubbo.apache.org/zh-cn/overview/core-features/load-balance/

=== 熔断
hystrix
sentinel

brpc:
https://github.com/apache/brpc/blob/master/docs/cn/circuit_breaker.md

=== 容错
dubbo:
https://cn.dubbo.apache.org/zh-cn/docs/advanced/fault-tolerent-strategy/
