= rpc
:hardbreaks-option:
:revnumber: 0.0.1
:author: orient
:toc:
:homepage: http://orientye.com
<<<

== 概述
- 概念
	
	Remote Procedure Call，即远程过程调用
	用于解决分布式系统中服务之间的调用问题，实现调用远程方法就跟调用本地方法一样的体验

- 调用方式

    同步
    异步
    并行

- 协议

- 序列化

- 线程模型

- 动态代理

- 注册与发现

- 负载均衡

- 安全

- 扩展功能

	服务治理

== 序列化

=== protobuf
https://developers.google.com/protocol-buffers/docs/proto3
https://halfrost.com/protobuf_encode/

=== messagepack

=== memorypack

=== json
json vs. json5
JSON5 is an extension to the popular JSON file format that aims to be easier to write and maintain by hand (e.g. for config files). It is not intended to be used for machine-to-machine communication. (Keep using JSON or other file formats for that.)
json5: https://github.com/json5/json5

=== bson

=== capnproto
核心思想: no encoding/decoding step
https://github.com/capnproto/capnproto

=== 参考
https://stackoverflow.com/questions/21854687/improving-performance-of-protocol-buffers

== gRPC

- 服务调用

	普通RPC调用
		同步阻塞，通常实现类xxxBlockingStub(基于proto定义生成)
		异步非阻塞，基于Future-Listener机制，通常实现类xxxFutureStub
		异步非阻塞，基于Reactive的响应编程模式，通常实现类是xxxStub

	基于HTTP/2.0的streaming调用方式
		服务端streaming: 例如短信群发功能
		客户端streaming: 例如汇总功能
		双向streaming

即:
Unary RPC:  rpc simpleHello(Person) returns (Result) {}
Server streaming RPC:  rpc serverStreamHello(Person) returns (stream Result) {}
Client streaming RPC:  rpc clientStreamHello(stream Person) returns (Result) {}
Bidirectional streaming RPC:  rpc biStreamHello(stream Person) returns (stream Result) {}

https://grpc.io/docs/what-is-grpc/core-concepts/

cpp:
https://grpc.io/docs/languages/cpp/basics/
https://grpc.io/docs/languages/cpp/async/

== Thrift

== Spring Cloud

== brpc

== dubbo
=== 概览
https://cn.dubbo.apache.org/zh-cn/overview/home/

概念与架构: https://cn.dubbo.apache.org/zh-cn/overview/what/overview/

与 gRPC、Spring Cloud、Istio 的关系: https://cn.dubbo.apache.org/zh-cn/overview/what/xyz-difference/


=== 参考
https://github.com/apache/dubbo

== tars

== PhxRPC

== srpc
https://github.com/sogou/srpc/tree/master/docs
https://github.com/sogou/workflow/tree/master/docs

Workflow:
FAQ: https://github.com/sogou/workflow/issues/170
https://www.zhihu.com/question/20124494/answer/2298649258
https://zhuanlan.zhihu.com/p/165638263
https://zhuanlan.zhihu.com/p/484293077

SRPC架构介绍: https://zhuanlan.zhihu.com/p/249071112

== flare
https://github.com/Tencent/flare

== hertz
https://github.com/cloudwego/hertz

== kitex
https://github.com/cloudwego/kitex

== 实战

=== 超时与重试
超时的意义是什么？

重试的意义是什么？或者说什么情况下需要重试?

重试需要注意的问题？

https://cloud.tencent.com/developer/article/1605116

brpc:
https://github.com/apache/brpc/blob/master/docs/cn/client.md#%E8%B6%85%E6%97%B6
https://github.com/apache/brpc/blob/master/docs/cn/client.md#%E9%87%8D%E8%AF%95

grpc:
https://learn.microsoft.com/zh-cn/aspnet/core/grpc/retries?view=aspnetcore-7.0

=== 熔断
hystrix
sentinel

brpc:
https://github.com/apache/brpc/blob/master/docs/cn/circuit_breaker.md

=== 容错
dubbo:
https://cn.dubbo.apache.org/zh-cn/docs/advanced/fault-tolerent-strategy/
