= rpc
:hardbreaks-option:
:revnumber: 0.0.1
:author: orient
:toc:
:toclevels: 5
:homepage: http://orientye.com
<<<

== 概述
- 概念

    Remote Procedure Call，即远程过程调用
    解决分布式系统中服务之间的调用问题，实现调用远程方法就跟调用本地方法一样的体验

    服务、方法(参数与返回值)
        IDL: 跨编程语言
        编程语言相关的方式，例如Java Interface定义服务
        特定方式，例如module_id + command_id + msg_body

    客户端、服务端、注册中心
    Consumer、Provider

- 调用方式

    同步
    异步
    并行/半同步(等待多个异步访问完成):
        严格意义上讲不算是一种调用方式
        但有些需要RPC框架来完成，例如brpc:
        https://github.com/apache/brpc/blob/master/docs/cn/client.md#%E5%8D%8A%E5%90%8C%E6%AD%A5

- 协议

    可扩展
    向后兼容
    是否支持单端口的多协议
    是否支持单个服务的多协议
    是否支持一个应用内多个服务使用不同通信协议
    是否支持流式通信

- 序列化

    通用性
    兼容性
    性能(时间开销、空间开销)
    安全

- 服务治理

    注册与发现
    负载均衡
    熔断限流
    ......

- 线程模型

- 动态代理

- 安全

- 扩展功能

== 序列化

=== protobuf
https://developers.google.com/protocol-buffers/docs/proto3
https://protobuf.dev/programming-guides/encoding/
https://halfrost.com/protobuf_encode/

pb3内置了转换json的功能:
https://protobuf.dev/programming-guides/proto3/#json

=== json
json vs. json5
JSON5 is an extension to the popular JSON file format that aims to be easier to write and maintain by hand (e.g. for config files). It is not intended to be used for machine-to-machine communication. (Keep using JSON or other file formats for that.)
json5: https://github.com/json5/json5

=== bson
https://github.com/mongodb/js-bson

=== messagepack
https://github.com/msgpack/msgpack/blob/master/spec.md

=== capnproto
核心思想: no encoding/decoding step
无拷贝序列化，本质上是开辟一个bytes slice作为buffer，所有对数据结构的读写操作都是直接读写buffer，读写完成后，在头部添加一些buffer的信息就可以直接发送，对端收到后即可读取。

参考:
https://www.cloudwego.io/zh/blog/2021/09/23/%E5%AD%97%E8%8A%82%E8%B7%B3%E5%8A%A8-go-rpc-%E6%A1%86%E6%9E%B6-kitex-%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E5%AE%9E%E8%B7%B5/#%E6%97%A0%E6%8B%B7%E8%B4%9D%E5%BA%8F%E5%88%97%E5%8C%96

=== memorypack
类似capnproto，也是zero encoding
https://github.com/Cysharp/MemoryPack

=== 参考
https://stackoverflow.com/questions/21854687/improving-performance-of-protocol-buffers

== gRPC
=== 概览
https://grpc.io/blog/principles/
https://hengyun.tech/thinking-about-grpc-http2/
https://learn.microsoft.com/zh-cn/aspnet/core/grpc/comparison
https://cn.pingcap.com/blog/grpc/
https://github.com/grpc/grpc/blob/master/CONCEPTS.md

=== 服务调用

    Unary RPC:  rpc simpleHello(Person) returns (Result) {}
    Server streaming RPC:  rpc serverStreamHello(Person) returns (stream Result) {}
    Client streaming RPC:  rpc clientStreamHello(stream Person) returns (Result) {}
    Bidirectional streaming RPC:  rpc biStreamHello(stream Person) returns (stream Result) {}

参考: https://grpc.io/docs/what-is-grpc/core-concepts/

=== 语言形式
https://grpc.io/docs/languages/

cpp:
https://grpc.io/docs/languages/cpp/basics/
https://grpc.io/docs/languages/cpp/async/

c#:
https://learn.microsoft.com/zh-cn/aspnet/core/grpc
https://learn.microsoft.com/zh-cn/aspnet/core/grpc/performance

java:
https://grpc.io/docs/languages/java/
https://grpc.io/docs/languages/java/generated-code/
考虑CompletableFuture(since 1.8):
https://github.com/grpc/grpc-java/issues/2797

rust:
https://github.com/pingcap/blog-cn/blob/master/grpc-rs.md

=== 参考
https://github.com/grpc/grpc/tree/master/doc
https://grpc.io/docs/guides/

== dubbo
=== 概览
https://cn.dubbo.apache.org/zh-cn/overview/home/

概念与架构:
https://cn.dubbo.apache.org/zh-cn/overview/what/overview/

与 gRPC、Spring Cloud、Istio 的关系:
https://cn.dubbo.apache.org/zh-cn/overview/what/xyz-difference/
gRPC定位为一款 RPC 框架，Dubbo定位是一款微服务开发框架

优势:
https://cn.dubbo.apache.org/zh-cn/overview/what/advantages/

=== 线程模型
- 概要
https://cn.dubbo.apache.org/zh-cn/overview/mannual/java-sdk/advanced-features-and-usage/performance/threading-model/

- 通过不同的派发策略和不同的线程池配置的组合来应对不同的场景:

	<dubbo:protocol name="dubbo" dispatcher="all" threadpool="fixed" threads="100" />

- Dispatcher

	all 所有消息都派发到线程池，包括请求，响应，连接事件，断开事件，心跳等
	direct 所有消息都不派发到线程池，全部在IO线程上直接执行
	message 只有请求响应消息派发到线程池，其它连接断开事件，心跳等消息，直接在IO线程上执行
	execution 只有请求消息派发到线程池，响应和其它连接断开事件，心跳等消息，直接在IO线程上执行
	connection 在IO线程上，将连接断开事件放入队列，有序逐个执行，其它消息派发到线程池

- ThreadPool

	fixed 固定大小线程池，启动时建立线程，不关闭，一直持有(缺省)
	cached 缓存线程池，空闲一分钟自动删除，需要时重建
	limited 可伸缩线程池，但池中的线程数只会增长不会收缩。只增长不收缩是为了避免收缩时突然来了大流量引起的性能问题
	eager 优先创建Worker线程池
		在任务数量大于corePoolSize但是小于maximumPoolSize时，优先创建Worker来处理任务。
		当任务数量大于maximumPoolSize时，将任务放入阻塞队列中。
		阻塞队列充满时抛出RejectedExecutionException。
		(相比于cached:cached在任务数量超过maximumPoolSize时直接抛出异常而不是将任务放入阻塞队列)
	
- 参考
https://cn.dubbo.apache.org/zh-cn/docsv2.7/user/examples/thread-model/

=== 使用
https://cn.dubbo.apache.org/zh-cn/overview/mannual/java-sdk/quick-start/
https://cn.dubbo.apache.org/zh-cn/overview/mannual/java-sdk/advanced-features-and-usage/

=== 参考
https://cn.dubbo.apache.org/zh-cn/blog/
https://github.com/apache/dubbo

== brpc
=== 概览
https://github.com/apache/brpc/blob/master/docs/cn/overview.md
https://github.com/apache/brpc/blob/master/docs/cn/threading_overview.md
https://github.com/apache/brpc/blob/master/docs/cn/bthread.md
https://github.com/apache/brpc/blob/master/docs/cn/bthread_or_not.md
https://github.com/apache/brpc/blob/master/docs/cn/coroutine.md
https://github.com/apache/brpc/blob/master/docs/cn/server.md
https://github.com/apache/brpc/blob/master/docs/cn/client.md

=== 并发
https://github.com/apache/brpc/blob/master/docs/cn/bthread.md
https://github.com/apache/brpc/blob/master/docs/cn/bthread_id.md
https://github.com/apache/brpc/blob/master/docs/cn/bthread_or_not.md
https://github.com/apache/brpc/blob/master/docs/cn/bthread_tagged_task_group.md
https://github.com/apache/brpc/blob/master/docs/cn/coroutine.md

https://github.com/apache/brpc/blob/master/docs/cn/bvar.md
https://github.com/apache/brpc/blob/master/docs/cn/bvar_c%2B%2B.md

https://github.com/apache/brpc/blob/master/docs/cn/execution_queue.md

https://github.com/apache/brpc/blob/master/docs/cn/thread_local.md

=== io
https://github.com/apache/brpc/blob/master/docs/cn/io.md

=== 内存
https://github.com/apache/brpc/blob/master/docs/cn/iobuf.md
https://github.com/apache/brpc/blob/master/docs/cn/memory_management.md

=== 性能
https://github.com/apache/brpc/blob/master/docs/cn/benchmark.md
https://github.com/apache/brpc/blob/master/docs/cn/benchmark_http.md
https://github.com/apache/brpc/blob/master/docs/cn/cpu_profiler.md
https://github.com/apache/brpc/blob/master/docs/cn/rpc_press.md

=== misc
==== stream
https://github.com/apache/brpc/blob/master/docs/cn/streaming_rpc.md

==== 内置服务
https://github.com/apache/brpc/blob/master/docs/cn/builtin_service.md

==== 哈希表
https://github.com/apache/brpc/blob/master/docs/cn/flatmap.md

==== 定时
https://github.com/apache/brpc/blob/master/docs/cn/timer_keeping.md

==== UDS及IPV6支持
https://github.com/apache/brpc/blob/master/docs/cn/endpoint.md

==== 配置
https://github.com/apache/brpc/blob/master/docs/cn/flags.md

==== 构建
https://github.com/apache/brpc/blob/master/docs/cn/getting_started.md

==== memcache
https://github.com/apache/brpc/blob/master/docs/cn/memcache_client.md

==== redis
https://github.com/apache/brpc/blob/master/docs/cn/redis_client.md

==== rdma
https://github.com/apache/brpc/blob/master/docs/cn/rdma.md

==== 日志
https://github.com/apache/brpc/blob/master/docs/cn/streaming_log.md

==== wireshark插件
https://github.com/apache/brpc/blob/master/docs/cn/wireshark_baidu_std.md

=== 参考
https://github.com/apache/brpc/blob/master/docs/cn/

== flare
https://github.com/Tencent/flare
https://github.com/Tencent/flare/tree/master/flare/doc
https://github.com/Tencent/flare/tree/master/flare/example

== kitex
=== 概览
https://www.cloudwego.io/zh/docs/kitex/overview/
https://www.cloudwego.io/zh/docs/kitex/tutorials/advanced-feature/multi_service/

附hertz: Golang微服务HTTP框架
https://github.com/cloudwego/hertz/blob/develop/README_cn.md
https://github.com/cloudwego/hertz

== PhxRPC
https://github.com/Tencent/phxrpc

== Spring Cloud

== srpc
https://github.com/sogou/srpc/tree/master/docs

Workflow:
https://github.com/sogou/workflow/tree/master/docs
FAQ: https://github.com/sogou/workflow/issues/170
https://www.zhihu.com/question/20124494/answer/2298649258
https://zhuanlan.zhihu.com/p/165638263
https://zhuanlan.zhihu.com/p/484293077

SRPC架构介绍: https://zhuanlan.zhihu.com/p/249071112

=== 参考
https://www.cloudwego.io/zh/docs/kitex/
https://github.com/cloudwego/kitex
https://www.cloudwego.io/zh/blog/
https://www.cloudwego.io/zh/blog/2021/09/23/%E5%AD%97%E8%8A%82%E8%B7%B3%E5%8A%A8-go-rpc-%E6%A1%86%E6%9E%B6-kitex-%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E5%AE%9E%E8%B7%B5/

== tars
vs. trpc
tRPC 和 Tars 是两个完全独立框架。不过，tRPC 设计之初也有借鉴 Tars 的部分设计，tRPC 的部分核心开发设计者曾经也是 Tars 的核心开发设计者。之所以要另起炉灶，主要还是因为 Tars 不能承担起公司内部框架存量归一的目标，自身架构上比较封闭是最主要的原因。而 tRPC 采用插件化的设计，架构开放性很强，很容易融入到已有的服务治理平台中去，更利于存量收敛。
参考: https://new.qq.com/rain/a/20231117A03RR500

https://tarscloud.gitbook.io/tarsdocs
https://github.com/TarsCloud/Tars

== thrift
https://github.com/apache/thrift

== trpc
项目背景: https://new.qq.com/rain/a/20231117A03RR500

https://github.com/Tencent/trpc
https://trpc.group/zh/docs/

== volo
https://github.com/cloudwego/volo

== 实战
=== 协议
==== brpc
https://github.com/apache/brpc/blob/master/docs/cn/overview.md#%E4%BB%80%E4%B9%88%E6%98%AF

- 多协议与新协议
https://github.com/apache/brpc/blob/master/docs/cn/new_protocol.md

- baidu_std
https://github.com/apache/brpc/blob/master/docs/cn/baidu_std.md

- http
https://github.com/apache/brpc/blob/master/docs/cn/http_service.md
https://github.com/apache/brpc/blob/master/docs/cn/http_client.md
https://github.com/apache/brpc/blob/master/docs/cn/http_derivatives.md
https://zhuanlan.zhihu.com/p/120493593
https://github.com/apache/brpc/blob/master/docs/cn/parallel_http.md

- pb与json
https://github.com/apache/brpc/blob/master/docs/cn/json2pb.md

- thrift
https://github.com/apache/brpc/blob/master/docs/cn/thrift.md

==== dubbo
https://cn.dubbo.apache.org/zh-cn/overview/reference/protocols/
https://zhuanlan.zhihu.com/p/446499369
https://cn.dubbo.apache.org/zh-cn/overview/core-features/protocols/
https://cn.dubbo.apache.org/zh-cn/overview/mannual/java-sdk/advanced-features-and-usage/service/port-unification/
https://cn.dubbo.apache.org/zh-cn/overview/tasks/protocols/
https://cn.dubbo.apache.org/zh-cn/overview/mannual/java-sdk/upgrades-and-compatibility/protobufinterface/

==== grpc
https://github.com/grpc/grpc/blob/master/doc/PROTOCOL-HTTP2.md
https://github.com/grpc/grpc/blob/master/doc/PROTOCOL-WEB.md
https://www.ked.pub/coding/grpc-with-web/

==== kitex
https://www.cloudwego.io/zh/docs/kitex/tutorials/basic-feature/message_type/
https://www.cloudwego.io/zh/docs/kitex/tutorials/basic-feature/protocol/
https://www.cloudwego.io/zh/docs/kitex/tutorials/advanced-feature/codec_frugal/

=== 推送
==== brpc
https://github.com/apache/brpc/blob/master/docs/cn/server_push.md

==== dubbo
Triple协议，或者可以结合其它技术，例如websocket或mq

==== grpc
Server Streaming RPC(不过还是客户端先向服务端发送一次请求)

=== 超时与重试
==== 概念
超时的意义是什么？
重试的意义是什么？什么情况下需要重试？
重试需要注意的问题？

https://cloud.tencent.com/developer/article/1605116

==== brpc
https://github.com/apache/brpc/blob/master/docs/cn/client.md#%E8%B6%85%E6%97%B6
https://github.com/apache/brpc/blob/master/docs/cn/client.md#%E9%87%8D%E8%AF%95

==== dubbo
dubbo支持非常细粒度的超时设置，包括：方法级别、接口级别和全局。
如果各个级别同时配置了，则优先级为：消费端方法级 > 服务端方法级 > 消费端接口级 > 服务端接口级 > 消费端全局 > 服务端全局。

==== grpc
https://learn.microsoft.com/zh-cn/aspnet/core/grpc/retries
https://learn.microsoft.com/zh-cn/aspnet/core/grpc/deadlines-cancellation
https://grpc.io/docs/guides/deadlines/

==== kitex
https://www.cloudwego.io/zh/docs/kitex/tutorials/service-governance/timeout/
https://www.cloudwego.io/zh/docs/kitex/tutorials/service-governance/retry/

=== 微服务开发
==== dubbo
https://cn.dubbo.apache.org/zh-cn/overview/core-features/service-definition/
https://cn.dubbo.apache.org/zh-cn/overview/core-features/ecosystem/

=== 服务发现
==== dubbo
https://cn.dubbo.apache.org/zh-cn/overview/core-features/service-discovery/
https://cn.dubbo.apache.org/zh-cn/overview/mannual/java-sdk/advanced-features-and-usage/service/multi-registry/
https://cn.dubbo.apache.org/zh-cn/overview/core-features/extensibility/#%E6%9C%8D%E5%8A%A1%E6%B2%BB%E7%90%86%E5%B1%82

nacos:
https://nacos.io/zh-cn/docs/use-nacos-with-dubbo.html
实现: https://www.jb51.net/article/238650.htm

==== kitex
https://www.cloudwego.io/zh/docs/kitex/tutorials/service-governance/service_discovery/

nacos: https://www.cloudwego.io/zh/docs/kitex/tutorials/service-governance/service_discovery/nacos/

=== 配置中心
==== kitex
https://www.cloudwego.io/zh/docs/kitex/tutorials/service-governance/config-center/

=== 负载均衡
==== brpc
https://github.com/apache/brpc/blob/master/docs/cn/load_balancing.md
https://github.com/apache/brpc/blob/master/docs/cn/client.md#%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1
https://github.com/apache/brpc/blob/master/docs/cn/consistent_hashing.md
https://github.com/apache/brpc/blob/master/docs/cn/lalb.md

==== dubbo
https://cn.dubbo.apache.org/zh-cn/overview/what/advantages/governance/#%E6%B5%81%E9%87%8F%E7%AE%A1%E6%8E%A7
https://cn.dubbo.apache.org/zh-cn/overview/core-features/load-balance/

==== grpc
https://learn.microsoft.com/zh-cn/aspnet/core/grpc/loadbalancing
https://github.com/grpc/grpc/blob/master/doc/load-balancing.md

==== kitex
https://www.cloudwego.io/zh/docs/kitex/tutorials/service-governance/loadbalance/

=== 流量管控
==== dubbo
https://cn.dubbo.apache.org/zh-cn/overview/tasks/traffic-management/

==== grpc
https://grpc.io/docs/guides/flow-control/

=== 扩展
==== dubbo
https://cn.dubbo.apache.org/zh-cn/overview/core-features/extensibility/
https://cn.dubbo.apache.org/zh-cn/overview/tasks/extensibility/

==== kitex
https://www.cloudwego.io/zh/docs/kitex/tutorials/framework-exten/
https://www.cloudwego.io/zh/docs/kitex/tutorials/options/

=== 观测
==== brpc
https://github.com/apache/brpc/blob/master/docs/cn/connections.md
https://github.com/apache/brpc/blob/master/docs/cn/contention_profiler.md
https://github.com/apache/brpc/blob/master/docs/cn/rpc_view.md
https://github.com/apache/brpc/blob/master/docs/cn/rpcz.md
https://github.com/apache/brpc/blob/master/docs/cn/server_debugging.md
https://github.com/apache/brpc/blob/master/docs/cn/status.md
https://github.com/apache/brpc/blob/master/docs/cn/mbvar_c%2B%2B.md
https://github.com/apache/brpc/blob/master/docs/cn/vars.md

==== dubbo
https://cn.dubbo.apache.org/zh-cn/overview/core-features/observability/

==== kitex
https://www.cloudwego.io/zh/docs/kitex/tutorials/observability/
https://www.cloudwego.io/zh/docs/kitex/tutorials/advanced-feature/profiler/

=== 认证鉴权
==== dubbo
https://cn.dubbo.apache.org/zh-cn/overview/core-features/security/

=== 服务网格
==== dubbo
https://cn.dubbo.apache.org/zh-cn/overview/core-features/service-mesh/

==== kitex
https://www.cloudwego.io/zh/docs/kitex/tutorials/advanced-feature/xds/

=== 限流与熔断
==== brpc
https://github.com/apache/brpc/blob/master/docs/cn/auto_concurrency_limiter.md
https://github.com/apache/brpc/blob/master/docs/cn/circuit_breaker.md
https://github.com/apache/brpc/blob/master/docs/cn/timeout_concurrency_limiter.md

==== dubbo
https://cn.dubbo.apache.org/zh-cn/overview/core-features/traffic/circuit-breaking/
https://cn.dubbo.apache.org/zh-cn/overview/tasks/rate-limit/

==== kitex
https://www.cloudwego.io/zh/docs/kitex/tutorials/service-governance/circuitbreaker/
https://www.cloudwego.io/zh/docs/kitex/tutorials/service-governance/limiting/

=== 容错
==== brpc
雪崩: https://github.com/apache/brpc/blob/master/docs/cn/avalanche.md
https://github.com/apache/brpc/blob/master/docs/cn/backup_request.md

==== dubbo
https://cn.dubbo.apache.org/zh-cn/docs/advanced/fault-tolerent-strategy/

==== kitex
https://www.cloudwego.io/zh/docs/kitex/tutorials/service-governance/fallback/

=== 故障排查
==== dubbo
https://cn.dubbo.apache.org/zh-cn/overview/tasks/troubleshoot/

=== 泛化服务
==== 概念
在传统的 RPC 调用中，客户端通常需要依赖于服务端 IDL，即其定义的服务接口、参数结构、数据类型等信息，基于 IDL 生成代码后发起 RPC 调用。但是，对于 API 网关、接口测试平台这类通用型的平台服务，有成千上万的服务接入，让平台依赖所有服务的 IDL 生成代码去发起 RPC 调用是不现实的。在此背景下，RPC 泛化调用出现了，即提供一种泛化接口，接受如 JSON、Map 此类数据，转化为 RPC 协议规定的数据格式后发起调用。

[source, java]
----
class GenericService {

    Object $invoke(String methodName, String[] paramTypes, Object[] params);

    CompletableFuture<Object> $asyncInvoke(String methodName, String[] paramTypes, Object[] params);

}
----

通过统一的GenericService接口类生成的动态代理，来实现在没有接口的情况下进行RPC调用的功能，称之为泛化调用。

参考: https://zhuanlan.zhihu.com/p/599816933

==== dubbo
https://cn.dubbo.apache.org/zh-cn/overview/mannual/java-sdk/advanced-features-and-usage/service/generic-reference/

==== kitex
https://www.cloudwego.io/zh/docs/kitex/tutorials/advanced-feature/generic-call/

=== misc
==== 流量回放
===== 概念
相比TcpCopy、Nginx等流量回放方案，在RPC里内置流量回放功能，使用起来会更加方便，可以做更多定制化需求。

===== brpc
https://github.com/apache/brpc/blob/master/docs/cn/rpc_replay.md

==== 启动与关闭
===== 概念
启动预热与延迟暴露

优雅关闭:
先保证不接收新请求，通知调用方下线，然后再处理关闭前收到的请求，最后关闭释放资源。
同时加上超时时间控制，当超过了指定时间没有结束，则强制退出应用。

===== kitex
https://www.cloudwego.io/zh/docs/kitex/tutorials/advanced-feature/start_shutdown_hook/
https://www.cloudwego.io/zh/docs/kitex/best-practice/graceful_shutdown/

==== 错误处理
===== brpc
https://github.com/apache/brpc/blob/master/docs/cn/error_code.md

===== dubbo
https://cn.dubbo.apache.org/zh-cn/overview/mannual/java-sdk/faq/

===== grpc
https://grpc.io/docs/guides/error/

===== kitex
https://www.cloudwego.io/zh/docs/kitex/tutorials/advanced-feature/error_handler/
https://www.cloudwego.io/zh/docs/kitex/best-practice/error_handle/
https://www.cloudwego.io/zh/docs/kitex/reference/exception/

==== 取消
===== brpc
https://github.com/apache/brpc/blob/master/docs/cn/combo_channel.md

==== 版本
===== dubbo
https://cn.dubbo.apache.org/zh-cn/overview/mannual/java-sdk/advanced-features-and-usage/service/multi-versions/

===== grpc
https://github.com/grpc/grpc/blob/master/doc/versioning.md

===== kitex
https://www.cloudwego.io/zh/docs/kitex/reference/version/

==== metadata
===== grpc
https://grpc.io/docs/guides/metadata/

===== kitex
https://www.cloudwego.io/zh/docs/kitex/tutorials/advanced-feature/metainfo/

==== 自定义访问控制
===== kitex
https://www.cloudwego.io/zh/docs/kitex/tutorials/service-governance/access_control/

== 示例
=== brpc
https://github.com/apache/brpc/tree/master/example

=== duboo
https://github.com/apache/dubbo-samples/

=== flare
https://github.com/Tencent/flare/tree/master/flare/example

=== srpc
https://github.com/sogou/srpc/tree/master/tutorial

=== trpc
https://github.com/trpc-group/trpc-cpp/tree/main/examples
https://github.com/trpc-group/trpc-go/tree/main/examples
https://github.com/trpc-group/trpc-java-examples
https://github.com/trpc-group/trpc-java/tree/master/trpc-demo
