= 了解HTTP
:hardbreaks-option:
:revnumber: 0.0.1
:author: orient
:toc:
:toc-title: 目录
:homepage: http://orientye.com
<<<

== 历史

    HTTP/0.9: 1991年发布, 极其简单, 只有一个get命令
    HTTP/1.0: 1996年5月发布, 增加了大量内容
    HTTP/1.1: 1997年1月发布, 进一步完善HTTP协议, 是目前最流行的版本
    SPDY:     2009年谷歌发布SPDY协议, 主要解决HTTP/1.1效率不高的问题
    HTTP/2:   2015年借鉴SPDY的HTTP/2发布
    HTTP/3:   2018年借鉴google的QUIC协议

=== http1.1
1. 缓存处理: HTTP/1.0使用Pragma:no-cache + Last-Modified/If-Modified-Since来作为缓存判断的标准；HTTP/1.1引入了更多的缓存控制策略: Cache-Control、Etag/If-None-Match等。

2. 错误状态管理: HTTP/1.1新增了24个错误状态响应码, 如409(Conflict)表示请求的资源与资源的当前状态发生冲突；410(Gone)表示服务器上的某个资源被永久性的删除。

3. 范围请求: HTTP/1.1在请求头引入了range头域, 它允许只请求资源的某个部分, 即返回码是206(Partial Content), 这样就方便了开发者自由的选择以便于充分利用带宽和连接, 支持断点续传。

4. Host头: HTTP1.0中认为每台服务器都绑定一个唯一的IP地址, 因此请求消息中的URL并没有传递主机名(hostname)。但随着虚拟主机技术的发展, 在一台物理服务器上可以存在多个虚拟主机(Multi-homed Web Servers), 并且它们共享一个IP地址。HTTP1.1的请求消息和响应消息都应支持Host头域, 且请求消息中如果没有Host头域会报告一个错误(400 Bad Request)。有了Host字段, 就可以将请求发往同一台服务器上的不同网站, 为虚拟主机的兴起打下了基础。

5. 持久连接: HTTP/1.1最大的变化就是引入了持久连接(persistent connection), 在HTTP/1.1中默认开启 Connection: keep-alive, 即TCP连接默认不关闭, 可以被多个请求复用。客户端和服务器发现对方一段时间没有活动, 就可以主动关闭连接。不过规范的做法是, 客户端在最后一个请求时, 发送Connection: close, 明确要求服务器关闭TCP连接。

6. 管道机制: HTTP/1.1中引入了管道机制(pipelining), 即在同一个TCP连接中, 客户端可以同时发送多个请求。

7. 缺点:
HTTP/1.1的持久连接和管道机制允许复用TCP连接, 在一个TCP连接中, 也可以同时发送多个请求, 但是所有的数据通信都是按次序完成的, 服务器只有处理完一个回应, 才会处理下一个回应。比如客户端需要A、B两个资源, 管道机制允许浏览器同时发出A请求和B请求, 但服务器还是按照顺序, 先回应A请求, 完成后再回应B请求, 这样如果前面的回应特别慢, 后面就会有很多请求排队等着, 这种现象被称为"队头阻塞(Head-of-line blocking)"

=== http2
一、 多路复用的单一长连接
1.单一长连接在HTTP/2中, 客户端向某个域名的服务器请求页面的过程中, 只会创建一条TCP连接, 即使这页面可能包含上百个资源。单一的连接应该是HTTP2的主要优势, 它能减少TCP握手带来的时延, 同时避免了创建多个TCP连接带来的网络开销, 提高了吞吐量。
2.多路复用, HTTP2虽然只有一条TCP连接, 但是在逻辑上分成了很多stream。HTTP2把要传输的信息分割成一个个二进制帧, 首部信息会被封装到HEADER Frame, 相应的request body就放到DATA Frame, 一个帧可以看成路上的一辆车, 只要给这些车编号,让1号车都走1号门出, 2号车都走2号门出, 就把不同的http请求或者响应区分开来了。但是, 这里要求同一个请求或者响应的帧必须是有有序的, 要保证FIFO的, 但是不同的请求或者响应帧可以互相穿插。

二、 头部压缩和二进制格式
现在很多都走https, 既然是二进制加密数据, 于是HTTP2搞了个HPACK压缩来压缩头部, 减少报文大小(调试这样的协议将需要curl这样的工具, 要进一步地分析网络数据流需要类似Wireshark的http2解析器)。

三、 服务端推动Sever Push
这个功能通常被称作"缓存推送"。主要的思想是: 当一个客户端请求资源X, 而服务器知道它很可能也需要资源Y的情况下, 服务器可以在客户端发送请求前,主动将资源Y推送给客户端。
注意: server push与server notification是两码事。

== 格式
HTTP请求的起始行称为请求行, 形如GET /index.html HTTP/1.1
HTTP响应的起始行称为状态行, 形如200 ok
消息头部有很多键值对组成,多个键值对之间使用CRLF作为分隔符,也可以完全没有键值对。形如Content-Encoding: gzip

消息体是一个字符串,字符串的长度是由消息头部的Content-Length键指定的。如果没有Content-Length字段说明没有消息体,譬如GET请求就是没有消息体的,POST请求的消息体一般用来放置表单数据。GET请求的响应返回的页面内容也是放在消息体里面的。我们平时调用API返回的JSON内容都是放在消息体里面的。

Headers: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers
Methods: https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods
Status:  https://developer.mozilla.org/en-US/docs/Web/HTTP/Status

=== status code
https://en.wikipedia.org/wiki/List_of_HTTP_status_codes
1xx Informational response
2xx Success
3xx Redirection
4xx Client errors
5xx Server errors
Unofficial codes

=== GET vs POST
GET requests a representation of the specified resource. Note that GET should not be used for operations that cause side-effects, such as using it for taking actions in web applications. 
One reason for this is that GET may be used arbitrarily by robots or crawlers, which should not need to consider the side effects that a request should cause.

POST submits data to be processed (e.g., from an HTML form) to the identified resource. The data is included in the body of the request. This may result in the creation of a new resource or the updates of existing resources or both.

So essentially GET is used to retrieve remote data, and POST is used to insert/update remote data.

HTTP/1.1 specification (RFC 2616) section 9 Method Definitions contains more information on GET and POST as well as the other HTTP methods, if you are interested.
In addition to explaining the intended uses of each method, the spec also provides at least one practical reason for why GET should only be used to retrieve data:

Authors of services which use the HTTP protocol SHOULD NOT use GET based forms for the submission of sensitive data, because this will cause this data to be encoded in the Request-URI. Many existing servers, proxies, and user agents will log the request URI in some place where it might be visible to third parties. Servers can use POST-based form submission instead

Finally, an important consideration when using GET for AJAX requests is that some browsers - IE in particular - will cache the results of a GET request. So if you, for example, poll using the same GET request you will always get back the same results, even if the data you are querying is being updated server-side. One way to alleviate this problem is to make the URL unique for each request by appending a timestamp.

A POST, unlike a GET, typically has relevant information in the body of the request. (A GET should not have a body, so aside from cookies, the only place to pass info is in the URL.) 
Besides keeping the URL relatively cleaner, POST also lets you send much more information (as URLs are limited in length, for all practical purposes), and lets you send just about any type of data (file upload forms, for example, can't use GET -- they have to use POST plus a special content type/encoding).

Aside from that, a POST connotes that the request will change something, and shouldn't be redone willy-nilly. That's why you sometimes see your browser asking you if you want to resubmit form data when you hit the "back" button.

GET, on the other hand, should be idempotent -- meaning you could do it a million times and the server will do the same thing (and show basically the same result) each and every time.

1. GET使用URL或Cookie传参, 而POST将数据放在BODY中, 这个是因为HTTP协议用法的约定, 并非它们的本身区别。
2. GET方式提交的数据有长度限制, POST的数据则可以非常大, 这个是因为它们使用的操作系统和浏览器设置的不同引起的区别。也不是GET和POST本身的区别。
3. POST比GET安全, 因为数据在地址栏上"不可见", 这个说法没毛病, 但依然不是GET和POST本身的区别。

== https

    SSL/1.0: 1994年NetScape公司设计, 未发布
    SSL/2.0: 1995年NetScape公司发布, 但存在严重漏洞
    SSL/3.0: 1996年NetScape公司发布, 得到大规模应用
    TLS/1.0: 1999年互联网标准化组织(ISOC)接替NetScape公司, 发布SSL的升级版TLS/1.0
    TLS/1.1: 2006年发布
    TLS/1.2: 2008年发布
    TLS/1.2修订版: 2011年发布
    目前, 应用最广泛的是TLS/1.0和SSL/3.0, 且主流浏览器已实现TLS/1.2的支持
    TLS1.0通常被标示为SSL/3.1, TLS 1.1为SSL/3.2, TLS 1.2为SSL/3.3

=== ssl/tls握手机制
1.Client-hello 阶段
浏览器中完成地址输入后, 解析域名获得IP Host地址, 浏览器会与此Host的443(默认, 如果指定其他端口则会连接此端口)尝试连接, 也就是TLS握手协议的Client-hello, 上图的第一步.
浏览器会将"支持的加密组件"/"尝试连接到Host头"等信息发送给服务器, 并会附上一份随机生成的session ticket1.

2.Server-hello 阶段
服务器收到浏览器发送来的TLS握手请求后, 存储浏览器发送的session ticket2, 然后根据发送来的host寻找对于的服务器证书, 然后会将服务器证书, 服务器与浏览器妥协(均支持)的加密套件方法, 和一份随机生成的 session ticket 返回给浏览器.

3.Cipher-spec 阶段
浏览器收到服务器返回的证书后, 会验证证书有效性. 验证步骤大概如下:
验证证书有效期(起止时间)
验证证书域名(与浏览器地址栏中域名是否匹配)
验证证书吊销状态(CRL+OCSP)
验证证书颁发机构, 如果颁发机构是中间证书, 在验证中间证书的有效期/颁发机构/吊销状态. 一直验证到最后一层证书, 如果最后一层证书是在操作系统或浏览器内置, 那么就是可信的, 否则就是自签名. 
以上验证步骤, 需要全部通过. 否则就会显示警告.

若检查通过, 随机生成一份session ticket 3(这是浏览器生成的第二份 ticket), 通过返回证书中的公钥, 用协商的"秘钥交换算法"加密, 返回给服务器.

同时浏览器用session ticket 1(浏) & session ticket 2(服) & session ticket 3(浏)组合成session key.

服务器收到Ciper-spec后, 用配置的私钥, 解密出session ticket3, 用session ticket 1(浏)&session ticket 2(服)&session ticket 3(浏)组合成session key.

此处不难得知, 服务器与浏览器交换的最终秘钥, session key全等且未泄露(session ticket 1和session ticket 2可以抓包, 但session ticket 3是无法窃听的).

为什么session ticket 3无法窃听?
有个webtrust组织, 专门负责备案世界上各国商业与政府官方 CA 机构的公钥证书. 如果审计通过, 其他浏览器及操作系统/客户端才允许加入信任列表. 否则是不允许加入的. 如果中间人拦截了session ticket 3的响应密文, 没有私钥, 中间攻击人是解密不了的. 而要想拿到私钥, 攻击人可以做到, 就是在客户端和服务器中间搭建代理, 替换掉SSL证书, 以实现服务器返回证书时候中间替换自己的, 从而在中间拦截服务器和客户端两头的通信.但是如果这样做, 浏览器和客户端会显示非信任的颁发者, 警告

4.内容传输阶段
至此, TLS连接建立完成, 在连接销毁前, 浏览器与服务器彼此数据均通过session key来进行对称加密.

=== ssl/tls握手机制
随机数的生成:

首先客户端先发第一个随机数N1,然后服务器回了第二个随机数N2(这个过程同时把之前提到的证书发给客户端),这两个随机数都是明文的；而第三个随机数N3(这个随机数被称为Premaster secret),客户端用数字证书的公钥进行非对称加密,发给服务器；
而服务器用只有自己知道的私钥来解密,获取第三个随机数。只有,服务端和客户端都有了三个随机数N1+N2+N3,然后两端就使用这三个随机数来生成“对话密钥”,在此之后的通信都是使用这个“对话密钥”来进行对称加密解密。因为这个过程中,服务端的私钥只用来解密第三个随机数,从来没有在网络中传输过,这样的话,只要私钥没有被泄露,那么数据就是安全的。

加密套件的交换:
客户端把自身支持的一系列Cipher Suite(密钥算法套件,后文简称Cipher)[C1,C2,C3, …]发给服务器；
服务器接收到客户端的所有Cipher后,与自己支持的套件作对比,如果找到双方都支持的Cipher,则告知客户端；
客户端与服务器使用匹配的Cipher进行后续通信。如果服务器没有找到匹配的算法,客户端将给出错误信息。

== QUIC(quick udp internet connection)
相比现在广泛应用的http2+tcp+tls协议, QUIC有如下优势: 

▪ 减少了TCP三次握手及TLS握手时间

    传输层握手和TLS握手放到一起, 真正实现0RTT

▪ 改进的拥塞控制

    TCP的拥塞控制实际上包含了四个算法: 慢启动, 拥塞避免, 快速重传, 快速恢复。
    QUIC协议当前默认使用了TCP协议的Cubic拥塞控制算法,
    同时也支持CubicBytes, Reno, RenoBytes, BBR, PCC等拥塞控制算法。
    从拥塞算法本身来看, QUIC只是按照TCP协议重新实现了一遍, 那么QUIC协议到底改进在哪些方面呢？
    主要有如下几点:
    可插拔
    单调递增的Packet Number
    不允许Reneging
    更多的Ack块
    Ack Delay时间
    基于stream和connecton级别的流量控制

▪ 连接迁移:

    任何一条QUIC连接不再IP及端口四元组标识,而是以一个64位的随机数作为ID来标识。
    这样就算IP或者端口发生变化时,只要ID不变,这条连接依然维持着,上层业务逻辑感知不到变化,不会中断,也就不需要重连。
    由于这个ID是客户端随机产生的,并且长度有64位,所以冲突概率非常低。

▪ 避免队头阻塞的多路复用

▪ 前向冗余纠错

▪ 用户态实现

▪ 安全性

    TCP Header是完全明文的, QUIC除了一些必要的字段, Header也被加密。

== 缓存
浏览器第一次请求:
浏览器再次请求时:
https://github.com/fi3ework/blog/issues/35
https://imweb.io/topic/5795dcb6fb312541492eda8c

== Session
▪ URL重写
▪ Cookie

== 代理
=== 正向代理
实现:
第一种是RFC 7230 – HTTP/1.1: Message Syntax and Routing(即修订后的 RFC 2616,HTTP/1.1 协议的第一部分)描述的普通代理。这种代理扮演的是「中间人」角色,对于连接到它的客户端来说,它是服务端；对于要连接的服务端来说,它是客户端。它就负责在两端之间来回传送 HTTP 报文。

第二种是Tunneling TCP based protocols through Web proxy servers(通过 Web 代理服务器用隧道方式传输基于 TCP 的协议)描述的隧道代理。它通过 HTTP 协议正文部分(Body)完成通讯,以 HTTP 的方式实现任意基于 TCP 的应用层协议代理。这种代理使用 HTTP 的 CONNECT 方法建立连接,但 CONNECT 最开始并不是 RFC 2616 – HTTP/1.1 的一部分,直到 2014 年发布的 HTTP/1.1 修订版中,才增加了对 CONNECT 及隧道代理的描述,详见 RFC 7231 – HTTP/1.1: Semantics and Content。实际上这种代理早就被广泛实现。
对于https请求,因为无法解析出请求的具体路径和参数,所以只能采用第二种方式即隧道代理。

=== 反向代理
Q: 如何替换https请求,例如https://163.com  ==> https://qq.com
工具: charles,nginx,nodejs(eg. https://github.com/alibaba/anyproxy)等

== 性能优化
▪ 压缩
▪ 多路复用
▪ 拥塞控制
▪ 缓存

== 安全
▪ 跨站脚本攻击(Cross-Site Scripting, XSS)
▪ SQL注入(SQL Injection)
▪ 目录遍历(Directory Traversal)
▪ 会话劫持(Session Hijack)
▪ 跨站点请求伪造(Cross-Site Request Forgeries,CSRF)
▪ 点击劫持(Clickjacking)
▪ DoS攻击(Denial of Service Attack)

== 工程实践
=== RESTful
RESTful:
Q: 如何设计restful风格的登录,注册
A: https://www.zhihu.com/question/20346297

示例:
https://oatpp.io/examples/crud/#user-service

RESTful API设计:
参考: https://docs.github.com/en/rest

=== GraphQL
https://graphql.org/
https://www.infoq.cn/article/lvqguc3vqx-t3ppvckht

=== 双工通信
Comet:
https://zh.wikipedia.org/wiki/Comet_(web%E6%8A%80%E6%9C%AF)
https://en.wikipedia.org/wiki/Comet_(programming)

websocket:
https://en.wikipedia.org/wiki/WebSocket