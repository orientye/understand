= 了解skynet
:hardbreaks-option:
:revnumber: 0.0.1
:author: orient
:toc:
:homepage: http://orientye.com
<<<

== 设计思想
设计综述: https://blog.codingnow.com/2012/09/the_design_of_skynet.html
框架: https://github.com/cloudwu/skynet/wiki/GettingStarted#%E6%A1%86%E6%9E%B6-framework
网络: https://github.com/cloudwu/skynet/wiki/GettingStarted#%E7%BD%91%E7%BB%9C
服务: https://github.com/cloudwu/skynet/wiki/GettingStarted#%E6%9C%8D%E5%8A%A1-service
消息: https://github.com/cloudwu/skynet/wiki/GettingStarted#%E6%B6%88%E6%81%AF-message
外部服务: https://github.com/cloudwu/skynet/wiki/GettingStarted#%E5%A4%96%E9%83%A8%E6%9C%8D%E5%8A%A1--external-service
集群: https://github.com/cloudwu/skynet/wiki/GettingStarted#%E9%9B%86%E7%BE%A4-cluster

- 编写好的c文件，在编译成so库以后，在某个时机，调用该so库api的句柄，会被加载到一个modules列表中，一般这样的模块会被要求定义4种接口create，init，signal和release。要创建一个新的，运行该业务逻辑的上下文环境时，则从modules列表中，找到对应的so库句柄，并且调用create接口，创建一个该类业务模块的数据实例，并且创建一个上下文环境（context），引用该类业务的接口和数据实例，该context会被存放在一个统一存放context的列表中，这种context被称之为服务。

- 一个服务，默认不会执行任何逻辑，需要别人向它发出请求时，才会执行对应的逻辑（定时器也是通过消息队列，告诉指定服务，要执行定时事件），并在需要时返回结果给请求者。请求者往往也是其他服务。服务间的请求、响应和推送，并不是直接调用对方的api来执行，而是通过一个消息队列，也就是说，不论是请求、回应还是推送，都需要通过这个消息队列转发到另一个服务中。skynet的消息队列，分为两级，一个全局消息队列，他包含一个头尾指针，分别指向两个隶属于指定服务的次级消息队列。skynet中的每一个服务，都有一个唯一的、专属的次级消息队列。

- skynet一共有4种线程，monitor线程用于检测节点内的消息是否堵住，timer线程运行定时器，socket线程进行网络数据的收发，worker线程则负责对消息队列进行调度（worker线程的数量，可以通过配置表指定）。消息调度规则是，每条worker线程，每次从全局消息队列中pop出一个次级消息队列，并从次级消息队列中pop出一条消息，并找到该次级消息队列的所属服务，将消息传给该服务的callback函数，执行指定业务，当逻辑执行完毕时，再将次级消息队列push回全局消息队列中。因为每个服务只有一个次级消息队列，每当一条worker线程，从全局消息队列中pop出一个次级消息队列时，其他线程是拿不到同一个服务，并调用callback函数，因此不用担心一个服务同时在多条线程内消费不同的消息，一个服务执行，不存在并发，线程是安全的。

- socket线程、timer线程甚至是worker线程，都有可能会往指定服务的次级消息队列中push消息，push函数内有加一个自旋锁，避免同时多条线程同时向一个次级消息队列push消息的惨局。

- 从上面讨论可以得出如下结论，我们所写的不同的业务逻辑，可以运行在不同的独立的沙盒环境中，他们之间是通过消息队列来进行交互的。worker、timer和socket线程里运行的模块，都有机会向特定的服务push消息，他们是消息的生产者，而worker线程内的模块，同时也是消息的消费者（确切的说，应该是那些服务）
注意：服务模块要将数据，通过socket发送给客户端时，并不是将数据写入消息队列，而是通过管道从worker线程，发送给socket线程，并交由socket转发。此外，设置定时器也不走消息队列，而是直接将在定时器模块，加入一个timer_node。其实这样也很好理解，因为timer和socket线程内运行的模块并不是这里的context，因此消息队列他们无法消费。

- 此外，上面的论述，只涉及到c服务模块，并未讨论lua服务的内容，我们所有的lua服务，均是依附于一个叫snlua的c模块来运行的，lua服务每次收到一个消息，就会产生一个协程（事实上，skynet每个服务均有一个协程池，lua服务收到消息时，会优先去池子里取一个协程出来，这里为了理解方便，就视为收到一个消息，就创建一个协程吧），并通过协程执行注册函数。

参考:
https://blog.codingnow.com/2012/09/the_design_of_skynet.html
https://manistein.github.io/blog/post/server/skynet/skynet%E6%BA%90%E7%A0%81%E8%B5%8F%E6%9E%90/

== 源码结构
- 3rd目录
https://github.com/cloudwu/skynet/tree/master/3rd
jemalloc: 内存分配
lpeg: 提供给lua的正则表达式 http://www.inf.puc-rio.br/~roberto/lpeg/
lua: lua语言支持
lua-md5: 提供给lua的md5

- skynet-src目录
https://github.com/cloudwu/skynet/tree/master/skynet-src
包含skynet最核心机制的模块，包括逻辑入口、加载C服务代码的skynet_module模块、运行和管理服务实例的skynet_context模块、skynet消息队列、定时器和socket模块等

- service-src目录
https://github.com/cloudwu/skynet/tree/master/service-src
依附于skynet核心模块的c服务，如用于日志输出的logger服务，用于运行lua脚本snlua的c服务等

- lualib-src目录
https://github.com/cloudwu/skynet/tree/master/lualib-src
提供C层级的api调用，如调用socket模块的api，调用skynet消息发送，注册回调函数的api，甚至是对C服务的调用等，并导出lua接口，供lua层使用

- lualib目录
https://github.com/cloudwu/skynet/tree/master/lualib
包含调用lua服务的辅助函数，方便应用层调用skynet的一些基本服务；包含对一些c模块或lua模块调用的辅助函数

- service目录
https://github.com/cloudwu/skynet/tree/master/service
lua层服务，依附于snlua这个c服务，这个目录包含skynet lua层级的一些基本服务，比如启动lua层级服务的bootstrap服务，gate服务，供lua层创建新服务的launcher服务等

- 目录层次:
----
    ┌─────────────┐           ┌─────────────┐
    │  service    │           │   lualib    │          lua
    └─────────────┘           └─────────────┘
    ―――――――――――――――――――――――――――――――――――――――――
    ┌─────────────┐           ┌─────────────┐
    │service-src  │           │  lualib-src │          c
    └─────────────┘           └─────────────┘
    ―――――――――――――――――――――――――――――――――――――――――
                ┌─────────────┐        
                │  skynet-src │                        c
                └─────────────┘
    ―――――――――――――――――――――――――――――――――――――――――
                ┌─────────────┐        
                │     3rd     │                        c
                └─────────────┘
----

== 核心元素
=== 服务与模块
隔离方式:

    线程隔离
        优点: 不同服务运行在同一进程，调用是函数调用，性能较好
        缺点: 隔离度低
    进程隔离
        优点: 隔离度高
        缺点: 网络通信更复杂，此外，每个服务一个进程(一类服务往往又多个实例，每个实例都是一个进程)，管理成本升高。

skynet对线程隔离和进程隔离均提供了支持。一个进程可以承载很多服务实例(相同类型或不同类型)，每个服务实例一个线程。

这个服务实例，可以认为是skynet_context/服务；
这个服务类型，可以认为是skynet_module/模块。

[source, c]
.https://github.com/cloudwu/skynet/blob/master/skynet-src/skynet_server.c
----
struct skynet_context {
	void * instance;
	struct skynet_module * mod;
	void * cb_ud;
	skynet_cb cb;
	struct message_queue *queue;
	ATOM_POINTER logfile;
	uint64_t cpu_cost;	// in microsec
	uint64_t cpu_start;	// in microsec
	char result[32];
	uint32_t handle;
	int session_id;
	ATOM_INT ref;
	int message_count;
	bool init;
	bool endless;
	bool profile;

	CHECKCALLING_DECL
};
----
void * instance: 由指定module的create函数，创建的数据实例指针，同一类服务可能有多个实例，每个服务都应该有自己的数据
struct skynet_module * mod: 服务module的指针
void * cb_ud: 调用callback函数时，回传给callback的userdata，一般是instance指针
skynet_cb cb: 服务的消息回调函数，一般在skynet_module的init函数里指定
struct message_queue *queue: 服务专属的次级消息队列指针
char result[32]: 操作skynet_context的返回值，会写到这里
uint32_t handle: 标识唯一context的服务id
int session_id: 在发出请求后，收到对方的返回消息时，通过session_id来匹配一个返回，对应哪个请求

创建一个新的服务，首先要先找到对应服务的module，在创建完module实例并完成初始化以后，还需要创建一个skynet_context上下文，并将module实例和module模块和这个context关联起来，最后放置于skynet_context list中，一个个独立的沙盒环境就这样被创建出来了。创建一个新的skynet_context时，会往slot列表中放，当一个消息送达一个context时，其callback函数就会被调用，callback函数一般在module的init函数里指定，调用callback函数时，会传入userdata（一般是instance指针），source（发送方的服务id），type（消息类型），msg和sz（数据及其大小），每个服务的callback处理各自的逻辑。这里其实可以将modules视为工厂，而skynet_context则是该工厂创建出来的实例，而这些实例，则是通过handle_storage来进行管理:
[source, c]
.https://github.com/cloudwu/skynet/blob/master/skynet-src/skynet_handle.c
----
struct handle_name {
	char * name;
	uint32_t handle;
};

struct handle_storage {
	struct rwlock lock;

	uint32_t harbor;
	uint32_t handle_index;
	int slot_size;
	struct skynet_context ** slot;
	
	int name_cap;
	int name_count;
	struct handle_name *name;
};
----

参考:
https://zhuanlan.zhihu.com/p/360760006

模块:
[source, c]
.https://github.com/cloudwu/skynet/blob/master/skynet-src/skynet_module.h
----
struct skynet_module {
        const char * name;
        void * module;
        skynet_dl_create create;
        skynet_dl_init init;
        skynet_dl_release release;
        skynet_dl_signal signal;
};
----
void * module: so库的dl句柄

[source, c]
.https://github.com/cloudwu/skynet/blob/master/skynet-src/skynet_module.c
----
#define MAX_MODULE_TYPE 32

struct modules {
	int count;
	struct spinlock lock;
	const char * path;
	struct skynet_module m[MAX_MODULE_TYPE];
};

static struct modules * M = NULL;
----

=== 消息
[source, c]
.https://github.com/cloudwu/skynet/blob/master/skynet-src/skynet_mq.h
----
struct skynet_message {
	uint32_t source;
	int session;
	void * data;
	size_t sz;
};
----

[source, c]
.https://github.com/cloudwu/skynet/blob/master/skynet-src/skynet_mq.c
----
struct message_queue {
	struct spinlock lock;
	uint32_t handle;
	int cap;
	int head;
	int tail;
	int release;
	int in_global;
	int overload;
	int overload_threshold;
	struct skynet_message *queue;
	struct message_queue *next;
};

struct global_queue {
	struct message_queue *head;
	struct message_queue *tail;
	struct spinlock lock;
};
----

skynet的消息调度: https://blog.codingnow.com/2012/09/the_design_of_skynet.html

image::skynet/img/skynet.png[]

Q: 有哪些不足?
目前的设计中，全局队列是一个单点，所有工作线程都可能并发读写这个全局队列。为了减少锁碰撞的概率，云风已经做了不少的优化，比如为不同的工作线程配置了不同的策略，有的会一次尽可能多的处理单个服务中的消息；有的在处理完一个服务中的单条消息后，就立刻切换到下一个服务。这样，每个工作线程去获取锁的频率就不太相同，同时，任务繁重的服务也得以尽量在同一个工作线程多做一些事情，而不必频繁进出全局队列。
但这个优化并没有从根本上改进设计。
另一个问题是，每个服务的消息队列是多写一读模式。只有唯一的一个读取者，也就是关联服务；却有众多潜在的写入者。比如log服务，所有其它服务都可能向它写入消息。它的队列的锁的碰撞概率就很高。
还有，服务不能保证在同一物理线程上工作。

Q: 改进思路?
https://blog.codingnow.com/2020/06/skynet_concurrency_model.html
https://blog.codingnow.com/2021/01/new_schedule.html

==== 生产
https://github.com/cloudwu/skynet/blob/master/skynet-src/skynet_server.c
skynet_context_push和skynet_context_send都会调用skynet_mq_push
skynet_send(lua里也会调过来), timer, socket里都会调用skynet_context_push
harbor里会用到skynet_context_send

向一个服务发送消息的本质，就是向该服务的次级消息队列里push消息，多个worker线程可能会同时向同一个服务的次级消息队列push一个消息，次级消息队列push和pop操作，都有加一个spinlock，从而保证了线程安全。

==== 消费
[source, c]
.https://github.com/cloudwu/skynet/blob/master/skynet-src/skynet_start.c
----
static void *
thread_worker(void *p) {
	struct worker_parm *wp = p;
	int id = wp->id;
	int weight = wp->weight;
	struct monitor *m = wp->m;
	struct skynet_monitor *sm = m->m[id];
	skynet_initthread(THREAD_WORKER);
	struct message_queue * q = NULL;
	while (!m->quit) {
		q = skynet_context_message_dispatch(sm, q, weight);
		if (q == NULL) {
			if (pthread_mutex_lock(&m->mutex) == 0) {
				++ m->sleep;
				// "spurious wakeup" is harmless,
				// because skynet_context_message_dispatch() can be call at any time.
				if (!m->quit)
					pthread_cond_wait(&m->cond, &m->mutex);
				-- m->sleep;
				if (pthread_mutex_unlock(&m->mutex)) {
					fprintf(stderr, "unlock mutex error");
					exit(1);
				}
			}
		}
	}
	return NULL;
}
----

[source, c]
.https://github.com/cloudwu/skynet/blob/master/skynet-src/skynet_server.c
----
struct message_queue * 
skynet_context_message_dispatch(struct skynet_monitor *sm, struct message_queue *q, int weight) {
	if (q == NULL) {
		q = skynet_globalmq_pop();
		if (q==NULL)
			return NULL;
	}

	uint32_t handle = skynet_mq_handle(q);

	struct skynet_context * ctx = skynet_handle_grab(handle);
	if (ctx == NULL) {
		struct drop_t d = { handle };
		skynet_mq_release(q, drop_message, &d);
		return skynet_globalmq_pop();
	}

	int i,n=1;
	struct skynet_message msg;

	for (i=0;i<n;i++) {
		if (skynet_mq_pop(q,&msg)) {
			skynet_context_release(ctx);
			return skynet_globalmq_pop();
		} else if (i==0 && weight >= 0) {
			n = skynet_mq_length(q);
			n >>= weight;
		}
		int overload = skynet_mq_overload(q);
		if (overload) {
			skynet_error(ctx, "May overload, message queue length = %d", overload);
		}

		skynet_monitor_trigger(sm, msg.source , handle);

		if (ctx->cb == NULL) {
			skynet_free(msg.data);
		} else {
			dispatch_message(ctx, &msg);
		}

		skynet_monitor_trigger(sm, 0,0);
	}

	assert(q == ctx->queue);
	struct message_queue *nq = skynet_globalmq_pop();
	if (nq) {
		// If global mq is not empty , push q back, and return next queue (nq)
		// Else (global mq is empty or block, don't push q back, and return q again (for next dispatch)
		skynet_globalmq_push(q);
		q = nq;
	} 
	skynet_context_release(ctx);

	return q;
}

static void
dispatch_message(struct skynet_context *ctx, struct skynet_message *msg) {
	assert(ctx->init);
	CHECKCALLING_BEGIN(ctx)
	pthread_setspecific(G_NODE.handle_key, (void *)(uintptr_t)(ctx->handle));
	int type = msg->sz >> MESSAGE_TYPE_SHIFT;
	size_t sz = msg->sz & MESSAGE_TYPE_MASK;
	if (ctx->logfile) {
		skynet_log_output(ctx->logfile, msg->source, type, msg->session, msg->data, sz);
	}
	++ctx->message_count;
	int reserve_msg;
	if (ctx->profile) {
		ctx->cpu_start = skynet_thread_time();
		reserve_msg = ctx->cb(ctx, ctx->cb_ud, type, msg->session, msg->source, msg->data, sz);
		uint64_t cost_time = skynet_thread_time() - ctx->cpu_start;
		ctx->cpu_cost += cost_time;
	} else {
		reserve_msg = ctx->cb(ctx, ctx->cb_ud, type, msg->session, msg->source, msg->data, sz);
	}
	if (!reserve_msg) {
		skynet_free(msg->data);
	}
	CHECKCALLING_END(ctx)
}
----

整个worker线程的消费流程是：
a) worker线程每次，从global_mq中弹出一个次级消息队列，如果次级消息队列为空，则该worker线程投入睡眠，timer线程每隔2.5毫秒会唤醒一条睡眠中的worker线程，并重新尝试从全局消息队列中pop一个次级消息队列出来，当次级消息队列不为空时，进入下一步
b) 根据次级消息的handle，找出其所属的服务（一个skynet_context实例）指针，从次级消息队列中，pop出n条消息（受weight值影响），并且将其作为参数，传给skynet_context的cb函数，并调用它
c) 当完成callback函数调用时，就从global_mq中再pop一个次级消息队列中，供下一次使用，并将本次使用的次级消息队列push回global_mq的尾部
d) 返回第a步

skynet在启动时，会创建若干条worker线程（由配置指定），这些worker线程被创建以后，会不断得从global_mq里pop出一个次级消息队列来，每个worker线程，每次只pop一个次级消息队列，然后再从次级消息队列中，pop一到若干条消息出来（受权重值影响），最后消息将作为参数传给对应服务的callback函数（每个服务只有一个专属的次级消息队列），当callback执行完时，worker线程会将次级消息队列push回global_mq里，这样就完成了消息的消费。
在这个过程中，因为每个worker线程会从global_mq里pop一个次级消息队列出来，此时其他worker线程就不能从global_mq里pop出同一个次级消息队列，也就是说，一个服务不能同时在多个worker线程内调用callback函数，从而保证了线程安全。

=== c服务
- https://github.com/cloudwu/skynet/blob/master/service-src/service_gate.c

- https://github.com/cloudwu/skynet/blob/master/service-src/service_harbor.c

- https://github.com/cloudwu/skynet/blob/master/service-src/service_logger.c

- https://github.com/cloudwu/skynet/blob/master/service-src/service_snlua.c
snlua是运行lua脚本的服务

=== lua服务
https://github.com/cloudwu/skynet/tree/master/service/
https://github.com/cloudwu/skynet/tree/master/service/bootstrap.lua
https://github.com/cloudwu/skynet/tree/master/service/launcher.lua

bootstrap.lua和launcher.lua服务在<<启动,启动>>里介绍
https://zhuanlan.zhihu.com/p/84653538

=== lua消息
==== 发送
[source, lua]
.https://github.com/cloudwu/skynet/blob/master/lualib/skynet.lua
----
function skynet.call(addr, typename, ...)
	local tag = session_coroutine_tracetag[running_thread]
	if tag then
		c.trace(tag, "call", 2)
		c.send(addr, skynet.PTYPE_TRACE, 0, tag)
	end

	local p = proto[typename]
	local session = c.send(addr, p.id , nil , p.pack(...))
	if session == nil then
		error("call to invalid address " .. skynet.address(addr))
	end
	return p.unpack(yield_call(addr, session))
end

local function yield_call(service, session)
	watching_session[session] = service
	session_id_coroutine[session] = running_thread
	local succ, msg, sz = coroutine_yield "SUSPEND"
	watching_session[session] = nil
	if not succ then
		error "call failed"
	end
	return msg,sz
end
----

skynet.send(address, typename, ...)这条API可以把一条类别为typename的消息发送给address。它会先经过事先注册的pack函数打包 ... 的内容。

skynet.send是一条非阻塞API，发送完消息后，coroutine会继续向下运行，这期间服务不会重入。

skynet.call(address, typename, ...)这条API则不同，它会在内部生成一个唯一session ，并向address提起请求，并阻塞等待对 session的回应(可以不由address回应)。当消息回应后，还会通过之前注册的unpack函数解包。表面上看起来，就是发起了一次RPC，并阻塞等待回应。call 不支持超时，如果有超时的需求，可以参考TimeOutCall: https://github.com/cloudwu/skynet/wiki/TimeOutCall或 https://blog.codingnow.com/2015/10/timeout_skynetcall.html 。

尤其需要留意的是，skynet.call仅仅阻塞住当前的coroutine，而没有阻塞整个服务。在等待回应期间，服务照样可以响应其他请求。所以，尤其要注意，在skynet.call之前获得的服务内的状态，到返回后，很有可能改变。

call实现:
例如，对于skynet.call，其实是生成了一个对当前服务来说唯一的session号调用yield给框架发送 "CALL" 这个指令。框架中的 resume 捕获到 "CALL" 后，就会把 session 和 coroutine 对象记录在表中，然后挂起 coroutine ，结束当前的回调函数。等待 skynet 底层框架后后续消息进来时再处理。（实际上，这里还会处理 skynet.fork 创建的额外线程）
当收到回应消息时，会根据 session 号找到之前记录的 coroutine 对象。然后 resume 之前没有做完的业务即可。从应用层角度看起来，就只是一次阻塞调用而已。
参考: https://blog.codingnow.com/2015/12/skynet_coroutine.html

参考: https://github.com/cloudwu/skynet/wiki/LuaAPI#%E6%B6%88%E6%81%AF%E6%8E%A8%E9%80%81%E5%92%8C%E8%BF%9C%E7%A8%8B%E8%B0%83%E7%94%A8

==== 处理
发送方和接收方都会处理: 根据prototype == 1来决定是发送方还是接收方
[source, lua]
.https://github.com/cloudwu/skynet/blob/master/lualib/skynet.lua
----
function skynet.dispatch_message(...)
	local succ, err = pcall(raw_dispatch_message,...)
	while true do
		local co = tremove(fork_queue,1)
		if co == nil then
			break
		end
		local fork_succ, fork_err = pcall(suspend,co,coroutine_resume(co))
		if not fork_succ then
			if succ then
				succ = false
				err = tostring(fork_err)
			else
				err = tostring(err) .. "\n" .. tostring(fork_err)
			end
		end
	end
	assert(succ, tostring(err))
end

local function raw_dispatch_message(prototype, msg, sz, session, source)
	-- skynet.PTYPE_RESPONSE = 1, read skynet.h
	if prototype == 1 then
		local co = session_id_coroutine[session]
		if co == "BREAK" then
			session_id_coroutine[session] = nil
		elseif co == nil then
			unknown_response(session, source, msg, sz)
		else
			local tag = session_coroutine_tracetag[co]
			if tag then c.trace(tag, "resume") end
			session_id_coroutine[session] = nil
			suspend(co, coroutine_resume(co, true, msg, sz))
		end
	else
		local p = proto[prototype]
		if p == nil then
			if prototype == skynet.PTYPE_TRACE then
				-- trace next request
				trace_source[source] = c.tostring(msg,sz)
			elseif session ~= 0 then
				c.send(source, skynet.PTYPE_ERROR, session, "")
			else
				unknown_request(session, source, msg, sz, prototype)
			end
			return
		end

		local f = p.dispatch
		if f then
			local co = co_create(f)
			session_coroutine_id[co] = session
			session_coroutine_address[co] = source
			local traceflag = p.trace
			if traceflag == false then
				-- force off
				trace_source[source] = nil
				session_coroutine_tracetag[co] = false
			else
				local tag = trace_source[source]
				if tag then
					trace_source[source] = nil
					c.trace(tag, "request")
					session_coroutine_tracetag[co] = tag
				elseif traceflag then
					-- set running_thread for trace
					running_thread = co
					skynet.trace()
				end
			end
			suspend(co, coroutine_resume(co, session,source, p.unpack(msg,sz)))
		else
			trace_source[source] = nil
			if session ~= 0 then
				c.send(source, skynet.PTYPE_ERROR, session, "")
			else
				unknown_request(session, source, msg, sz, proto[prototype].name)
			end
		end
	end
end
----

dispatch函数会在收到每条类别对应的消息时被回调。消息先经过unpack函数，返回值被传入dispatch 。每条消息的处理都工作在一个独立的 coroutine 中，看起来以多线程方式工作。但记住，在同一个lua虚拟机（同一个lua服务）中，永远不可能出现多线程并发的情况。你的 lua脚本不需要考虑线程安全的问题，但每次有阻塞api调用时，脚本都可能发生重入，这点务必小心。CriticalSection模块可以帮助你减少并发带来的复杂性。

时序问题:
同一个skynet服务中的一条消息处理中，如果调用了一个阻塞API ，那么它会被挂起。挂起过程中，这个服务可以响应其它消息。这很可能造成时序问题，要非常小心处理。
换句话说，一旦你的消息处理过程有外部请求，那么先到的消息未必比后到的消息先处理完。且每个阻塞调用之后，服务的内部状态都未必和调用前的一致（因为别的消息处理过程可能改变状态）。
queue模块可以帮助你回避这些伪并发引起的复杂性。
参考: https://github.com/cloudwu/skynet/wiki/CriticalSection

==== 回应
[source, lua]
.https://github.com/cloudwu/skynet/blob/master/lualib/skynet.lua
----
function skynet.ret(msg, sz)
	msg = msg or ""
	local tag = session_coroutine_tracetag[running_thread]
	if tag then c.trace(tag, "response") end
	local co_session = session_coroutine_id[running_thread]
	session_coroutine_id[running_thread] = nil
	if co_session == 0 then
		if sz ~= nil then
			c.trash(msg, sz)
		end
		return false	-- send don't need ret
	end
	local co_address = session_coroutine_address[running_thread]
	if not co_session then
		error "No session"
	end
	local ret = c.send(co_address, skynet.PTYPE_RESPONSE, co_session, msg, sz)
	if ret then
		return true
	elseif ret == false then
		-- If the package is too large, returns false. so we should report error back
		c.send(co_address, skynet.PTYPE_ERROR, co_session, "")
	end
	return false
end

function skynet.response(pack)
	pack = pack or skynet.pack

	local co_session = assert(session_coroutine_id[running_thread], "no session")
	session_coroutine_id[running_thread] = nil
	local co_address = session_coroutine_address[running_thread]
	if co_session == 0 then
		--  do not response when session == 0 (send)
		return function() end
	end
	local function response(ok, ...)
		if ok == "TEST" then
			return unresponse[response] ~= nil
		end
		if not pack then
			error "Can't response more than once"
		end

		local ret
		if unresponse[response] then
			if ok then
				ret = c.send(co_address, skynet.PTYPE_RESPONSE, co_session, pack(...))
				if ret == false then
					-- If the package is too large, returns false. so we should report error back
					c.send(co_address, skynet.PTYPE_ERROR, co_session, "")
				end
			else
				ret = c.send(co_address, skynet.PTYPE_ERROR, co_session, "")
			end
			unresponse[response] = nil
			ret = ret ~= nil
		else
			ret = false
		end
		pack = nil
		return ret
	end
	unresponse[response] = co_address

	return response
end
----

回应一个消息可以使用skynet.ret(message, size)。它会将message size对应的消息附上当前消息的session ，以及skynet.PTYPE_RESPONSE这个类别，发送给当前消息的来源source。由于某些历史原因（早期的 skynet 默认消息类别是文本，而没有经过特殊编码），这个API被设计成传递一个C指针和长度，而不是经过当前消息的pack函数打包。或者你也可以省略size而传入一个字符串。

由于skynet中最常用的消息类别是 lua ，这种消息是经过 skynet.pack 打包的，所以惯用法是 skynet.ret(skynet.pack(...)) 。btw，skynet.pack(...) 返回一个 lightuserdata 和一个长度，符合 skynet.ret 的参数需求；与之对应的是 skynet.unpack(message, size) 它可以把一个 C 指针加长度的消息解码成一组 Lua 对象。

skynet.ret 在同一个消息处理的 coroutine 中只可以被调用一次，多次调用会触发异常。有时候，你需要挂起一个请求，等将来时机满足，再回应它。而回应的时候已经在别的 coroutine 中了。针对这种情况，你可以调用 skynet.response(skynet.pack) 获得一个闭包，以后调用这个闭包即可把回应消息发回。这里的参数 skynet.pack 是可选的，你可以传入其它打包函数，默认即是 skynet.pack 。

skynet.response 返回的闭包可用于延迟回应。调用它时，第一个参数通常是 true 表示是一个正常的回应，之后的参数是需要回应的数据。如果是 false ，则给请求者抛出一个异常。它的返回值表示回应的地址是否还有效。如果你仅仅想知道回应地址的有效性，那么可以在第一个参数传入 "TEST" 用于检测。

注：skynet.ret 和 skynet.response 都是非阻塞API。

参考: https://github.com/cloudwu/skynet/wiki/LuaAPI#%E6%B6%88%E6%81%AF%E5%88%86%E5%8F%91%E5%92%8C%E5%9B%9E%E5%BA%94

=== 消息数据指针
skynet 服务间传递的消息在底层是用 C 指针/lightuserdata 加一个数字长度来表示的。当一条消息进入 skynet 服务时，该消息会根据消息类别分发到对应的类别处理流程，（由 skynet.register_protocol ) 。这个消息数据指针是由发送消息方生成的，通常是由 skynet_malloc 分配的内存块。默认情况下，框架会在之后调用 skynet_free 释放这个指针。

如果你想阻止框架调用 skynet_free 可以使用 skynet.forward_type 取代 skynet.start 调用。和 skynet.start 不同，skynet_forwardtype 需要多传递一张表，表示哪些类的消息不需要框架调用 skynet_free 。例如：

skynet.forward_type( { [skynet.PTYPE_LUA] = skynet.PTYPE_USER }, start_func )
表示 PTYPE_LUA 类的消息处理完毕后，不要调用 skynet_free 释放消息数据指针。这通常用于做消息转发。

这里由于框架默认定义了 PTYPE_LUA 的处理流程，而 skynet.register_protocol 不准重定义这个流程，所以我们可以重定向消息类型为 PTYPE_USER 。

还有另一种情况也需要用 skynet.forward_type 阻止释放消息数据指针：如果针对某种特别的消息，传了一个复杂对象（而不是由 skynet_malloc 分配出来的整块内存；那么就可以让框架忽略数据指针，而自己调用对象的释放函数去释放这个指针。

=== 序列化
消息的序列化
在上一节里我们提到，每类消息都应该定义该类型的打包和解包函数。

当我们能确保消息仅在同一进程间流通的时候，便可以直接把 C 对象编码成一个指针。因为进程相同，所以 C 指针可以有效传递。但是，skynet 默认支持有多节点模式，消息有可能被传到另一台机器的另一个进程中。这种情况下，每条消息都必须是一块连续内存，我们就必须对消息进行序列化操作。

skynet 默认提供了一套对 lua 数据结构的序列化方案。即上一节提到的 skynet.pack 以及 skynet.unpack 函数。skynet.pack 可以将一组 lua 对象序列化为一个由 malloc 分配出来的 C 指针加一个数字长度。你需要考虑 C 指针引用的数据块何时释放的问题。当然，如果你只是将 skynet.pack 填在消息处理框架里时，框架解决了这个管理问题。skynet 将 C 指针发送到其他服务，而接收方会在使用完后释放这个指针。

如果你想把这个序列化模块做它用，建议使用另一个 api skynet.packstring 。和 skynet.pack 不同，它返回一个 lua string 。而 skynet.unpack 即可以处理 C 指针，也可以处理 lua string 。

这个序列化库支持 string, boolean, number, lightuserdata, table 这些类型，但对 lua table 的 metatable 支持非常有限，所以尽量不要用其打包带有元方法的 lua 对象。

参考: https://github.com/cloudwu/skynet/wiki/LuaAPI#%E6%B6%88%E6%81%AF%E7%9A%84%E5%BA%8F%E5%88%97%E5%8C%96

== 网络
=== Socket
https://github.com/cloudwu/skynet/wiki/Socket
[source, c]
.https://github.com/cloudwu/skynet/blob/master/skynet-src/socket_server.c
----
struct socket {
        uintptr_t opaque;
        struct wb_list high;
        struct wb_list low;
        int64_t wb_size;
        struct socket_stat stat;
        volatile uint32_t sending;
        int fd;
        int id;
        uint8_t protocol;
        uint8_t type;
        uint16_t udpconnecting;
        int64_t warn_size;
        union {
                int size;
                uint8_t udp_address[UDP_ADDRESS_SIZE];
        } p;
        struct spinlock dw_lock;
        int dw_offset;
        const void * dw_buffer;
        size_t dw_size;
};

struct socket_server {
        volatile uint64_t time;
        int recvctrl_fd;
        int sendctrl_fd;
        int checkctrl;
        poll_fd event_fd;
        int alloc_id;
        int event_n;
        int event_index;
        struct socket_object_interface soi;
        struct event ev[MAX_EVENT];
        struct socket slot[MAX_SOCKET];
        char buffer[MAX_INFO];
        uint8_t udpbuffer[MAX_UDP_PACKAGE];
        fd_set rfds;
};
----

socket线程:

    skynet_socket_poll()
        socket_server_poll()

参考: https://manistein.github.io/blog/post/server/skynet/skynet%E7%BD%91%E7%BB%9C%E6%9C%BA%E5%88%B6/

=== SocketChannel
https://github.com/cloudwu/skynet/wiki/SocketChannel

=== Sproto
https://github.com/cloudwu/skynet/wiki/Sproto
https://blog.codingnow.com/2014/07/sproto.html

缺省值:
现在有sproto.default可以生成一个缺省结构，可以自己绑定到metatable里。如果需要自定义默认值，应该用sproto去描述出来，然后生成数据表，绑定到metatable。

命名空间:
命名空间是支持的，类型可以嵌套定义。

协议可以自己加前缀，类似C的api命名风格namespace_foobar。

参考: https://groups.google.com/g/skynet-users/c/My-984mPhDk

== 定时器
定时器线程:
[source, c]
.https://github.com/cloudwu/skynet/blob/master/skynet-src/skynet_start.c
----
static void *
thread_timer(void *p) {
	struct monitor * m = p;
	skynet_initthread(THREAD_TIMER);
	for (;;) {
		skynet_updatetime();
		skynet_socket_updatetime();
		CHECK_ABORT
		wakeup(m,m->count-1);
		usleep(2500);
		if (SIG) {
			signal_hup();
			SIG = 0;
		}
	}
	// wakeup socket thread
	skynet_socket_exit();
	// wakeup all worker thread
	pthread_mutex_lock(&m->mutex);
	m->quit = 1;
	pthread_cond_broadcast(&m->cond);
	pthread_mutex_unlock(&m->mutex);
	return NULL;
}
----
在定时器线程里生产，在worker线程里消费。
调用dispatch_list()里进行分发：https://github.com/cloudwu/skynet/blob/master/skynet-src/skynet_timer.c

定时轮实现:
tick: 0.00025秒会执行一次
定时器精度: 0.01秒

struct timer: https://github.com/cloudwu/skynet/blob/master/skynet-src/skynet_timer.c

== 启动

- 由c main函数启动

- main()
[source, c]
.https://github.com/cloudwu/skynet/blob/master/skynet-src/skynet_main.c
----
	skynet_globalinit(); //线程局部存储，主要记录各个线程类型
	skynet_env_init(); //初始化全局lua_state, 保存一些全局的key, value

	luaL_initcodecache(); //https://github.com/cloudwu/skynet/wiki/CodeCache
	struct lua_State *L = luaL_newstate();
	luaL_openlibs(L);	// link lua lib

	//配置相关
	config.thread =  optint("thread",8);
	config.module_path = optstring("cpath","./cservice/?.so");
	config.harbor = optint("harbor", 1);
	config.bootstrap = optstring("bootstrap","snlua bootstrap");
	config.daemon = optstring("daemon", NULL);
	config.logger = optstring("logger", NULL);
	config.logservice = optstring("logservice", "logger");
	config.profile = optboolean("profile", 1);

	lua_close(L);

	skynet_start(&config);
	skynet_globalexit(); //清理工作
----

- skynet_start()
[source, c]
.https://github.com/cloudwu/skynet/blob/master/skynet-src/skynet_start.c
----
	skynet_harbor_init(config->harbor);
	skynet_handle_init(config->harbor);
	skynet_mq_init();
	skynet_module_init(config->module_path);
	skynet_timer_init();
	skynet_socket_init();
	skynet_profile_enable(config->profile);

	bootstrap(ctx, config->bootstrap);

	start(config->thread);

	// harbor_exit may call socket send, so it should exit before socket_free
	skynet_harbor_exit();
	skynet_socket_free();
----

- bootstrap()
[source, c]
.https://github.com/cloudwu/skynet/blob/master/skynet-src/skynet_start.c
----
	int sz = strlen(cmdline);//(cmdline 对应缺省配置：snlua bootstrap)
	char name[sz+1];
	char args[sz+1];
	int arg_pos;
	sscanf(cmdline, "%s", name);  
	arg_pos = strlen(name);
	if (arg_pos < sz) {
		while(cmdline[arg_pos] == ' ') {
			arg_pos++;
		}
		strncpy(args, cmdline + arg_pos, sz);
	} else {
		args[0] = '\0';
	}
	struct skynet_context *ctx = skynet_context_new(name, args);//启动引导服务，默认情况下name为snlua，args为bootstrap.lua
	if (ctx == NULL) {
		skynet_error(NULL, "Bootstrap error : %s\n", cmdline);
		skynet_context_dispatchall(logger);
		exit(1);
	}
----

- snlua服务
[source, c]
.https://github.com/cloudwu/skynet/blob/master/service-src/service_snlua.c
----
int snlua_init(struct snlua *l, struct skynet_context *ctx, const char * args) {
    int sz = strlen(args);
    char * tmp = skynet_malloc(sz);
    memcpy(tmp, args, sz);
    skynet_callback(ctx, l , launch_cb);
    const char * self = skynet_command(ctx, "REG", NULL);
    uint32_t handle_id = strtoul(self+1, NULL, 16);
    // it must be first message
    skynet_send(ctx, 0, handle_id, PTYPE_TAG_DONTCOPY,0, tmp, sz);
    return 0;
}

launch_cb(struct skynet_context * context, void *ud, int type, int session, uint32_t source , const void * msg, size_t sz) {
	assert(type == 0 && session == 0);
	struct snlua *l = ud;
	skynet_callback(context, NULL, NULL);
	int err = init_cb(l, context, msg, sz);
	if (err) {
		skynet_command(context, "EXIT", NULL);
	}

	return 0;
}

init_cb(struct snlua *l, struct skynet_context *ctx, const char * args, size_t sz) {
	lua_State *L = l->L;
	l->ctx = ctx;
	lua_gc(L, LUA_GCSTOP, 0);
	lua_pushboolean(L, 1);  /* signal for libraries to ignore env. vars. */
	lua_setfield(L, LUA_REGISTRYINDEX, "LUA_NOENV");
	luaL_openlibs(L);
	luaL_requiref(L, "skynet.profile", init_profile, 0);

	int profile_lib = lua_gettop(L);
	// replace coroutine.resume / coroutine.wrap
	lua_getglobal(L, "coroutine");
	lua_getfield(L, profile_lib, "resume");
	lua_setfield(L, -2, "resume");
	lua_getfield(L, profile_lib, "wrap");
	lua_setfield(L, -2, "wrap");

	lua_settop(L, profile_lib-1);

	lua_pushlightuserdata(L, ctx);
	lua_setfield(L, LUA_REGISTRYINDEX, "skynet_context");
	luaL_requiref(L, "skynet.codecache", codecache , 0);
	lua_pop(L,1);

	lua_gc(L, LUA_GCGEN, 0, 0);

	const char *path = optstring(ctx, "lua_path","./lualib/?.lua;./lualib/?/init.lua");
	lua_pushstring(L, path);
	lua_setglobal(L, "LUA_PATH");
	const char *cpath = optstring(ctx, "lua_cpath","./luaclib/?.so");
	lua_pushstring(L, cpath);
	lua_setglobal(L, "LUA_CPATH");
	const char *service = optstring(ctx, "luaservice", "./service/?.lua");
	lua_pushstring(L, service);
	lua_setglobal(L, "LUA_SERVICE");
	const char *preload = skynet_command(ctx, "GETENV", "preload");
	lua_pushstring(L, preload);
	lua_setglobal(L, "LUA_PRELOAD");

	lua_pushcfunction(L, traceback);
	assert(lua_gettop(L) == 1);

	//执行loader.lua，由loader加载执行bootstrap.lua
	const char * loader = optstring(ctx, "lualoader", "./lualib/loader.lua"); 
	int r = luaL_loadfile(L,loader);
	if (r != LUA_OK) {
		skynet_error(ctx, "Can't load %s : %s", loader, lua_tostring(L, -1));
		report_launcher_error(ctx);
		return 1;
	}
	lua_pushlstring(L, args, sz);
	r = lua_pcall(L,1,0,1);
	if (r != LUA_OK) {
		skynet_error(ctx, "lua loader error : %s", lua_tostring(L, -1));
		report_launcher_error(ctx);
		return 1;
	}
	lua_settop(L,0);
	if (lua_getfield(L, LUA_REGISTRYINDEX, "memlimit") == LUA_TNUMBER) {
		size_t limit = lua_tointeger(L, -1);
		l->mem_limit = limit;
		skynet_error(ctx, "Set memory limit to %.2f M", (float)limit / (1024 * 1024));
		lua_pushnil(L);
		lua_setfield(L, LUA_REGISTRYINDEX, "memlimit");
	}
	lua_pop(L, 1);

	lua_gc(L, LUA_GCRESTART, 0);

	return 0;
}
----

- bootstrap.lua
[source, lua]
.https://github.com/cloudwu/skynet/blob/master/service/bootstrap.lua
----
local skynet = require "skynet"
local harbor = require "skynet.harbor"
local service = require "skynet.service"
require "skynet.manager"	-- import skynet.launch, ...

skynet.start(function()
	local standalone = skynet.getenv "standalone"

	local launcher = assert(skynet.launch("snlua","launcher")) //启动launcher服务
	skynet.name(".launcher", launcher)

	local harbor_id = tonumber(skynet.getenv "harbor" or 0) //不推荐
	if harbor_id == 0 then
		assert(standalone ==  nil)
		standalone = true
		skynet.setenv("standalone", "true")

		local ok,slave= pcall(skynet.newservice, "cdummy")
		if not ok then
			skynet.abort()
		end
		skynet.name(".cslave", slave)

	else
		if standalone then
			if not pcall(skynet.newservice,"cmaster") then
				skynet.abort()
			end
		end

		local ok,slave= pcall(skynet.newservice, "cslave")
		if not ok then
			skynet.abort()
		end
		skynet.name(".cslave", slave)
	end

	if standalone then
		local datacenter = skynet.newservice "datacenterd" //启动datacenterd服务
		skynet.name("DATACENTER", datacenter)
	end
	skynet.newservice "service_mgr" //启动service_mgr服务

	local enablessl = skynet.getenv "enablessl"
	if enablessl then
		service.new("ltls_holder", function ()
			local c = require "ltls.init.c"
			c.constructor()
		end)
	end

	pcall(skynet.newservice,skynet.getenv "start" or "main") //调用skynet.newservice启动在config.start字段指定的脚本服务，这个就是逻辑入口点
	skynet.exit()
end)
----

- launcher.lua
https://github.com/cloudwu/skynet/blob/master/service/launcher.lua

- start函数
[source, c]
.https://github.com/cloudwu/skynet/blob/master/skynet-src/skynet_start.c
----
static void
start(int thread) {
    pthread_t pid[thread+3];
    //...
    create_thread(&pid[0], thread_monitor, m);
    create_thread(&pid[1], thread_timer, m);
    create_thread(&pid[2], thread_socket, m);

    for (i=0;i<thread;i++) {
        create_thread(&pid[i+3], thread_worker, &wp[i]);
    }

    for (i=0;i<thread+3;i++) {
        pthread_join(pid[i], NULL); 
    }
    //...
}
----

== 外部服务
https://github.com/cloudwu/skynet/wiki/GettingStarted#%E5%A4%96%E9%83%A8%E6%9C%8D%E5%8A%A1--external-service

== 集群
如果仅仅是单台物理机的计算能力不足，那么最优的策略是选用更多核心的机器，在同一进程内，skynet可以保持最高的并行能力，充分利用物理机的多核心，远比增加物理机性价比高得多。

即使在API使用层面看起来在不同机器和进程上的服务可以像在同一进程内的服务一样的协作，但差别并不仅仅是消息传递速度不同。搭建集群不是一件简单的事情，skynet本身要解决的核心问题是提供在同一机器上充分利用多核的处理能力，而并没有提供一套完善的集群方案。它只是提供了一些搭建集群所需要的必要基础设施。

=== master/slave模式
每个skynet进程都是一个slave节点。
但其中一个slave节点可以通过配置standalone来多启动一个cmaster服务，用来协调slave组网。
对于每个slave节点，都内置一个harbor服务用于和其它slave节点通讯。

每个skynet服务都有一个全网唯一的地址，这个地址是一个32bit数字，其高8bit标识着它所属slave的号码。即harborid。
在master/slave网络中，id为 0是保留的。所以最多可以有255个slave节点。

在master/slave模式中，节点内的消息通讯和节点间的通讯是透明的。
skynet核心会根据目的地址的harbor id来决定是直接投递消息，还是把消息转发给harbor服务但是，两种方式的成本大为不同（可靠性也有所区别），在设计系统构架时，应充分考虑两者的性能差异，不应视为相同的行为。

这种模式的缺点也非常明显：它被设计为对单台物理机计算能力不足情况下的补充。所以忽略了系统一部分故障的处理机制，而把整个网络视为一体。即，整个网络中任意一个节点都必须正常工作，节点间的联系也不可断开。这就好比你一台物理机上如果插了多块CPU，任意一个损坏都会导致整台机器不能正常工作一样。

所以，不要把这个模式用于跨机房的组网。
所有slave节点都应该在同一局域网内（最好在同一交换机下）。不应该把系统设计成可以任意上线或下线slave的模式。

slave的组网机制也限制了这一点。如果一个slave意外退出网络，这个harbor id就被废弃，不可再使用。这样是为了防止网络中其它服务还持有这个断开的slave上的服务地址；而一个新的进程以相同的harbor id接入时，是无法保证旧地址和新地址不重复的。

如果非要用master/slave模式来实现有一定弹性的集群。skynet还是提供了非常有限的支持：
local harbor = require "skynet.harbor"
harbor.link(id) 用来监控一个slave是否断开。如果harbor id对应的slave正常，这个api将阻塞。当slave断开时，会立刻返回。
harbor.linkmaster() 用来在slave上监控和master的连接是否正常。这个 api 多用于异常时的安全退出（因为当slave和master断开后，没有手段可以恢复）。
harbor.connect(id) 和 harbor.link 相反。如果harbor id对应的slave没有连接，这个 api 将阻塞，一直到它连上来才返回。
harbor.queryname(name) 可以用来查询全局名字或本地名字对应的服务地址。它是一个阻塞调用。
harbor.globalname(name, handle) 注册一个全局名字。如果 handle 为空，则注册自己。skynet.name 和 skynet.register 是用其实现的。

可以利用这组api来解决做一次跨节点远程调用，因为节点断开而无法收到回应的问题。注意：link和linkmaster都有一定的开销，所以最好在一个节点中只用少量服务调用它来监控组网状态。由它再来分发到业务层。

对于harbor id不可复用的问题。可以在Config中将harbor配置为引用一个系统环境变量。然后给skynet编写一个启动脚本，利用一个额外的程序去某个管理器中获得尚未使用过的harbor id，设入环境变量，再启动skynet进程。这些skynet没有给出现成的解决方案，需要你自己来实现。

参考:
https://github.com/cloudwu/skynet/wiki/Cluster#masterslave-mode

=== cluster模式
skynet提供了更具弹性的集群方案。它可以和master/slave共存。也就是说，可以部署多组master/slave网络，然后再用cluster将它们联系起来。当然，比较简单的结构是，每个集群中每个节点都配置为单节点模式(将harbor id设置为 0)。
cluster的具体设计可以参考: http://blog.codingnow.com/2017/03/skynet_cluster.html

工作原理:
在每个skynet节点（单个进程）内，启动一个叫clusterd的服务。所有需要跨进程的消息投递都先把消息投递到这个服务上，再由它来转发到网络。

在cluster集群中的每个节点都使用一个字符串来命名，由一个配置表来把名字关联到ip地址和端口上。理论上同一个skynet进程可以监听多个消息入口，只要用名字区分开，绑定在不同的端口就可以了。

为了和本地消息做区分，cluster提供了单独的库及一组新的API，这个库是对clusterd服务通讯的浅封装。当然，也允许建立一个代理服务，把代理服务它收到的消息，绑上指定名字，转发到clusterd。这样就和之前的master/slave模式几乎没有区别了。

参考:
https://github.com/cloudwu/skynet/wiki/Cluster#cluster-mode
https://blog.codingnow.com/2017/03/skynet_cluster.html

=== 参考
https://github.com/cloudwu/skynet/wiki/GettingStarted#%E9%9B%86%E7%BE%A4-cluster
https://github.com/cloudwu/skynet/wiki/Cluster

== 数据共享
https://github.com/cloudwu/skynet/wiki/ShareData

== 性能优化
https://github.com/cloudwu/skynet/wiki/TinyService
https://github.com/cloudwu/skynet/wiki/CodeCache

== API
https://github.com/cloudwu/skynet/wiki/LuaAPI

== DB
https://github.com/cloudwu/skynet/tree/master/lualib/skynet/db

https://blog.codingnow.com/2013/10/skynet_lua_coroutine.html
https://blog.codingnow.com/2014/03/skynet_socket_channel.html

https://blog.codingnow.com/2014/03/mmzb_db.html
https://blog.codingnow.com/2014/03/mmzb_db_2.html
https://blog.codingnow.com/2014/03/mmzb_mongodb.html
https://blog.codingnow.com/2014/03/mmzb_redis.html

== 实例
https://github.com/cloudwu/skynet_sample
mmo: https://blog.codingnow.com/2015/04/skynet_mmo.html

== 参考
https://github.com/cloudwu/skynet/wiki
https://blog.codingnow.com/eo/skynet/
https://manistein.github.io/blog/post/server/skynet/skynet%E6%BA%90%E7%A0%81%E8%B5%8F%E6%9E%90/
https://github.com/cloudwu/skynet/wiki/ThirdPartyDocument
