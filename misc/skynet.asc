= 了解skynet
:hardbreaks-option:
:revnumber: 0.0.1
:author: orient
:toc:
:homepage: http://orientye.com
<<<

== 设计思想
框架: https://github.com/cloudwu/skynet/wiki/GettingStarted#%E6%A1%86%E6%9E%B6-framework
网络: https://github.com/cloudwu/skynet/wiki/GettingStarted#%E7%BD%91%E7%BB%9C
服务: https://github.com/cloudwu/skynet/wiki/GettingStarted#%E6%9C%8D%E5%8A%A1-service
消息: https://github.com/cloudwu/skynet/wiki/GettingStarted#%E6%B6%88%E6%81%AF-message
外部服务: https://github.com/cloudwu/skynet/wiki/GettingStarted#%E5%A4%96%E9%83%A8%E6%9C%8D%E5%8A%A1--external-service
集群: https://github.com/cloudwu/skynet/wiki/GettingStarted#%E9%9B%86%E7%BE%A4-cluster

== 程序结构

== 源码结构

- 3rd目录: lua语言支持;jemalloc等

- skynet-src目录：包含skynet最核心机制的模块，包括逻辑入口、加载C服务代码的skynet_module模块、运行和管理服务实例的skynet_context模块、skynet消息队列、定时器和socket模块等

- service-src目录：依附于skynet核心模块的c服务，如用于日志输出的logger服务，用于运行lua脚本snlua的c服务等

- lualib-src目录：提供C层级的api调用，如调用socket模块的api，调用skynet消息发送，注册回调函数的api，甚至是对C服务的调用等，并导出lua接口，供lua层使用

- lualib目录：包含调用lua服务的辅助函数，方便应用层调用skynet的一些基本服务；包含对一些c模块或lua模块调用的辅助函数

- service目录：lua层服务，依附于snlua这个c服务，这个目录包含skynet lua层级的一些基本服务，比如启动lua层级服务的bootstrap服务，gate服务，供lua层创建新服务的launcher服务等

== 核心元素

=== 模块

struct skynet_module {
        const char * name;
        void * module; //so库的dl句柄
        skynet_dl_create create;
        skynet_dl_init init;
        skynet_dl_release release;
        skynet_dl_signal signal;
};

=== 服务

struct skynet_context {
        void * instance;
        struct skynet_module * mod;
        void * cb_ud;
        skynet_cb cb;
        struct message_queue *queue;//专属次级消息队列
        FILE * logfile;
        uint64_t cpu_cost;      // in microsec
        uint64_t cpu_start;     // in microsec
        char result[32];
        uint32_t handle;
        int session_id;
        int ref;
        int message_count;
        bool init;
        bool endless;
        bool profile;

        CHECKCALLING_DECL
};

=== 消息

Q：  为什么是两级消息队列

Q：  有哪些不足

Q： 全局队列的问题与优化

Q： 次级队列的问题与优化

 消息-生产与消费

●  生产

●  消费

向一个服务发送消息的本质，就是向该服务的次级消息队列里push消息，多个worker线程可能会同时向同一个服务的次级消息队列
push一个消息，次级消息队列push和pop操作，都有加一个spinlock，从而保证了线程安全。

整个worker线程的消费流程是：
a) worker线程每次，从global_mq中弹出一个次级消息队列，如果次级消息队列为空，则该worker线程投入睡眠，timer线程每
隔2.5毫秒会唤醒一条睡眠中的worker线程，并重新尝试从全局消息队列中pop一个次级消息队列出来，当次级消息队列不为空时，
进入下一步
b) 根据次级消息的handle，找出其所属的服务（一个skynet_context实例）指针，从次级消息队列中，pop出n条消息（受
weight值影响），并且将其作为参数，传给skynet_context的cb函数，并调用它
c) 当完成callback函数调用时，就从global_mq中再pop一个次级消息队列中，供下一次使用，并将本次使用的次级消息队列push
回global_mq的尾部
d) 返回第a步

 消息-lua协程

示例：
 
function foo (a)
   print("foo", a)
   return coroutine.yield(2*a)
 end

 co = coroutine.create(function (a,b)
       print("co-body", a, b)
       local r = foo(a+1)
       print("co-body", r)
       local r, s = coroutine.yield(a+b, a-b)
       print("co-body", r, s)
       return b, "end"
 end)

 print("main", coroutine.resume(co, 1, 10))
 print("main", coroutine.resume(co, "r"))
 print("main", coroutine.resume(co, "x", "y"))
 print("main", coroutine.resume(co, "x", "y"))

 co-body 1       10
 foo     2
 main    true    4
 co-body r
 main    true    11      -9
 co-body x       y
 main    true    10      end
 main    false   cannot resume dead coroutine

 消息-lua层消息处理

lualib/skynet.lua

 消息-lua层消息处理

lualib/skynet.lua

raw_dispatch_message()
    skynet.PTYPE_RESPONSE ！=1  其他服务发过来的消息

-- skynet.lua
local function raw_dispatch_message(prototype, msg, sz, session, source, ...)
    -- skynet.PTYPE_RESPONSE = 1, read skynet.h
    if prototype == 1 then
        ... -- 暂不讨论，直接忽略
    else
        local p = proto[prototype]    -- 找到与消息类型对应的解析协议
        if p == nil then

... --error 处理

            return
        end
        local f = p.dispatch  -- 获取消息处理函数，可以视为该类协议的消息回调函数
        if f then
            local ref = watching_service[source]
            if ref then
                watching_service[source] = ref + 1
            else
                watching_service[source] = 1
            end
            local co = co_create(f)   -- 如果协程池内有空闲的协程，则直接返回，否则创建一个
新的协程，该协程用于执行该类协议的消息处理函数dispatch
            session_coroutine_id[co] = session
            session_coroutine_address[co] = source
            suspend(co, coroutine.resume(co, session,source, p.unpack(msg,sz, ...)))  -- 
启动并执行协程，将结果返回给suspend
        else
            unknown_request(session, source, msg, sz, proto[prototype].name)
        end
    end
end

 消息-lua层消息处理

lualib/skynet.lua

【1】 发起一个同步rpc调用，向目标服务的次级消息队列插入一个消息
【2】挂起当前协程，yield_call里的coroutine_yield(“CALL”, session)使得当前协程挂起，并在此时suspend执行记录
session为key，协程地址为value，将其写入一个table session_id_coroutine中，此时协程等待对方返回消息
【3】当目标服务返回结果时，先根据session找到先前挂起的协程地址，然后通过resume函数唤醒他，此时call返回结果，一次
同步rpc调用就结束了。

【1】根据消息的类型，找到对应的先前注册好的消息解析协议
【2】获取一个协程（如果协程池中有空闲的协程，则直接获取，否则重新创建一个），并让该协程执行消息处理协议的回调函数
dispatch
【3】启动并执行协程，将协程执行的结果返回给suspend函数，返回结果，就是一个coroutine挂起的原因，这个suspend函数，
就是针对coroutine挂起的不同原因，做专门的处理

== 网络

skynet-src/socket_server.c

struct socket {
        uintptr_t opaque;
        struct wb_list high;
        struct wb_list low;
        int64_t wb_size;
        struct socket_stat stat;
        volatile uint32_t sending;
        int fd;
        int id;
        uint8_t protocol;
        uint8_t type;
        uint16_t udpconnecting;
        int64_t warn_size;
        union {
                int size;
                uint8_t udp_address[UDP_ADDRESS_SIZE];
        } p;
        struct spinlock dw_lock;
        int dw_offset;
        const void * dw_buffer;
        size_t dw_size;
};

struct socket_server {
        volatile uint64_t time;
        int recvctrl_fd;
        int sendctrl_fd;
        int checkctrl;
        poll_fd event_fd;
        int alloc_id;
        int event_n;
        int event_index;
        struct socket_object_interface soi;
        struct event ev[MAX_EVENT];
        struct socket slot[MAX_SOCKET];
        char buffer[MAX_INFO];
        uint8_t udpbuffer[MAX_UDP_PACKAGE];
        fd_set rfds;
};

== 主流程

- 由c main函数启动

- main() https://github.com/cloudwu/skynet/blob/master/skynet-src/skynet_main.c

[source,c]
----
    skynet_globalinit(); //线程局部存储，主要记录各个线程类型
    skynet_env_init(); //初始化全局lua_state, 保存一些全局的key, value

    luaL_initcodecache(); //https://github.com/cloudwu/skynet/wiki/CodeCache
    struct lua_State *L = luaL_newstate();
    luaL_openlibs(L);	// link lua lib

    //配置相关
    config.thread =  optint("thread",8);
    config.module_path = optstring("cpath","./cservice/?.so");
    config.harbor = optint("harbor", 1);
    config.bootstrap = optstring("bootstrap","snlua bootstrap");
    config.daemon = optstring("daemon", NULL);
    config.logger = optstring("logger", NULL);
    config.logservice = optstring("logservice", "logger");
    config.profile = optboolean("profile", 1);

    lua_close(L);

    skynet_start(&config);
    skynet_globalexit(); //清理工作
----

- skynet_start() https://github.com/cloudwu/skynet/blob/master/skynet-src/skynet_start.c

- bootstrap()      https://github.com/cloudwu/skynet/blob/master/skynet-src/skynet_start.c

    (cmdline 对应缺省配置：snlua bootstrap)

- snlua服务      service-src/service_snlua.c

- bootstrap.lua      service/bootstrap.lua

    最后调用skynet.newservice启动在config.start字段指定的脚本服务，这个就是逻辑入口点。

- start() https://github.com/cloudwu/skynet/blob/master/skynet-src//skynet_start.c

== 集群
https://github.com/cloudwu/skynet/wiki/Cluster

== 实例
https://github.com/cloudwu/skynet_sample

== 参考
https://github.com/cloudwu/skynet/wiki
