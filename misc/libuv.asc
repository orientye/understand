= libuv
:hardbreaks-option:
:revnumber: 0.0.1
:author: orient
:toc:
:toclevels: 5
:homepage: http://orientye.com
<<<

== 概览
=== 架构
http://docs.libuv.org/en/v1.x/design.html
https://www.youtube.com/watch?v=sGTRmPiXD4Y[A deep dive into libuv]

=== Handles and requests
https://docs.libuv.org/en/v1.x/design.html#handles-and-requests

=== The I/O loop
https://docs.libuv.org/en/v1.x/design.html#the-i-o-loop

=== releases
https://github.com/libuv/libuv/releases
io_uring支持: https://github.com/libuv/libuv/releases/tag/v1.45.0

== 结构

== 模块

=== Core
https://github.com/libuv/libuv/blob/v1.x/src/unix/core.c
https://github.com/libuv/libuv/blob/v1.x/src/win/core.c

以unix为例:
[source, c]
.https://github.com/libuv/libuv/blob/v1.x/src/unix/core.c
----
int uv_run(uv_loop_t* loop, uv_run_mode mode) {
  int timeout;
  int r;
  int can_sleep;

  r = uv__loop_alive(loop);
  if (!r)
    uv__update_time(loop);

  /* Maintain backwards compatibility by processing timers before entering the
   * while loop for UV_RUN_DEFAULT. Otherwise timers only need to be executed
   * once, which should be done after polling in order to maintain proper
   * execution order of the conceptual event loop. */
  if (mode == UV_RUN_DEFAULT && r != 0 && loop->stop_flag == 0) {
    uv__update_time(loop);
    uv__run_timers(loop);
  }

  while (r != 0 && loop->stop_flag == 0) {
    can_sleep =
        uv__queue_empty(&loop->pending_queue) &&
        uv__queue_empty(&loop->idle_handles);

    uv__run_pending(loop);
    uv__run_idle(loop);
    uv__run_prepare(loop);

    timeout = 0;
    if ((mode == UV_RUN_ONCE && can_sleep) || mode == UV_RUN_DEFAULT)
      timeout = uv__backend_timeout(loop);

    uv__metrics_inc_loop_count(loop);

    uv__io_poll(loop, timeout);

    /* Process immediate callbacks (e.g. write_cb) a small fixed number of
     * times to avoid loop starvation.*/
    for (r = 0; r < 8 && !uv__queue_empty(&loop->pending_queue); r++)
      uv__run_pending(loop);

    /* Run one final update on the provider_idle_time in case uv__io_poll
     * returned because the timeout expired, but no events were received. This
     * call will be ignored if the provider_entry_time was either never set (if
     * the timeout == 0) or was already updated b/c an event was received.
     */
    uv__metrics_update_idle_time(loop);

    uv__run_check(loop);
    uv__run_closing_handles(loop);

    uv__update_time(loop);
    uv__run_timers(loop);

    r = uv__loop_alive(loop);
    if (mode == UV_RUN_ONCE || mode == UV_RUN_NOWAIT)
      break;
  }

  /* The if statement lets gcc compile it to a conditional store. Avoids
   * dirtying a cache line.
   */
  if (loop->stop_flag != 0)
    loop->stop_flag = 0;

  return r;
}
----

=== 网络

=== 文件
处理方式: run blocking file I/O operations in a thread pool

以uv_fs_open为例:

    uv_fs_open() - src/unix/fs.c
        POST - src/unix/fs.c

POST宏:
[source, c]
.https://github.com/libuv/libuv/blob/master/src/unix/fs.c
----
#define POST                                                                  \
  do {                                                                        \
    if (cb != NULL) {                                                         \
      uv__req_register(loop, req);                                            \
      uv__work_submit(loop,                                                   \
                      &req->work_req,                                         \
                      UV__WORK_FAST_IO,                                       \
                      uv__fs_work,                                            \
                      uv__fs_done);                                           \
      return 0;                                                               \
    } else {                                                                  \
      uv__fs_work(&req->work_req);                                            \
      return req->result;                                                     \
    }                                                                         \
  }                                                                           \
  while (0)
----
如果请求有回调函数，表明是异步处理，将文件处理封装成任务对象，提交给任务队列，线程池从任务队列中获取任务执行uv__fs_work，处理完毕后通知主线程调用uv__fs_done；如果没有回调函数，说明是同步处理，直接在主线程中调用uv__fs_work函数。

==== 参考
http://docs.libuv.org/en/v1.x/design.html#file-i-o
https://blog.libtorrent.org/2012/10/asynchronous-disk-io/

== 参考
https://github.com/libuv/libuv