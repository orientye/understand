= libuv
:hardbreaks-option:
:revnumber: 0.0.1
:author: orient
:toc:
:toclevels: 5
:homepage: http://orientye.com
<<<

== 概览
=== 架构
http://docs.libuv.org/en/v1.x/design.html

=== Handles and requests
https://docs.libuv.org/en/v1.x/design.html#handles-and-requests

=== The I/O loop
https://docs.libuv.org/en/v1.x/design.html#the-i-o-loop

=== releases
https://github.com/libuv/libuv/releases
io_uring支持: https://github.com/libuv/libuv/releases/tag/v1.45.0

== 结构

== 模块

=== Core

=== 网络

=== 文件
处理方式: run blocking file I/O operations in a thread pool

以uv_fs_open为例:

    uv_fs_open() - src/unix/fs.c
        POST - src/unix/fs.c

POST宏:
[source, c]
.https://github.com/libuv/libuv/blob/master/src/unix/fs.c
----
#define POST                                                                  \
  do {                                                                        \
    if (cb != NULL) {                                                         \
      uv__req_register(loop, req);                                            \
      uv__work_submit(loop,                                                   \
                      &req->work_req,                                         \
                      UV__WORK_FAST_IO,                                       \
                      uv__fs_work,                                            \
                      uv__fs_done);                                           \
      return 0;                                                               \
    } else {                                                                  \
      uv__fs_work(&req->work_req);                                            \
      return req->result;                                                     \
    }                                                                         \
  }                                                                           \
  while (0)
----
如果请求有回调函数，表明是异步处理，将文件处理封装成任务对象，提交给任务队列，线程池从任务队列中获取任务执行uv__fs_work，处理完毕后通知主线程调用uv__fs_done；如果没有回调函数，说明是同步处理，直接在主线程中调用uv__fs_work函数。

==== 参考
http://docs.libuv.org/en/v1.x/design.html#file-i-o
https://blog.libtorrent.org/2012/10/asynchronous-disk-io/

== 参考
https://github.com/libuv/libuv