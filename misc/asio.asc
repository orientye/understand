= asio
:hardbreaks-option:
:revnumber: 0.0.1
:author: orient
:toc:
:toclevels: 5
:homepage: http://orientye.com
<<<

== overview
https://www.boost.org/doc/libs/1_84_0/doc/html/boost_asio/overview.html

=== 主要思想
https://www.boost.org/doc/libs/1_84_0/doc/html/boost_asio/overview/rationale.html
https://www.boost.org/doc/libs/1_84_0/doc/html/boost_asio/overview/basics.html

=== Asynchronous Model
https://www.boost.org/doc/libs/1_84_0/doc/html/boost_asio/overview/model.html

=== Core Concepts and Functionality
https://www.boost.org/doc/libs/1_84_0/doc/html/boost_asio/overview/core.html

==== The Proactor Design Pattern: Concurrency Without Threads
https://www.boost.org/doc/libs/1_84_0/doc/html/boost_asio/overview/core/async.html

==== Threads and Boost.Asio
https://www.boost.org/doc/libs/1_84_0/doc/html/boost_asio/overview/core/threads.html

Asynchronous completion handlers will only be called from threads that are currently calling io_context::run().

==== Strands: Use Threads Without Explicit Locking
https://www.boost.org/doc/libs/1_84_0/doc/html/boost_asio/overview/core/strands.html

A strand is defined as a strictly sequential invocation of event handlers (i.e. no concurrent invocation). Use of strands allows execution of code in a multithreaded program without the need for explicit locking (e.g. using mutexes).

==== Buffers
https://www.boost.org/doc/libs/1_84_0/doc/html/boost_asio/overview/core/buffers.html

==== Streams, Short Reads and Short Writes
https://www.boost.org/doc/libs/1_84_0/doc/html/boost_asio/overview/core/streams.html

==== Reactor-Style Operations
https://www.boost.org/doc/libs/1_84_0/doc/html/boost_asio/overview/core/reactor.html

==== Line-Based Operations
https://www.boost.org/doc/libs/1_84_0/doc/html/boost_asio/overview/core/line_based.html

==== Custom Memory Allocation
https://www.boost.org/doc/libs/1_84_0/doc/html/boost_asio/overview/core/allocation.html

==== Per-Operation Cancellation
https://www.boost.org/doc/libs/1_84_0/doc/html/boost_asio/overview/core/cancellation.html

==== Handler Tracking
https://www.boost.org/doc/libs/1_84_0/doc/html/boost_asio/overview/core/handler_tracking.html

==== Concurrency Hints
https://www.boost.org/doc/libs/1_84_0/doc/html/boost_asio/overview/core/concurrency_hint.html

=== Composition and Completion Tokens
https://www.boost.org/doc/libs/1_84_0/doc/html/boost_asio/overview/composition.html

==== Stackless Coroutines
https://www.boost.org/doc/libs/1_84_0/doc/html/boost_asio/overview/composition/coroutine.html

==== Stackful Coroutines
https://www.boost.org/doc/libs/1_84_0/doc/html/boost_asio/overview/composition/spawn.html

==== Futures
https://www.boost.org/doc/libs/1_84_0/doc/html/boost_asio/overview/composition/futures.html

==== C++20 Coroutines Support
https://www.boost.org/doc/libs/1_84_0/doc/html/boost_asio/overview/composition/cpp20_coroutines.html

==== Resumable C++20 Coroutines (experimental)
https://www.boost.org/doc/libs/1_84_0/doc/html/boost_asio/overview/composition/coro.html

==== Deferred Operations (experimental)
https://www.boost.org/doc/libs/1_84_0/doc/html/boost_asio/overview/composition/deferred.html

==== Promises (experimental)
https://www.boost.org/doc/libs/1_84_0/doc/html/boost_asio/overview/composition/promises.html

==== Co-ordinating Parallel Operations (experimental)
https://www.boost.org/doc/libs/1_84_0/doc/html/boost_asio/overview/composition/parallel_group.html

==== Compositions as Asynchronous Operations
https://www.boost.org/doc/libs/1_84_0/doc/html/boost_asio/overview/composition/compose.html

==== Completion Token Adapters
https://www.boost.org/doc/libs/1_84_0/doc/html/boost_asio/overview/composition/token_adapters.html

==== Type Erasure, Separate Compilation and Virtual Functions
https://www.boost.org/doc/libs/1_84_0/doc/html/boost_asio/overview/composition/type_erasure.html

==== Customising Immediate Completion
https://www.boost.org/doc/libs/1_84_0/doc/html/boost_asio/overview/composition/immediate_completion.html

== io_context
io_context其实就相当于eventloop
鼓励one thread one loop
多个thread运行一个io_context.run(), 需要同步, 可以利用io_context::strand同步

https://www.boost.org/doc/libs/1_84_0/doc/html/boost_asio/reference/io_context.

通过调用 io_context::run() 来启动事件循环，这个循环会阻塞，等待任何异步操作完成，然后调用其对应的完成处理程序（回调函数）。
所有异步操作的回调都在执行 run() 的线程中被调用。

== coroutine

== buffer

== tutorial
https://www.boost.org/doc/libs/1_84_0/doc/html/boost_asio/tutorial.html

== examples
https://www.boost.org/doc/libs/1_84_0/doc/html/boost_asio/examples.html

== 参考
https://www.boost.org/doc/libs/1_84_0/doc/html/boost_asio.html
