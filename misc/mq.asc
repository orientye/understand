= MQ
:revnumber: 0.0.1
:author: orient
:toc:
:homepage: http://orientye.com
<<<

== 概念
- 作用: 解耦，削峰，异步
- 缺点: 给系统增加了复杂性

- 适用范围

    可以考虑使用MQ的情况:
        不关心执行结果
        数据驱动的任务依赖
        异步返回执行时间较长
    不太会考虑使用MQ的情况:
        比较关注执行结果，通常采用RPC

- 死信队列

    死信队列充当错误和失败的消息的临时存储。

    对于消费失败且重试后依然失败的消息，云消息队列 RocketMQ 版不会立丢弃，
    而是将消息转发至指定的队列中，即死信队列，这些消息即为死信消息。
    当消费失败的原因排查并解决后，可以重发这些死信消息，让消费者重新消费。

    https://help.aliyun.com/zh/apsaramq-for-rocketmq/cloud-message-queue-rocketmq-4-x-series/user-guide/dead-letter-queues
    https://support.huaweicloud.com/usermanual-hrm/hrm-ug-023.html

== 选型

    ActiveMQ(2003)
        broker太重，量一大就卡，基本很少使用了
    RabbitMQ(2006)
        Erlang生态上不如Java
        对消息堆积和分布式没有Kafka/RocketMQ支持的好
    Kafka(2010)
    RocketMQ(2011)
    Pulsar(2012)

- 参考
https://support.huaweicloud.com/intl/en-us/productdesc-hrm/hrm-pd-005.html
https://github.com/doocs/advanced-java/blob/main/docs/high-concurrency/why-mq.md#kafkaactivemqrabbitmqrocketmq-%E6%9C%89%E4%BB%80%E4%B9%88%E4%BC%98%E7%BC%BA%E7%82%B9
https://juejin.cn/post/7096095180536676365
https://www.infoq.cn/article/s*RvY8D1jrNIsfOJylPE
https://www.51cto.com/article/678990.html

== RabbitMQ
=== 概览
基于Erlang开发

架构:
https://www.cloudamqp.com/img/blog/exchanges-topic-fanout-direct.png

release:
https://www.rabbitmq.com/versions.html
https://www.rabbitmq.com/changelog.html

=== Exchange
==== 概念
A binding is a "link" that you set up to bind a queue to an exchange.

The routing key is a message attribute the exchange looks at when deciding how to route the message to queues (depending on exchange type).

==== 类别
- Direct Exchange
https://www.rabbitmq.com/tutorials/amqp-concepts.html#exchange-direct

- Topic Exchange
https://www.rabbitmq.com/tutorials/amqp-concepts.html#exchange-topic

- Fanout Exchange
https://www.rabbitmq.com/tutorials/amqp-concepts.html#exchange-fanout

- Headers Exchange
https://www.rabbitmq.com/tutorials/amqp-concepts.html#exchange-headers

- Dead Letter Exchange

==== 参考
https://www.cloudamqp.com/blog/part4-rabbitmq-for-beginners-exchanges-routing-keys-bindings.html

=== Queue
https://www.rabbitmq.com/ha.html

=== Virtual Host
Vhosts (Virtual Hosts) in RabbitMQ provides a way to segregate applications using the same RabbitMQ instance. RabbitMQ vhosts creates a logical group of connections, exchanges, queues, bindings, user permissions, etc. within an instance.

参考:
https://www.rabbitmq.com/vhosts.html
https://www.cloudamqp.com/blog/what-is-a-rabbitmq-vhost.html

=== 参考
https://www.rabbitmq.com/documentation.html
https://www.rabbitmq.com/amqp-0-9-1-reference.html
https://github.com/rabbitmq/rabbitmq-tutorials
https://github.com/rabbitmq/internals
https://github.com/rabbitmq

== Kafka
=== 概览

=== 参考
https://kafka.apache.org/documentation/
https://github.com/apache/kafka

== Pulsar
=== 概览
https://mp.weixin.qq.com/s/CIpCLCxqpLoQVUKz6QeDJQ

=== 参考
https://pulsar.apache.org/docs/next/
https://github.com/apache/pulsar

== RocketMQ
=== 设计理念
- 简单

    如NameServer没有使用业界常用的zookeeper:
    因为topic路由信息无须在集群间保持强一致，保持最终一致性

- 高效

    如引入文件组概念，组内单个大小文件固定，方便引入内存映射机制，存储基于顺序写

- 容忍设计缺陷

    消息重复问题由消费者实现幂等

=== 不足
目前开源版本的RocketMQ broker是没有主从自动切换的。如果master挂了，那就写不进去了。然后slave只能提供只读的功能。当然如果topic在多个主节点上都创建了，虽然不会完全写不进去，但是对单分片顺序消费的场景，还是会产生影响。

=== 概念
https://github.com/apache/rocketmq/blob/develop/docs/cn/concept.md

==== 1 消息模型(Message Model)
RocketMQ主要由Producer、Broker、Consumer三部分组成，其中Producer负责生产消息，Consumer负责消费消息，Broker负责存储消息。Broker在实际部署过程中对应一台服务器，每个Broker可以存储多个Topic的消息，每个Topic的消息也可以分片存储于不同的Broker。Message Queue用于存储消息的物理地址，每个Topic中的消息地址存储于多个Message Queue中。ConsumerGroup由多个Consumer实例构成。

==== 2 消息生产者(Producer)
负责生产消息，一般由业务系统负责生产消息。一个消息生产者会把业务应用系统里产生的消息发送到broker服务器。RocketMQ提供多种发送方式，同步发送、异步发送、顺序发送、单向发送。同步和异步方式均需要Broker返回确认信息，单向发送不需要。

==== 3 消息消费者(Consumer)
负责消费消息，一般是后台系统负责异步消费。一个消息消费者会从Broker服务器拉取消息、并将其提供给应用程序。从用户应用的角度而言提供了两种消费形式：拉取式消费、推动式消费。

==== 4 主题(Topic)
表示一类消息的集合，每个主题包含若干条消息，每条消息只能属于一个主题，是RocketMQ进行消息订阅的基本单位。

==== 5 代理服务器(Broker Server)
消息中转角色，负责存储消息、转发消息。代理服务器在RocketMQ系统中负责接收从生产者发送来的消息并存储、同时为消费者的拉取请求作准备。代理服务器也存储消息相关的元数据，包括消费者组、消费进度偏移和主题和队列消息等。

==== 6 名字服务(Name Server)
名字服务充当路由消息的提供者。生产者或消费者能够通过名字服务查找各主题相应的Broker IP列表。多个Namesrv实例组成集群，但相互独立，没有信息交换。

==== 7 拉取式消费(Pull Consumer)
Consumer消费的一种类型，应用通常主动调用Consumer的拉消息方法从Broker服务器拉消息、主动权由应用控制。一旦获取了批量消息，应用就会启动消费过程。

==== 8 推动式消费(Push Consumer)
Consumer消费的一种类型，应用不需要主动调用Consumer的拉消息方法，在底层已经封装了拉取的调用逻辑，在用户层面看来是broker把消息推送过来的，其实底层还是consumer去broker主动拉取消息。

==== 9 生产者组(Producer Group)
同一类Producer的集合，这类Producer发送同一类消息且发送逻辑一致。如果发送的是事务消息且原始生产者在发送之后崩溃，则Broker服务器会联系同一生产者组的其他生产者实例以提交或回溯消费。

==== 10 消费者组(Consumer Group)
同一类Consumer的集合，这类Consumer通常消费同一类消息且消费逻辑一致。消费者组使得在消息消费方面，实现负载均衡和容错的目标变得非常容易。要注意的是，消费者组的消费者实例必须订阅完全相同的Topic。RocketMQ支持两种消息模式：集群消费(Clustering)和广播消费(Broadcasting)。

==== 11 集群消费(Clustering)
集群消费模式下，相同Consumer Group的每个Consumer实例平均分摊消息。

==== 12 广播消费(Broadcasting)
广播消费模式下，相同Consumer Group的每个Consumer实例都接收全量的消息。

==== 13 普通顺序消息(Normal Ordered Message)
普通顺序消费模式下，消费者通过同一个消息队列(Topic分区，称作Message Queue)收到的消息是有顺序的，不同消息队列收到的消息则可能是无顺序的。

==== 14 严格顺序消息(Strictly Ordered Message)
严格顺序消息模式下，消费者收到的所有消息均是有顺序的。

==== 15 消息(Message)
消息系统所传输信息的物理载体，生产和消费数据的最小单位，每条消息必须属于一个主题。RocketMQ中每个消息拥有唯一的Message ID，且可以携带具有业务标识的Key。系统提供了通过Message ID和Key查询消息的功能。

==== 16 标签(Tag)
为消息设置的标志，用于同一主题下区分不同类型的消息。来自同一业务单元的消息，可以根据不同业务目的在同一主题下设置不同标签。标签能够有效地保持代码的清晰度和连贯性，并优化RocketMQ提供的查询系统。消费者可以根据Tag实现对不同子主题的不同消费逻辑，实现更好的扩展性。

=== 特性
https://github.com/apache/rocketmq/blob/develop/docs/cn/features.md

Request-Reply特性: https://github.com/apache/rocketmq/blob/develop/docs/cn/rpc_request.md

=== 架构与设计
https://github.com/apache/rocketmq/blob/develop/docs/cn/architecture.md
https://github.com/apache/rocketmq/blob/develop/docs/cn/design.md

=== 消息发送

- 发送方式: sync(同步), async(异步), oneway(单向)

- 生产者启动流程

- 消息发送基本流程

- 细节问题

消息批量发送
message id

消息发送-msg id

=== 消息存储

- 发送方式: sync(同步), async(异步), oneway(单向)  

- 生产者启动流程

- 消息发送基本流程

- 细节问题

负载机制
异常机制
消息批量发送
message id

=== 消息消费

=== 实战

==== 消息重试

==== 消息重复与幂等性

==== 集群

==== 顺序消息

==== 定时消息

==== 事务消息

==== 参考
https://cloud.tencent.com/developer/article/1877451

=== 最佳实践
https://github.com/apache/rocketmq/blob/develop/docs/cn/best_practice.md

=== 运维管理
https://github.com/apache/rocketmq/blob/develop/docs/cn/operation.md

=== Q&A
- 如何保证消息不被重复消费(幂等)

- 如何保证消息不被丢失(可靠)

- 如何保证消息的顺序性

- 如何解决消息的延时以及过期失效问题

- 如何解决消息积压甚至消息队列满的问题

- https://github.com/apache/rocketmq/blob/develop/docs/cn/FAQ.md

=== 参考
https://github.com/apache/rocketmq/tree/develop/docs/cn
https://github.com/apache/rocketmq/