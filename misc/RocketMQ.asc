= 了解RocketMQ
:revnumber: 0.0.1
:author: orient
:toc:
:homepage: http://orientye.com
<<<

== 概览

=== MQ
- 作用: 解耦，削峰，异步
- 缺点: 给系统增加了复杂性

- 什么时候可以考虑使用MQ？
数据驱动的任务依赖
上游不关心多下游执行结果
异步返回执行时间较长

- 什么时候不太会使用MQ？
上游比较关注执行结果，通常采用RPC。

=== 设计理念

- 简单

    如NameServer没有使用业界常用的Zookeeper。因为Topic路由信息无须在集群间保持强一致，保持最终一致性

- 高效

    如引入文件组概念，组内单个大小文件固定，方便引入内存映射机制，存储基于顺序写

- 容忍设计缺陷

    消息重复问题由消费者实现幂等

=== vs. Kafka

    http://jm.taobao.org/2016/04/07/kafka-vs-rocketmq-topic-amout/
    https://rocketmq.apache.org/rocketmq/how-to-support-more-queues-in-rocketmq/
    https://www.infoq.cn/article/s*RvY8D1jrNIsfOJylPE
    https://www.jianshu.com/p/c474ca9f9430

=== 不足

    目前开源版本的RocketMQ broker是没有主从自动切换的。如果Master挂了，那就写不进去了。然后slave只能提供只读的功能。当然如果topic在多个主节点上都创建了，
    虽然不会完全写不进去，但是对单分片顺序消费的场景，还是会产生影响。

Q: 会丢失消息吗?

=== 概念

- topic
- queue/partition

== NameServer

●  启动流程  

●  路由注册/删除/发现

== 消息发送

●  发送方式:  sync(同步), async(异步), oneway(单向)  

●  生产者启动流程

●  消息发送基本流程

●  细节问题

消息批量发送
message id

消息发送-msg id

SendResult [sendStatus=SEND_OK, msgId=0A42333A0DC818B4AAC246C290FD0000, 
offsetMsgId=0A42333A00002A9F000000000134F1F5, messageQueue=MessageQueue 
[topic=topicTest1, brokerName=mac.local, queueId=3], queueOffset=4] 对于客户端来说msgId
是由客户端producer自己生成的(createUniqID )，offsetMsgId(createMessageId)是由服务端
broker生成的,其中offsetMsgId就是我们在rocketMQ控制台直接输入查询的那个messageId。

StringBuilder sb = new StringBuilder(LEN * 2);可知msgId的长度是LEN * 2 = 16 * 2 = 32；
     设time = 当前时间 - 本月开始时间(ms)   从代码得到 FIX_STRING = ip + 进程pid 
+ MessageClientIDSetter.class.getClassLoader().hashCode()；
     createUniqIDBuffer 加入time 和 counter 因子。
     最终得到msgId的生成因子是:   ip + 进程pid 
+ MessageClientIDSetter.class.getClassLoader().hashCode() + time + 
counter(AtomicInteger自增变量）
     最后调用bytes2string进行十六进制的移位和编码就产生了我们的msgId
对于每个producer实例来说ip都是唯一的，所以不同producer生成的msgId是不会重复的。对于
producer单个实例来说的区分因子是：time + counter。首先应用不重启的情况下msgId是保证
唯一性的，应用重启了只要系统的时钟不变msgId也是唯一的。所以只要系统的时钟不回拨我
们就可以保证msgId的全局唯一。
    有人也许会说应用运行了一个月再进行重启msgId就会重复了。从生成算法上来说是的！但
是MQ的message是有时效性的，有效期是72小时也就是3天。每天的凌晨4点rocketMQ会把过
期的message清除掉。所以msgId也是保证全局唯一的。
 
 offsetMsgId:    broker端生成的offsetMsgId就比较简单了，直接就是主机ip + 物理分区的
offset，再调用UtilAll.bytes2string进行移位转码就完成了

== 消息存储

●  发送方式:  sync(同步), async(异步), oneway(单向)  

●  生产者启动流程

●  消息发送基本流程

●  细节问题

负载机制
异常机制
消息批量发送
message id

== 消息消费

== 实战

===  消息重试

===  消息重复与幂等性

===  集群

===  顺序消息

===  定时消息

===  事务消息