= 了解netty
:hardbreaks-option:
:revnumber: 0.0.1
:author: orient
:toc:
:toclevels: 5
:homepage: http://orientye.com
<<<

== 概览

=== 特点
参考: https://netty.io/index.html

netty5.0已经废弃:
主要原因: The major change of using a ForkJoinPool increases complexity and has not
demonstrated a clear performance benefit. Also keeping all the branches in sync is quite some work without a real need for it as there is nothin in current master which I think justifies a new major release.
参考: https://github.com/netty/netty/issues/4466

=== java nio
https://docs.oracle.com/javase/8/docs/api/java/nio/package-summary.html

- Buffer
- Channel
- Selector

=== 线程模型
==== reactor单线程
- 所有IO操作在同一个NIO线程上完成。

[source, java]
----
EventLoopGroup bossGroup = new NioEventLoopGroup(1);
ServerBootstrap b = new ServerBootstrap();
b.group(bossGroup)
 .channel(NioServerSocketChannel.class)
 ...
----

==== reactor多线程
- 一个acceptor线程用于监听服务端，接受客户端的TCP连接请求。
- 一个NIO线程池, 这些NIO线程负责消息的读取, 编解码，发送
- 一个连接只对应一个NIO线程

[source, java]
----
EventLoopGroup bossGroup = new NioEventLoopGroup(1);
ServerBootstrap b = new ServerBootstrap();
b.group(bossGroup)
 .channel(NioServerSocketChannel.class)
 ...
----

==== 主从reactor多线程
- 主reactor线程池: acceptor线程池
- 从reactor线程池(sub reactor线程池)

acceptor线程池仅仅用于客户端的登录，握手和安全认证，一旦连接建立成功，便将链路注册到subreactor线程池的IO线程上，由IO线程负责后续的IO操作

[source, java]
----
EventLoopGroup bossGroup = new NioEventLoopGroup(4);
EventLoopGroup workerGroup = new NioEventLoopGroup();
ServerBootstrap b = new ServerBootstrap();
b.group(bossGroup, workerGroup)
 .channel(NioServerSocketChannel.class)
 ...
----

== EventLoop和EventLoopGroup

EventLoop与EventLoopGroup:
NioEventLoopGroup实际上是个线程池
一个EventLoopGroup包含一个或者多个EventLoop

EventLoop与Thread:
一个EventLoop在它的生命周期内只有一个Thread绑定
EnventLoop处理的I/O事件都将在它专有的Thread上进行

EventLoop与Channel:
一个Channel在它的生命周期内只注册于一个EventLoop
每个EventLoop负责处理一个或多个Channel

== Bytebuf

== Channel

== Unsafe

== ChannelPipeline

== ChannelHandler
