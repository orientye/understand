= 了解软件设计原则
:hardbreaks-option:
:revnumber: 0.0.1
:author: orient
:toc:
:homepage: http://orientye.com
<<<

== 通用设计原则

- Keep It Simple, Stupid(KISS)

    Everything should be made as simple as possible, but not simpler. - Albert Einstein
    Q: simple vs. easy
    Q: 复杂的根本原因是什么
    Q: 如何应对复杂性

- Separation of Concerns(SoC) – 关注点分离

- High/Maximize Cohesion & Low/Minimize/Loose Coupling(高内聚, 低耦合)

- Don't Repeat Yourself(DRY)

- You Arn't Gonna Need It(YAGNI)

- Law of Demeter – 迪米特法则/最少知识原则(Principle of Least Knowledge)

- Write Code for the Maintainer(为维护者写代码)

- ......

Q: 见过/经历过哪些好的设计?
Q: 经历过哪些失败的教训?

== 架构设计原则

- 合适原则

    合适优于领先
    反面: 过度设计/缺乏设计...

- 简单原则

    简单优于复杂

- 演进原则

    演进优于一次到位

案例: 淘宝

== OO设计原则

- SOLID

    ▪ Single-responsibility principle(SRP)  
        
    ▪ Open–closed principle(OCP)
        open for extension,  closed for modification.
        Q: 如何才能做到呢?
        
    ▪ Dependency inversion principle(DIP)
        依赖反转/依赖倒置
        depend upon high level/abstractions, [not] low level/concretions. 
        Q: vs. 控制反转(Inversion Of Control)  vs. 依赖注入(Dependency Injection)
        
    ▪ Liskov substitution principle(LSP)
        objects in a program should be replaceable with instances of their subtypes without altering the correctness of that program. 
        
    ▪ Interface segregation principle(ISP)
        many client-specific interfaces are better than one general-purpose interface.

- 面向接口编程

        Q: 接口继承 vs. 实现继承

- 组合优先于继承

== OO设计模式

-  创建型

        单例(singleton)
        工厂方法(factory method)
        抽象工厂模式(abstract factory)
        生成器模式(builder)
        原型模式(prototype)

-  结构型

        外观模式(facade)
        代理模式(proxy)
        适配器模式(adaptor)
        装饰模式(decorator)
        桥接模式(bridge)
        组合模式(composite)
        享元模式(flyweight)

-  行为型

        观察者模式(observer)
        模板方法模式(template method)
        策略模式(strategy)
        职责链模式(chain of responsibility)
        迭代器模式(iterator)
        状态模式(state)
        中介者模式(mediator)
        命令模式(command)
        备忘录模式(memento)
        解释器模式(interpretor)
        访问者模式(visitor)

Q: 如何正确的使用设计模式?
A: https://www.zhihu.com/question/23757906

== API设计实践

什么是好的API?

    ▪ 提供清晰的思维模型 provides a good mental model
    ▪ 简单 is simple
    ▪ 允许多个实现 allows multiple implementations
    
    正例: POSIX File API

Q: RESTful vs. GraphQL vs. RPC

参考:
https://www.infoq.cn/article/5s63kshbovyynzn_zwbb
https://cloud.google.com/apis/design
https://docs.microsoft.com/en-us/azure/architecture/best-practices/api-design

== 设计文档

=== 架构图

应用架构/数据架构/技术架构/产品架构

=== ER图

=== 时序图

=== 类图
    
- is-a

    泛化(generalize)
        标识: 空心三角箭头 + 实线
    实现(realize)
        标识: 空心三角箭头 + 虚线
        接口/抽象类
    
- has-a

    组合关系(composition)
        标识: 实心菱形箭头 + 实线    (或: 实心菱形箭头 + 带箭头的实线)
        整体由部分构成, 例如公司由多个部门组成
        是一种强依赖的特殊聚合关系，如果整体不存在了，则部分也不存在了
    聚合关系(aggregation)
        标识: 空心菱形箭头 + 实线    (或: 空心菱形箭头 + 带箭头的实线)
        整体由部分构成, 例如部门由多个员工组成
        与组合关系不同的, 整体和部分不是强依赖的, 即使整体不存在了, 部分仍然存在
    关联关系(association)
        标识: 箭头 + 实线    (或: 一根实线)

- use-a

    依赖关系(dependency)
        箭头 + 虚线
    
参考:
https://design-patterns.readthedocs.io/zh_CN/latest/read_uml.html

== 规范/规约
=== lan

C++: https://google.github.io/styleguide/cppguide.html
Java: https://developer.aliyun.com/special/tech-java
其它: https://google.github.io/styleguide/

=== db

参考:《mysql-convention》
参考:《mongodb-convention》
参考:《redis-convention》
