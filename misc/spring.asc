= spring
:revnumber: 0.0.1
:author: orient
:homepage: http://orientye.com
:toc:
:toclevels: 5
:hardbreaks-option:
<<<

== 概念
- spring核心
spring的核心是提供了一个容器(container)。它们通常被称为spring应用上下文(Spring application context)，会创建和管理应用的组件。这些组件也可以称为bean，会在spring应用上下文中装配在一起，从而形成一个完整的应用程序。

- SSM框架: Spring + Spring MVC + MyBatis

- 控制反转(Inversion Of Control即IOC)与依赖注入(Dependency Injection即DI)

- AOP(面向切面编程，Aspect Oriented Program)
实现方式:
在Java平台上，对于AOP的切入，有3种方式:
编译期: 在编译时，由编译器把切面调用编译进字节码，这种方式需要定义新的关键字并扩展编译器，AspectJ就扩展了Java编译器，使用关键字aspect来实现切入
类加载器: 在目标类被装载到JVM时，通过一个特殊的类加载器，对目标类的字节码重新"增强"
运行期: 目标对象和切面都是普通Java类，通过JVM的动态代理功能或者第三方库实现运行期动态切入
最简单的方式是第三种，Spring的AOP实现就是基于JVM的动态代理。由于JVM的动态代理要求必须实现接口，如果一个普通类没有业务接口，就需要通过CGLIB或者Javassist这些第三方库实现。
AOP技术本质就是一个动态代理，把一些常用功能如权限检查、日志、事务等，从每个业务方法中剥离出来。
参考: https://en.wikipedia.org/wiki/Aspect-oriented_programming

- POJO
https://en.wikipedia.org/wiki/Plain_old_Java_object

== bean
=== 概念
In Spring, the objects that form the backbone of your application and that are managed by the Spring IoC container are called beans. A bean is an object that is instantiated, assembled, and managed by a Spring IoC container. Otherwise, a bean is simply one of many objects in your application. Beans, and the dependencies among them, are reflected in the configuration metadata used by a container.
https://docs.spring.io/spring-framework/reference/core/beans/introduction.html

=== scope
- singleton
(Default) Scopes a single bean definition to a single object instance for each Spring IoC container.

- prototype
Scopes a single bean definition to any number of object instances.

- request
Scopes a single bean definition to the lifecycle of a single HTTP request. That is, each HTTP request has its own instance of a bean created off the back of a single bean definition. Only valid in the context of a web-aware Spring ApplicationContext.

- session
Scopes a single bean definition to the lifecycle of an HTTP Session. Only valid in the context of a web-aware Spring ApplicationContext.

- application
Scopes a single bean definition to the lifecycle of a ServletContext. Only valid in the context of a web-aware Spring ApplicationContext.

- websocket
Scopes a single bean definition to the lifecycle of a WebSocket. Only valid in the context of a web-aware Spring ApplicationContext.

=== 参考
https://docs.spring.io/spring-framework/reference/core/beans/definition.html

== spring boot
https://spring.io/projects/spring-boot
https://docs.spring.io/spring-boot/docs/current/reference/html/index.html

spring boot中的配置:
核心设计理念: 对配置信息的管理采用约定优于配置
配置文件与Profile
代码控制与Profile

配置加载顺序:
spring boot在启动时会扫描以下位置的application.properties或者application.yml文件作为全局配置文件:

    file:./config/
    file:./
    classpath:/config/
    classpath:/
    优先级从高到低

spring boot会全部扫描这四个位置，扫描规则是高优先级配置内容会覆盖低优先级配置内容。如果高优先级的配置文件中存在与低优先级配置文件不冲突的属性，会形成一种互补配置。

== AOP
https://docs.spring.io/spring-framework/reference/core/aop.html

== spring framework
https://spring.io/projects/spring-framework

== spring data
https://spring.io/projects/spring-data

=== mongodb
https://spring.io/projects/spring-data-mongodb

注解:
https://www.baeldung.com/spring-data-mongodb-index-annotations-converter

=== redis
https://spring.io/projects/spring-data-redis

== spring cloud
https://spring.io/projects/spring-cloud

== spring-cloud-alibaba
https://github.com/alibaba/spring-cloud-alibaba
=== Sentinel
=== Nacos
https://nacos.io/zh-cn/docs/open-api.html

=== RocketMQ
=== Seata
=== Alibaba Cloud OSS
=== Alibaba Cloud SMS
=== Alibaba Cloud SchedulerX

== reactive
https://spring.io/reactive
https://projectreactor.io/

参考: https://www.zhihu.com/question/375996978

== spring webflux
https://docs.spring.io/spring-framework/reference/web/webflux.html

== JdbcTemplate
https://www.baeldung.com/spring-jdbc-jdbctemplate
https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html

== RestTemplate
https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/client/RestTemplate.html

== spring security
https://spring.io/projects/spring-security

== 监控
https://docs.spring.io/spring-boot/docs/current/reference/html/actuator.html#actuator

== 管理
https://github.com/codecentric/spring-boot-admin

== API
https://docs.spring.io/spring-framework/docs/current/javadoc-api/index.html

== 测试
https://spring.io/guides/gs/testing-web/

== 注解
https://www.geeksforgeeks.org/spring-framework-annotations/
https://docs.spring.io/spring-framework/reference/core/beans/annotation-config.html
https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/stereotype/package-summary.html

当类只有一个构造器的时候，Spring会隐式地通过该构造器的参数应用依赖的自动装配。如果有一个以上的构造器，或者想要明确声明自动装配，那么可以在构造器上添加@Autowired注解。

=== @Async
https://www.baeldung.com/spring-async
https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/scheduling/annotation/Async.html

=== @Autowired
https://docs.spring.io/spring-framework/reference/core/beans/annotation-config/autowired.html
https://cloud.tencent.com/developer/article/1626635
https://zhuanlan.zhihu.com/p/138077793

=== @Bean
https://docs.spring.io/spring-framework/reference/core/beans/java/bean-annotation.html
https://zhuanlan.zhihu.com/p/73257985

=== @Component
https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/stereotype/Component.html

=== @ConfigurationProperties
https://docs.spring.io/spring-boot/docs/current/api/org/springframework/boot/context/properties/ConfigurationProperties.html

=== @Order
https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/core/annotation/Order.html

==== @PostConstruct and @PreDestroy
https://docs.spring.io/spring-framework/reference/core/beans/annotation-config/postconstruct-and-predestroy-annotations.html
https://www.digitalocean.com/community/tutorials/spring-postconstruct-predestroy

==== @Profile
https://www.baeldung.com/spring-profiles
https://blog.csdn.net/loongkingwhat/article/details/105745303

==== @Resource
vs. @Autowired
https://docs.spring.io/spring-framework/reference/core/beans/annotation-config/resource.html

==== @Scope
https://www.baeldung.com/spring-bean-scopes

==== @Service
https://www.baeldung.com/spring-component-repository-service

==== @Transient
https://docs.spring.io/spring-data/commons/docs/current/api/org/springframework/data/annotation/Transient.html

=== @Value
https://docs.spring.io/spring-framework/reference/core/beans/annotation-config/value-annotations.html

=== 参考
https://github.com/spring-projects/spring-framework/wiki/Spring-Annotation-Programming-Model

== 类与接口
ApplicationContext
CommandLineRunner
ApplicationRunner

== 参考
https://spring.io/
https://spring.io/projects
https://spring.io/blog/
https://github.com/spring-projects/spring-boot
https://github.com/spring-projects/spring-framework
https://docs.spring.io/spring-framework/