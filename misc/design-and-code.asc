= 设计与编码
:hardbreaks-option:
:revnumber: 1.0.0
:author: orient
:toc:
:sectnums:
:homepage: http://orientye.com
<<<

== 通用设计原则

- Keep It Simple, Stupid(KISS)

    ▪ Everything should be made as simple as possible, but not simpler. - Albert Einstein

    ▪ simple vs. easy
        it is easy to be complicated, it is hard to be simple

    ▪ 复杂的根本原因
        事物/元素之间相互联系，并且其相互联系又是难于分析、解答或理解的

    ▪ 如何应对复杂性
        分/巧
        分是指借助抽象等手段进行拆分, 每个元素功能更为单一, 多个元素之间的联系性也降到最低
        巧是指通过某种巧妙的方法来解决问题, 通常是另外一种角度, 另外一种方法

- Separation of Concerns(SoC) – 关注点分离

- High/Maximize Cohesion & Low/Minimize/Loose Coupling(高内聚, 低耦合)

- Don't Repeat Yourself(DRY)

- You Arn't Gonna Need It(YAGNI)

- Law of Demeter – 迪米特法则/最少知识原则(Principle of Least Knowledge)

- Write Code for the Maintainer(为维护者写代码)

- ......

== 架构设计原则

- 合适原则

    合适优于领先
    反面: 过度设计/缺乏设计...

- 简单原则

    简单优于复杂

- 演进原则

    演进优于一次到位

- 成本原则

案例: 淘宝

== 系统设计4S分析法
- Scenario(场景)
Ask / Features / QPS / DAU / Interfaces

- Service(服务)
Split / Application / Module

- Storage(存储)
SQL / NoSQL / Schema / Data / File System

- Scale(扩展)
Sharding / Optimize / Special Case

== 软件架构

=== 三层结构
三层架构是一种十分完善的软件应用程序架构，它将应用程序组织成三个逻辑和物理计算层: 表示层（或用户界面）、应用层（负责处理数据）和数据层（负责存储和管理与应用程序相关的数据）。

=== MVC
- MVC
https://zh.wikipedia.org/wiki/MVC

- MVP
https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93presenter

- MVVM
https://learn.microsoft.com/en-us/dotnet/architecture/maui/mvvm
https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93viewmodel

参考:
https://medium.com/neptune-coding/vue-js-mvvm-%E7%9A%84%E6%A6%82%E5%BF%B5-983bdc5da207
https://www.ruanyifeng.com/blog/2015/02/mvcmvp_mvvm.html

== OO设计原则

- SOLID

    ▪ Single-responsibility principle(SRP)  

    ▪ Open–closed principle(OCP)
        open for extension,  closed for modification.
        Q: 如何才能做到呢?

    ▪ Dependency inversion principle(DIP)
        依赖反转/依赖倒置
        depend upon high level/abstractions, [not] low level/concretions. 
        Q: vs. 控制反转(Inversion Of Control即IOC) vs. 依赖注入(Dependency Injection即DI)
            谁依赖于谁: 应用程序依赖于IoC容器
            为什么需要依赖: 应用程序需要IoC容器来提供对象需要的外部资源
            谁注入谁: IoC容器注入应用程序依赖的对象
            注入了什么: 注入某个对象所需要的外部资源
            控制的什么被反转了: 获得依赖对象的方式反转了
        参考: https://blog.csdn.net/bestone0213/article/details/47424255
        参考: https://coolshell.cn/articles/9949.html
        参考: https://www.martinfowler.com/articles/injection.html

    ▪ Liskov substitution principle(LSP)
        objects should be replaceable with instances of their subtypes without altering the correctness of that program.

    ▪ Interface segregation principle(ISP)
        many client-specific interfaces are better than one general-purpose interface.

- 面向接口编程

    Q: 接口继承 vs. 实现继承

- 组合优先于继承

== OO设计模式

=== 创建型

    单例(singleton)
    工厂方法(factory method)
    抽象工厂模式(abstract factory)
    生成器模式(builder)
    原型模式(prototype)

==== 单例(singleton)
参考: https://www.digitalocean.com/community/tutorials/java-singleton-design-pattern-best-practices-examples

[source, java]
.双重检查模式(多线程安全)
----
public class Singleton {
    private volatile static Singleton singleton;
    private Singleton () {}
    public static Singleton getSingleton() {
        if (singleton == null) {
            synchronized (Singleton.class) {
                if (singleton == null) {
                    singleton = new Singleton();
                }
            }
        }
        return singleton;
    }
}
----

[source, java]
.静态内部类模式(多线程安全)
----
public class Singleton {
    private Singleton() {
    }
    public static Singleton getSingleton() {
        return Inner.instance;
    }
    private static class Inner {
        private static final Singleton instance = new Singleton();
    }
}
----
内部类持有静态对象，对象初始化过程中隐含着初始化锁:
https://docs.oracle.com/javase/specs/jls/se7/html/jls-12.html#jls-12.4.2

[source, java]
.饿汉单例模式(多线程安全，但没有懒加载)
----
public class Singleton {
    private static Singleton instance = new Singleton();
    private Singleton () {}
    public static Singleton getInstance() {
        return instance;
    }
}
----

[source, java]
.枚举单例模式(多线程安全)
----
public enum Singleton {
    INSTANCE;
    
    public void doSomething() {
        //todo doSomething
    }
}
----

==== 工厂方法(factory method)
许多设计初期都会使用工厂方法模式(较为简单)，随后演化为抽象工厂模式、原型模式等(更灵活也更复杂)。

示例:

    java.lang.String.valueOf()

参考: https://www.digitalocean.com/community/tutorials/factory-design-pattern-in-java

==== 抽象工厂模式(abstract factory)
为一系列相关对象或相互依赖的对象创建一个接口。从某种意义上看，抽象工厂其实是一个产品系列/产品簇。

示例:

    javax.xml.parsers.DocumentBuilderFactory#newInstance()
    javax.xml.transform.TransformerFactory#newInstance()
    javax.xml.xpath.XPathFactory#newInstance()

参考: https://www.digitalocean.com/community/tutorials/abstract-factory-design-pattern-in-java

==== 生成器模式(builder)
Builder pattern was introduced to solve some of the problems with Factory and Abstract Factory design patterns when the Object contains a lot of attributes. There are three major issues with Factory and Abstract Factory design patterns when the Object contains a lot of attributes:

1. Too Many arguments to pass from client program to the Factory class that can be error prone because most of the time, the type of arguments are same and from client side its hard to maintain the order of the argument.
2. Some of the parameters might be optional but in Factory pattern, we are forced to send all the parameters and optional parameters need to send as NULL.
3. If the object is heavy and its creation is complex, then all that complexity will be part of Factory classes that is confusing.

示例:

    java.lang.StringBuilder#append() (unsynchronized)
    java.lang.StringBuffer#append() (synchronized)

参考: https://www.digitalocean.com/community/tutorials/builder-design-pattern-in-java

==== 原型模式(prototype)
通过克隆来创建新的对象实例。

示例:

    java.lang.Object.clone()

参考: https://www.digitalocean.com/community/tutorials/prototype-design-pattern-in-java

=== 结构型

    外观模式(facade)
    代理模式(proxy)
    适配器模式(adaptor)
    装饰模式(decorator)
    桥接模式(bridge)
    组合模式(composite)
    享元模式(flyweight)

==== 外观模式(facade)
==== 代理模式(proxy)
==== 适配器模式(adaptor)
==== 装饰模式(decorator)
==== 桥接模式(bridge)
==== 组合模式(composite)
==== 享元模式(flyweight)

=== 行为型

    观察者模式(observer)
    模板方法模式(template method)
    策略模式(strategy)
    职责链模式(chain of responsibility)
    迭代器模式(iterator)
    状态模式(state)
    中介者模式(mediator)
    命令模式(command)
    备忘录模式(memento)
    解释器模式(interpretor)
    访问者模式(visitor)

==== 观察者模式(observer)
==== 模板方法模式(template method)
==== 策略模式(strategy)
==== 职责链模式(chain of responsibility)
有一些责任链模式，每个Handler都有机会处理Request，通常这种责任链被称为拦截器（Interceptor）或者过滤器（Filter），其目的不是找到某个Handler处理掉Request，而是每个Handler都做一些工作。
例如，JavaEE的Servlet规范定义的Filter就是一种责任链模式，它不但允许每个Filter都有机会处理请求，还允许每个Filter决定是否将请求放行给下一个Filter。

参考:
https://www.digitalocean.com/community/tutorials/chain-of-responsibility-design-pattern-in-java
https://www.liaoxuefeng.com/wiki/1252599548343744/1281319474561057

==== 迭代器模式(iterator)
==== 状态模式(state)
==== 中介者模式(mediator)
==== 命令模式(command)
==== 备忘录模式(memento)
==== 解释器模式(interpretor)
==== 访问者模式(visitor)

=== 参考
https://www.digitalocean.com/community/tutorials/java-design-patterns-example-tutorial

=== 实践
==== 设计模式
https://www.zhihu.com/question/23757906

==== 循环依赖
https://en.wikipedia.org/wiki/Circular_dependency

循环依赖的危害:
（1）初始化顺序不确定
循环依赖会导致模块之间的初始化顺序不确定，当一个模块依赖的其它模块还没有加载完毕时，它自己也无法被正确初始化。这可能会导致程序出现各种奇怪的bug，因为程序的执行顺序无法预测。
（2）性能下降
循环依赖会导致程序加载和初始化的性能下降，因为每次加载模块时，都需要检查和解决模块之间的依赖关系。如果循环依赖比较多，这个过程会变得非常复杂和耗时。
（3）可维护性降低
循环依赖增加了代码的复杂度和耦合性。当一个模块需要被修改时，可能会影响到其他依赖它的模块。
（4）代码重用性降低
一个模块无法被单独地使用和测试。这会使代码更加难以重用，并增加编写测试用例的难度。

参考解决方案:
https://jiapan.me/2020/circular-dependence/
https://www.maguangguang.xyz/eliminate-cyclic-dependency

== API设计实践

什么是好的API?

    ▪ 提供清晰的思维模型 - provides a good mental model
    ▪ 简单 - simple
    ▪ 允许多个实现 - allows multiple implementations

    正例: POSIX File API

Q: RESTful vs. GraphQL vs. RPC

参考:
https://www.infoq.cn/article/5s63kshbovyynzn_zwbb
https://cloud.google.com/apis/design
https://docs.microsoft.com/en-us/azure/architecture/best-practices/api-design

== 设计文档

=== 架构图
应用架构/数据架构/技术架构/产品架构

=== ER图

=== 时序图

=== 类图

- is-a

    泛化(generalize)
        标识: 空心三角箭头 + 实线    ―――――――――▷
    实现(realize)
        标识: 空心三角箭头 + 虚线    ---------▷
        接口/抽象类

- has-a

    组合(composition)
        标识: 实心菱形箭头 + 实线    (或: 实心菱形箭头 + 带箭头的实线)    ◆―――――――――> 或 ◆―――――――――
        整体由部分构成, 例如公司由多个部门组成
        是一种强依赖的特殊聚合关系，如果整体不存在了，则部分也不存在了
    聚合(aggregation)                              
        标识: 空心菱形箭头 + 实线    (或: 空心菱形箭头 + 带箭头的实线)    ◇―――――――――> 或 ◇―――――――――
        整体由部分构成, 例如部门由多个员工组成
        与组合关系不同的, 整体和部分不是强依赖的, 即使整体不存在了, 部分仍然存在
    关联(association)
        标识: 箭头 + 实线    (或: 一根实线)    ―――――――――> 或 ―――――――――

- use-a

    依赖(dependency)
        标识: 箭头 + 虚线    --------->

参考: https://design-patterns.readthedocs.io/zh_CN/latest/read_uml.html

== 整洁代码
《代码大全(第2版)》
《代码整洁之道》
《编写可读代码的艺术》
《重构: 改善既有代码的设计(第2版)》
《架构整洁之道》
《程序员修炼之道: 通向务实的最高境界(第2版)》

== 推荐规范
=== lan
C++: https://github.com/orientye/understand/blob/main/lan/cpp-convention.md
Java: https://github.com/alibaba/p3c
其它: https://google.github.io/styleguide/

=== db
参考: link:../db/mysql-convention.asc[《mysql-convention》]
参考: link:../db/mongodb-convention.asc[《mongodb-convention》]
参考: link:../db/redis-convention.asc[《redis-convention》]

=== protocol
参考: link:../network/http-restful-api-convention.asc[《http-restful-api-convention》]