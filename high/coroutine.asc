= coroutine
:hardbreaks-option:
:revnumber: 0.0.1
:author: orient
:toc:
:homepage: http://orientye.com
<<<

== 概要

=== what

    co-cooperative and routines-functions
    vs. subroutine/function

=== why

    轻量级; 用户态; 性能
    异步代码同步化

=== vs. callback

    Q: 能取代callback吗
    A: 能
    Q: 比callback性能好吗
    A: 不一定

=== symmetric and asymmetric coroutines
symmetric: goroutine
asymmetric: lua

参考:
http://www.inf.puc-rio.br/~roberto/docs/MCC15-04.pdf[Revisiting Coroutines]
https://stackoverflow.com/questions/41891989/what-is-the-difference-between-asymmetric-and-symmetric-coroutines

=== stackfulness and stackless coroutines
Stackful coroutine mechanisms allow coroutines to suspend their execution from within nested functions; the next time the coroutine is resumed, its execution continues from the exact point where it suspended.

此外stackful意味着被调用者生命周期可以超越创建者的生命周期，可以从一个线程迁移到另一个线程？ 性能上不如无栈？

stackfulness：goroutine
stackless：ES6 await/async, python中的协程, c++20

First-class versus constrained coroutines

参考: https://stackoverflow.com/questions/28977302/how-do-stackless-coroutines-differ-from-stackful-coroutines
参考: https://www.zhihu.com/question/65647171

== 核心机制

- 状态
- 调度
- 通信

- 参考
https://www.cyhone.com/articles/analysis-of-cloudwu-coroutine/

== lua与coroutine

- 类别: 非对称, stackful
- 状态: lua_State
- 调度: 无线程级调度
- 通信: resume和yield参数
- 细节: 参考《Lua》

== go与coroutine

- 类别: 对称, stackful
- 状态: G P M 默认2K(Q: 调整时机呢?)
- 调度: M:N
- 通信: channel
- 细节: 参考《Go》

== cpp与coroutine

- 类别: 非对称, stackless
- 状态:

    可以参考ucontext.h(实际上还是asm, 例如glibc的swapcontext.S)或者asm
    boost.context: https://github.com/boostorg/context 

- 调度
- 通信
- 细节

- 参考
https://en.cppreference.com/w/cpp/language/coroutines
https://open-std.org/JTC1/SC22/WG21/docs/papers/2018/n4775.pdf

=== 状态

x86-64: System V AMD64 ABI
TODO: img
参考: https://en.wikipedia.org/wiki/X86_calling_conventions#x86-64_calling_conventions

TODO: img
参考: https://raw.githubusercontent.com/wiki/hjl-tools/x86-psABI/x86-64-psABI-1.0.pdf

x86-64 entry.S contains the system-call and fault low-level handling routines.
参考: https://github.com/torvalds/linux/blob/master/arch/x86/entry/entry_64.S

=== libco

- 类别: 非对称, stackful(默认栈大小:128K)(Q: 为什么libco有共享栈?)
- 状态: https://github.com/Tencent/libco  Q: X64为什么只保存了14个寄存器？
- 调度: https://www.infoq.cn/article/CplusStyleCorourtine-At-Wechat
- 通信
- 细节: Q: libco使用协程究竟解决什么问题

参考: https://www.cyhone.com/articles/analysis-of-libco/
参考: http://purecpp.org/purecpp/static/64a819e99584452aab70a7f9c307717f.pdf
参考: https://www.zhihu.com/question/52193579/answer/156692295

=== brpc

- 类别
- 状态: https://github.com/apache/incubator-brpc/blob/master/src/bthread/context.cpp 
- 调度: 线程调度， working stealing
- 通信
- 细节: 参考《brpc》

参考: https://github.com/apache/incubator-brpc/blob/master/docs/cn/bthread.md

=== c++20
https://www.modernescpp.com/index.php/c-20-coroutines-more-details

参考: https://github.com/lewissbaker/cppcoro
参考: https://github.com/yyzybb537/libgo

== async/await

In computer programming, the async/await pattern is a syntactic feature of many programming languages that allows an asynchronous, non-blocking function to be structured in a way similar to an ordinary synchronous function. It is semantically related to the concept of a coroutine and is often implemented using similar techniques, and is primarily intended to provide opportunities for the program to execute other code while waiting for a long-running, asynchronous task to complete, usually represented by promises or similar data structures. The feature is found in C# 5.0, Python 3.5, Kotlin 1.1, Rust 1.39 and JavaScript ES2017, with some experimental work in extensions, beta versions, and particular implementations of Scala and C++.

参考: https://en.wikipedia.org/wiki/Async/await

特点: 一般来说stackless

参考: https://www.zhihu.com/question/65647171

=== javascript
==== async/await
实现:
image:https://v8.dev/_img/fast-async/microtasks-vs-tasks.svg[height="256"]
image:https://v8.dev/_img/fast-async/await-under-the-hood.svg[height="256"]
image:https://v8.dev/_img/fast-async/node-10-vs-node-12.svg[height="256"]

On a high level there are tasks and microtasks in JavaScript. Tasks handle events like I/O and timers, and execute one at a time. Microtasks implement deferred execution for async/await and promises, and execute at the end of each task. The microtask queue is always emptied before execution returns to the event loop.

参考: https://v8.dev/blog/fast-async
参考: https://github.com/nodejs/node/blob/master/lib/internal/process/task_queues.js

性能测试:
image:coroutine/img/async-await-bm-node12.19.0.png[]
image:coroutine/img/async-await-bm-node10.21.0.png[]
参考: https://github.com/kyrylkov/promise-async-performance

Q: 以下函数, 执行流程是?/有无await有什么区别?
.async_await_js_code1
[source,js]
----
async function test() {
    console.log("test start");
    await async_func_a();
    await async_func_b();
    await async_func_c();
    console.log("test finish");
}
----

Q: javascript里使用async/await要注意什么事项?
A: 从上面的性能测试的结果看, 性能从高到低: callback > promise > async/await.

正确地使用async/await:
.async_await_js_code2
[source,js]
----
async function test() {
    console.log("test start");
    let result_a = async_func_a();
    let resutl_b = async_func_b();
    let result_c = async_func_c();
    await result_a;
    await result_b;
    await result_c;
    console.log("test finish");
}
----
上述async_await_js_code2代码比async_await_js_code1比性能会有明显上升, 经笔者测试, 某些场景下甚至会提升一个量级(10倍以上)。
为什么async_await_js_code2会更快呢？
显然async_await_js_code2能更好的'并发'，参考:
processTicksAndRejections(): https://github.com/nodejs/node/blob/master/lib/internal/process/task_queues.js

==== Promise
https://en.wikipedia.org/wiki/Futures_and_promises
https://stackoverflow.com/questions/58479537/where-is-the-implementation-of-promise-in-nodejs
https://stackoverflow.com/questions/17718673/how-is-a-promise-defer-library-implemented
https://www.freecodecamp.org/news/how-to-implement-promises-in-javascript-1ce2680a7f51/

==== Generator
此方案已经废弃

=== C#
https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/concepts/async/task-asynchronous-programming-model
async: 返回类型: void/Task/Task<TResult>  async关键字可以没有
await: 有一些约束
实现: https://docs.microsoft.com/en-us/dotnet/api/system.runtime.compilerservices.iasyncstatemachine?view=net-5.0

https://docs.microsoft.com/en-us/archive/msdn-magazine/2013/march/async-await-best-practices-in-asynchronous-programming
https://docs.microsoft.com/en-us/dotnet/standard/async-in-depth
http://www.xyting.org/2017/02/28/understand-async-await-in-depth.html
https://www.cnblogs.com/brookshi/p/5240510.html
https://stackoverflow.com/questions/18013523/when-correctly-use-task-run-and-when-just-async-await
https://stackoverflow.com/questions/21879606/async-await-threading-internals
参考: 《深入理解C#》第三版 chapter15 使用async/await进行异步编程