:toc:
:toclevels: 5
:hardbreaks-option:

== 分层架构

=== 互联网分层架构

*典型的大型互联网分层架构:*
----
             client(browser/app) ─── DNS
                         |
                       LVS/F5
                         |
                       nginx
                         |
                  web server(tomcat)
                         |
                    service  ───  cache
                         |
                      database
----

- 各层次/组件的scale
- Web前后端分离

用户接口层: IOS/Andorid/PC
业务服务层: 订单服务/进销存服务/物流服务/促销服务
基础服务层: 用户中心/商品中心/库存中心/支付中心
中间件层: Redis/RocketMQ/Kafka
数据层: MySQL/MongoDB/ElasticSearch/分布式数据库
基础设施层: 物理机/OpenStack/Docker/Kubernetes/VMware

优点: 单一职责, 复用, 扩展
缺点: 增加了复杂度, 可能带来性能损失

=== DAL(数据访问层)
- 存储方式

    本地缓存: local-noshare, local-thread, local-process
    远程缓存: remote-cache, 例如redis
    远程DB: remote-db, 例如mysql, mongodb

- 任意一个DataModel可以选择在本地缓存, 远程缓存, 远程DB中的一种或多种组合

    例如ADataModel可以存储在本地缓存, 远程DB
    例如BDataModel可以存储在远程缓存, 远程DB
    例如CDataModel可以存储在本地缓存, 远程缓存, 远程DB

- 数据模型

    CRUD
    存储方式
    复杂性操作? 例如join, 事务等

- 存储配置

    同步与异步
    顺序
    参数

- ORM
- sharding
- 宕机数据丢失问题

=== database
https://db-engines.com/en/ranking

=== 参考
https://www.infoq.cn/article/nt4tbu9gi1j3miqxdcje
https://www.infoq.cn/article/2-3-priciple-dal
https://github.com/ctripcorp/dal