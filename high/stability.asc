= stability
:hardbreaks-option:
:revnumber: 0.0.1
:author: orient
:toc:
:homepage: http://orientye.com

<<<

== 代码层面
- 1. 对输入的边界的控制
确保输入是符合自己的预期的，而不只是文档上写的一些对输入边界的约束，例如最典型的故障是批量操作型的接口，由于批量操作的量超过了预期，直接内存溢出等。

- 2. 对使用到的API需要有深刻的理解（包括实现原理、代码细节）
只有这样，才能知道各种情况下的状况，从而在真正出故障的情况下能快速处理。

- 3. Fail fast
不管什么情况，以保障代码能正常运转是最重要的（最简单的标准是别把资源耗尽或Crash），在碰到意外情况下，尽快往外抛出错误是最好的，当然，这个主要是对在线型业务而言。

== 测试层面
=== 测试金字塔

    单元测试（测试单个函数/方法）
    集成测试（测试模块间交互）
    系统测试（测试整个系统）
    端到端测试（测试完整用户流程）

测试金字塔是2009年Mike Cohn在他的著作《Succeeding with Agile》一书正式提出的。它是一个类比的概念，形容每一层，或者说不同集成阶段测试覆盖率和知行效率之间的一个相对关系。

测试金字塔最初的原型分三层，底层是单元测试，中间层是API测试，上层是UI自动化测试。而且底层的单元测试需要做最多的测试工作，越往上测试工作应该越少。根据《谷歌软件测试之道》的经验，三者对于精力投入的比例是：把70%的精力放在单元测试，20%放在API测试，而剩下10%的精力放在UI测试。

测试金字塔的理念与测试左移的理念是一致的:
测试左移（Shift Left Testing）是指要把质量保障的活动尽量前移到更早的开发生命周期中，也就是要把测试工作往前移（对应于测试金字塔是往下沉），要把单元测试、集成测试做得更加充分和完善。而UI测试只需要针对关键业务进行自动化回归测试即可。

=== 压力测试
- 全链路压测
https://www.infoq.cn/article/IIxmvZwKdmG1k759qW2Q

=== 参考
https://zhuanlan.zhihu.com/p/620965871

== 设计层面
1. 强弱依赖识别，对弱依赖的地方，确保有各种降级策略；

2. 自身能力保护，一定要对自己系统的能力有清晰的认识，例如通常来说在线业务系统的指标通常是每秒处理的请求数，在超出能处理的请求数的情况下，需要尽快fail fast，在线业务做堆积是不好的，容易出问题，像Nginx之类的不一样，但也会对堆积程度有个边界控制；

3. 容灾能力，这个从集群化、到同城多活、再到异地多活，其实都有各种成熟的案例和相应的方案。

== 变更层面
1. 强制灰度，毕竟能灰度，相对来说就能更好的控制故障的影响范围（另外一个词是爆炸半径）；

2. 可监控以及可回滚，没有监控，就完全没办法知道变更后的情况，可回滚通常是变更一旦出问题，最好用的招，但确实也会难免碰到无法回滚的变更，那样类型的变更就要高度谨慎了；

3. 在故障出现时尽快恢复，而不是解决故障，在保留一定的现场的基础上，尽快的恢复问题比查问题重要的多，例如大家很多时候看到最有效的处理故障的方法可能是重启，有同城双活、异地多活的通常最有效的处理方法是切流量等。

== 运维层面

=== SRE(Site Reliability Engineering，网站可靠性工程)

== 参考
https://www.zhihu.com/question/59182318
https://www.infoq.cn/profile/8CB9CFC9CE21C8/publish
https://mp.weixin.qq.com/s/n6LgMPzyWNx5EcCxp2CHDQ
https://www.infoq.cn/article/z4ssMNkS3w4EbbusTYO1