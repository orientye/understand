= GPU
:hardbreaks-option:
:revnumber: 0.0.1
:author: orient
:toc:
:homepage: http://orientye.com

<<<

== 概念
=== GPU产品
- 主流PC GPU

        NVIDIA: NVIDIA的产品俗称N卡，代表产品有GeForce系列、GTX系列、RTX系列等。
        AMD: AMD的显卡俗称A卡，代表产品有Radeon系列。

- 主流手机 GPU

        ARM Mali 系列 (广泛用于安卓阵营)
        高通 Adreno (骁龙芯片独占)
        Apple 定制 GPU (A/B/M 系列芯片)

=== 移动GPU-vs-桌面GPU
- 设计目标的不同
** 桌面GPU
追求极致性能。功耗和散热不是首要问题(尽管也越来越重要)，核心目标是提供最强的图形处理能力和计算能力。体积和供电几乎不受限。
** 移动GPU
追求能效比。在极其有限的电池容量和严格的散热(无风扇或极小风扇)约束下，提供尽可能好的性能。每瓦性能是移动GPU设计的黄金准则。

- 架构与设计的不同
** 桌面GPU
*** 独立芯片: 拥有巨大的物理尺寸和晶体管数量(例如NVIDIA AD102核心超过700亿个晶体管)。
*** 强大且独立: 拥有自己的高速显存(GDDR6X/GDDR7/HBM)、庞大的核心数量(数千个CUDA Core/Stream Processor)和复杂的供电模块。
*** 专为并行计算优化: 架构设计用于处理高分辨率、高帧率、高特效的图形负载以及通用计算(AI、科学计算等)。
** 移动GPU
*** SoC的一部分: 移动GPU是系统级芯片(System on a Chip)中的一个IP模块，与CPU、NPU、ISP等共享芯片空间和内存带宽。
*** 共享内存: 使用统一的LPDDR内存，与CPU共享。这节省了空间和功耗，但带宽通常低于桌面独显的专用显存。
*** 高度优化能效: 经过特殊裁剪，会大量使用节能技术，如基于瓦片的延迟渲染(TBDR)(特别是Apple和ARM的GPU)，这种技术通过减少不必要的像素重复计算来极大降低功耗和带宽需求。

- 渲染方式的不同
** 桌面GPU: Immediate Rendering
** 移动GPU: TBR即Tile Based Rendering

- 参考
https://www.zhihu.com/question/25419183

== 架构
https://docs.nvidia.com/deeplearning/performance/dl-performance-gpu-background/index.html#gpu-arch

《Graphics and Computing GPUs》 John Nickolls(Director of Architecture NVIDIA)，David Kirk(Chief Scientist NVIDIA):
https://booksite.elsevier.com/9780124077263/downloads/advance_contents_and_appendices/appendix_C.pdf

- 参考
https://zhuanlan.zhihu.com/p/545056819
《Computer Graphics - Principles and Practice 3rd》chapter 38. Modern Graphics Hardware

== 参考
https://space.bilibili.com/2055684362/lists/318149
《CUDA by Example: An Introduction to General-Purpose GPU Programming》
《Programming Massively Parallel Processors: A Hands-on Approach》
《Professional CUDA C Programming》
《Parallel Programming for Modern High Performance Computing Systems》
《Computer Architecture: A Quantitative Approach》
《Heterogeneous Computing with OpenCL》
《GPU Computing Gems》系列
《The CUDA Handbook: A Comprehensive Guide to GPU Programming》
《Performance Tuning for GPU-Accelerated Applications》
《Parallel Computer Architecture and Programming》cs15418: https://www.cs.cmu.edu/afs/cs/academic/class/15418-s19/www/index.html
《PARALLEL COMPUTING》cs419: https://gfxcourses.stanford.edu/cs149/