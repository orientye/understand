= 了解availability
:hardbreaks-option:
:revnumber: 0.0.1
:author: orient
:toc:
:homepage: http://orientye.com
<<<

== 概述
- 概念

    指系统无中断地执行其功能的能力
    
    平均故障时间MTBF(Mean Time Between Failure): 相邻两次故障之间的平均工作时间
    平均修复时间MTTR(Mean Time To Repair): 由故障状态转为工作状态所花费的修理时间的平均值
    可用性计算公式: 可用性 = MTBF / (MTBF + MTTR)
    
    vs. 可靠性 可维护性
    可靠性(reliability)是指定时间内, 产生预期输出的几率
    可维护性(serviceability)是指若系统发生故障, 需要多长时间检查和维修

- 指标

[format="csv", options="header", separator=#]
|===
Availability % # Downtime per year # Downtime per quarter # Downtime per month # Downtime per week # Downtime per day
90%	# 36.53 days	# 9.13 days	# 73.05 hours	# 16.80 hours	# 2.40 hours
99%	# 3.65 days	# 21.9 hours	# 7.31 hours	# 1.68 hours	# 14.40 minutes
99.9%	# 8.77 hours	# 2.19 hours	# 43.83 minutes	# 10.08 minutes	# 1.44 minutes
99.99%	# 52.60 minutes	# 13.15 minutes	# 4.38 minutes	# 1.01 minutes	# 8.64 seconds
99.999%	# 5.26 minutes	# 1.31 minutes	# 26.30 seconds	# 6.05 seconds	# 864.00 milliseconds
99.9999% # 31.56 seconds	# 7.89 seconds	# 2.63 seconds	# 604.80 milliseconds	# 86.40 milliseconds
99.99999%  # 3.16 seconds	# 0.79 seconds	# 262.98 milliseconds	# 60.48 milliseconds	# 8.64 milliseconds
99.999999% # 315.58 milliseconds	# 78.89 milliseconds	# 26.30 milliseconds	# 6.05 milliseconds	# 864.00 microseconds
99.9999999% # 31.56 milliseconds	# 7.89 milliseconds	# 2.63 milliseconds	# 604.80 microseconds	# 86.40 microseconds
|===

- 基本思想

    消除单点/冗余
    故障转移
    失败检测

== 负载均衡

=== 各层负载均衡
- 二层负载均衡
    
    修改MAC地址为上游服务器IP地址，源IP和目标IP不变  如LVS DR模式

- 四层负载均衡
    
    如LVS NAT模式

- 七层负载均衡
    
    如ngnix, HAProxy

=== 算法
- round-robin
- 加权/weight round-robin
- random
- 加权/weight random
- 通用hash
- 一致性/consistent hash
- least connection
- least time 最小平均响应时间(nginx商业版)
- locality aware

- 带状态的负载均衡(sticky connection)

== 超时
应用程序根据服务调度策略, 选择重试或请求转移到其他机器上。

== 幂等
服务调用失败后，调用方会将请求转发到其他服务器上，但是这个失败可能是虚假的失败。比如服务已经处理成功，但因为网络故障导致调用方没有收到应答，或等待超时。这种情况下，重新发起请求，可能会导致重复操作，如果这个操作是比较敏感的交易操作，就会产生严重后果。

服务重复调用时无法避免的，但是只要能从业务实现上保证，重复调用和一次调用的处理结果一致，则业务就没有问题，这就是幂等性设计。

有些服务的业务天然具有幂等性，比如将用户性别设为男性，不管执行多少次，结果是一致的。但有些复杂的业务，要想保证幂等性，就需要根据全局性的ID去进行有效性验证，验证通过才能继续执行。

== 雪崩
访问服务集群时绝大部分请求都超时，且在流量减少时仍无法恢复的现象
参考: https://github.com/apache/incubator-brpc/blob/master/docs/cn/avalanche.md

== 限流
为了保证系统在遭遇突发流量时，能够正常运行，需要限制流量，超出系统访问能力的请求将被丢弃。
常见的限流算法有：漏桶、令牌桶、滑动窗口计数
参考: https://github.com/apache/incubator-brpc/blob/master/docs/cn/auto_concurrency_limiter.md

== 降级
为了保证核心功能的正常运行, 系统将某些次要业务或者接口的功能降低, 停掉其部分功能甚至全部功能。

vs. 限流
降级是从系统功能优先级的角度考虑如何应对故障
限流则是从用户访问压力的角度来考虑如何应对故障

== 熔断
当下游服务因访问压力过大而响应变慢或失败，上游服务为了保护系统整体的可用性，可以暂时切断对下游服务的调用。例如Hytrix

== 隔离
线程隔离
进程隔离
集群隔离
机房隔离
应用隔离
读写隔离
资源隔离
热点隔离

== 热更新
例如脚本更新

== 热重启
例如nginx更新

== 回滚
事务回滚, 部署版本回滚, 数据库回滚/备份恢复, 代码回滚, 资源回滚等

== 灰度发布
灰度发布，是在生产环境稳定集群之外，额外部署一个小规模的灰度集群，并通过流量控制，引入部分流量到灰度集群，进行生产全量发布前的灰度验证。如果验证失败，可立刻将所有流量切回至稳定集群，取消灰度发布过程；如果验证成功，则将新版本进行全量发布升级至生产环境稳定集群，完成灰度发布过程。

== 高可用架构
=== 主备/主从/主主
主从与主备: 备机只负责备份功能, 而从机承担读功能
主主: 主动模式(不推荐) 被动模式
=== 集群和分区
=== 异地多活