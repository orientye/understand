== pattern
:hardbreaks-option:

=== 进程/线程
- 单个进程，单个线程(simple)
- 单个进程，多个线程(eg. mysqld)
- 多个进程，单个线程(eg. nginx)
- 多个进程，多个线程(eg. chrome)
- 协程/以上各种辅之协程

Q: redis属于哪一种

Q: 为什么web服务器多采用one thread one loop?
A: https://github.com/apache/incubator-brpc/blob/master/docs/cn/benchmark.md

=== 并发模型(多线程)
- Actor — Erlang, Rust
- CSP(communicating sequential processes) — Go
- Callback - nodejs
- Thread — C++, Java

Q: Actor vs. CSP
A: https://www.quora.com/What-are-the-differences-between-the-actor-model-and-Communicating-Sequential-Processes-CSP-and-when-should-each-be-used

=== 一般设计原则
- 优先使用消息传递而不是共享内存(使用通信来共享内存, 而不是通过共享内存来通信)/尽量无状态/尽量不可变(immutable)状态

- 优先使用Socket(TCP)

- 如果必须共享状态, 尽量使用消息队列/任务队列等公用组件

- 互斥尽量使用Mutex, 并尽量使用非递归锁

    ▪ posix: PTHREAD_MUTEX_RECURSIVE, 默认非递归
    ▪ java: synchronized和java.util.concurrent.locks.ReentrantLock

=== 消息通信
- 竞争

    消息的传递方式/隔离性: copy, move, share
    消息在发送前只由发送方进行访问, 在发送之后仅可被唯一的接受者访问
    消息的亲和性

- 抽象
- 耦合
- 扩展