:toc:
:toclevels: 4
:hardbreaks-option:

=== condition variable

==== 概念与原理
通常有wait和notify两个动作, wait用于阻塞挂起线程, 直到另一个线程通过notify来唤醒。
例如在生产者和消费者问题中, 消费者如何知道生成者是否生产出了可以消费的产品呢? 通过while循环不停的去判断是否有可消费的产品是一种方式, 但这种方式极其消耗CPU性能, 这种情形需要使用条件变量来阻塞线程，降低CPU占用率。

wait:
Q: wait作了什么
Q: 谁会导致wait返回
Q: 什么是虚假唤醒(spurious wakeup)

signal:
Q: signal作了什么
Q: signal与unlock的顺序, 什么是wait morphing
SUSv3 http://en.wikipedia.org/wiki/Single_UNIX_Specification的规范中(pthread)，指明了这两种顺序不管采用哪种，其实现效果都是一样的

==== 注意事项
https://github.com/chenshuo/recipes/blob/master/thread/test/Waiter_test.cc

==== 实现
glibc: https://github.com/lattera/glibc/blob/master/nptl/pthread_cond_common.c