=== 线程安全
:hardbreaks-option:

线程安全有不止一种定义, 而且互不兼容。
《Java Concurrency in Practice》的定义, 一个线程安全的class应当满足以下三个条件:
• 多个线程同时访问时, 其表现出正确的行为
• 无论操作系统如何调度这些线程, 无论这些线程的执行顺序如何交织(interleaving)
• 调用端代码无须额外的同步或其他协调动作

依据这个定义, C++标准库里的大多数class都不是线程安全的, 包括std::string、std::vector、std::map、std::shared_ptr等等

而C系统库大多数函数是线程安全的, 包括malloc/free/printf/gettimeofday等等。
gethostbyname通常不是线程安全, 但FreeBSD的实现用了thread local storage, 因此是安全的。
至于read/write同一个fd是不是线程安全, 按POSIX定义是, 按程序语义则不一定(因为有可能出现short read/short write); 从实现看, Linux 3.14之前的write不是线程安全, 多线程写有overlap的可能, 3.14 之后才是安全的。

• 另外一种定义, 同一类型的多个对象能分别被各自所属的不同线程并发访问, 就算是线程安全的。在这个定义下, C++ 标准库容器和基本类型都是"线程安全的"。为了与前一种定义区别, 这个一般叫做thread compatible。

参考: https://www.zhihu.com/question/23244293/answer/24032098