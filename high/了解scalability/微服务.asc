== 微服务

=== 特点
- small
- lightweight
- automated

[quote, Matin Fowler]
In short, the microservice architectural style is an approach to developing a single application as a suite of small services, each running in its own process and communicating with lightweight mechanisms, often an HTTP resource API. These services are built around business capabilities and independently deployable by fully automated deployment machinery. 

参考：https://martinfowler.com/articles/microservices.html

.Image source: Bilgin Lbryam's https://twitter.com/bibryam/status/1026429379587567616[Twitter feed,window=read-later]
image::img/SMC.jpg[]

=== 微服务 vs. SOA vs. 云原生
[format="csv", options="header", separator=;]
|===
维度;SOA;微服务;云原生
粒度;粗;细;细
通信;web service;HTTP/RPC;HTTP/RPC
治理;ESB;微服务/API网关;服务网格
运行;物理机/虚拟机;虚拟机/容器;Kubernetes/Serverless
场景;企业级;互联网;互联网
|===

=== 基础设施
[format="csv", options="header", separator=#]
|===
名称#主要功能#实现技术
服务发现#自主式，代理式#Eureka
服务路由#轮询，随机，最小压力，最小链接等#Ribbon, Feign
服务容错#请求重试, 流式和服务隔离#Hystrix
服务监控#强求次数，响应平均时间，响应最高值，故障预警等#Prometheus
服务跟踪#单次请求响应等#Zipkin, Spring Cloud Sleuth
服务安全#接入安全，数据安全，传输安全#Spring Cloud Security, OAuth2
自动测试#单元测试, 集成测试, 接口测试#
自动部署#版本管理，资源管理，部署操作，备份，回退#Spring Boot, ansible, docker, jenkins
配置中心#版本信息，节点信息，配置增删改查，同步配置#Consul, Eureka, Etcd, ZooKeeper, Spring Cloud Config
接口框架#http/rpc, 数据格式#http RESTful, rpc, json
API网关#提供外部访问，接入鉴权，权限控制，流量控制，请求路由，传输加密#Zuul
|===

=== 注意事项
- 服务划分过细，导致关系复杂，影响开发效率
- 调用链太长，影响性能与问题定位
- 缺乏自动化支撑，导致无法快速交付
- 缺乏服务治理，服务管理混乱
- 自动化很关键

=== 微服务 vs. Service Mesh vs. Serverless
- ServiceMesh: 分离基础设施与业务逻辑; SideCar
- Serverless: Function as a Service(FAAS)