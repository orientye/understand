:toc:
:toclevels: 5
:hardbreaks-option:

== lock

=== 概念
- Locks are bad:

    Taking too few locks
    Taking too many locks
    Taking the wrong locks
    Taking locks in the wrong order
    Error recovery
    Lost wakeups and erroneous retries
    But the fundamental shortcoming of lock-based programming is that locks and condition variables do not support modular programming.
    - 参考《Beautiful Code》- Beautiful Concurrency

- 可重入/递归

- busy wait/sleep wait

- 乐观锁(optimistic locking)/悲观锁(pessimistic locking)

    Q: 什么是乐观锁? 有哪些常见的乐观锁?
    https://en.wikipedia.org/wiki/Optimistic_concurrency_control
    Q: 乐观锁适合什么场景/优缺点
    乐观锁虽然去除了加锁解锁的操作，但是一旦发生冲突，重试的成本非常高
    只有在冲突概率非常低，且加锁成本非常高的场景时，才考虑使用乐观锁
    Q: 乐观锁 vs. 悲观锁
    https://stackoverflow.com/questions/129329/optimistic-vs-pessimistic-locking

- non-blocking(lock-free)

    obstruction-free(无障碍)
    lock-free(无锁)
    wait-free(无等待)

- 公平锁与非公平锁

=== dead lock
https://mp.weixin.qq.com/s?__biz=MzI5NDY2MDE0Nw==&mid=2247483674&idx=1&sn=a78f20cf1ddfab1f9f90956059f3b9e5&chksm=ec5e3046db29b9509e9c2766efecb2739f27891e9f243f06236259863f1e1504005a742e2da3&mpshare=1&scene=1&srcid=1008evkuPsF8bgbu8M02Du7j&sharer_sharetime= 

补充: try_lock

vs. livelock
Livelock: A livelock is a special type of deadlock, where the processes are changing their states continuously but not making any progress.

Now, let's say in the above example we wish to resolve this deadlock. We put in a deadlock identifying setup which becomes aware of a deadlock when it happens. It orders the processes that are part of the deadlock, to release all their resources for some time and then come back and try proceeding again. If A, B, and C do this at the same time, they would keep oscillating in a loop of 1. Getting stuck in deadlock 2. Releasing the resource 3. Waiting for some time 4. Locking again the resource they were previously holding, thus recreating the deadlock.

Real life example would be when you make a phone call, but the person at the other end is trying to call you too. You both hang up and try again after the same time, which creates the same situation again. This can go on for eternity.

vs. starvation

=== lock lack
https://mp.weixin.qq.com/s?__biz=MzI5NDY2MDE0Nw==&mid=2247483665&idx=1&sn=272e38645d0e414c77e67ce8389fe3e1&chksm=ec5e304ddb29b95bf2d4052266fb37a1c828c24e6d4db51320ddcc60e1af90a8661e4e69874f&mpshare=1&scene=1&srcid=1008Spw64tFyuoQZegtgVytP&sharer_sharetime=

=== thread safety analysis
https://insights.sei.cmu.edu/blog/thread-safety-analysis-in-c-and-c/
https://github.com/facebook/infer
https://github.com/microsoft/infersharp

=== futex
- 主要思想: fast userspace mutex
- 实现: https://github.com/torvalds/linux/blob/master/kernel/futex.c

=== kernel中的锁
- https://www.kernel.org/doc/html/latest/locking/index.html
- https://mirrors.edge.kernel.org/pub/linux/kernel/people/paulmck/perfbook/perfbook.html

=== 分布式锁
vs. 分布式事务
- 基于数据库来实现
- 基于缓存来实现
- 基于zookeeper来实现
- 基于consul来实现

=== 工程实践
- PTHREAD_MUTEX_ERRORCHECK
