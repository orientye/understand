:toc:
:toclevels: 5
:hardbreaks-option:

=== volatile

==== c/c++
- 作用
volatile was specifically intended to be used when interfacing with memory-mapped hardware,signal handlers and the setjmp machine code instruction.This makes volatile directly applicable to systems-level programming rather than normal applications-level programming.

    in C, and consequently C++, the volatile keyword was intended to:
    • allow access to memory-mapped I/O devices
    • allow uses of variables between setjmp and longjmp
    • allow uses of sig_atomic_t variables in signal handlers.

- 原子性(Atomicity)、可见性(Visibility)、有序性(Ordering)
Q: c/c++的volatile呢？
Q: java的volatile呢？

- NOTE
volatile is (nearly) useless for platform-agnostic, multithreaded application programming. It does not provide any synchronization, it does not create memory fences, nor does it ensure the order of execution of operations. It does not make operations atomic. It does not make your code magically thread safe. volatile may be the single-most misunderstood facility in all of C++.

    Bjarne Stroustrup says as much in TCPPPL4E:
    • Do not use volatile except in low-level code that deals directly with hardware.
    • Do not assume volatile has special meaning in the memory model. It does not.
    It is not -- as in some later languages -- a synchronization mechanism.
    To get synchronization, use atomic, a mutex, or a condition_variable

- 本质
prevents the compiler from performing optimization on code involving volatile objects, thus ensuring that each volatile variable assignment and read has a corresponding memory access

- 参考
https://en.wikipedia.org/wiki/Volatile_(computer_programming)
https://stackoverflow.com/questions/4557979/when-to-use-volatile-with-multi-threading
https://github.com/spotify/linux/blob/master/Documentation/zh_CN/volatile-considered-harmful.txt

==== java
