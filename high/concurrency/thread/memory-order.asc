:toc:
:toclevels: 5
:hardbreaks-option:

=== memory order

==== 概念
Q: memory order vs. cache coherence
https://course.ece.cmu.edu/~ece847c/S15/lib/exe/fetch.php?media=part2_2_sorin12.pdf

Q: memory order vs. atomic
https://stackoverflow.com/questions/15056237/which-is-more-efficient-basic-mutex-lock-or-atomic-integer

==== reorder问题
- compiler reorder(compile time)
- cpu reorder(runtime)
- 示例

    Initially, memory locations x and f both hold the value 0
    Processor #1:
        while (f == 0); 
        print x; 
    Processor #2:
        x = 42; 
        f = 1;

Q: 如何阻止compiler reorder
A: https://en.wikipedia.org/wiki/Memory_ordering

Q: 如何阻止cpu reorder?
A: https://en.wikipedia.org/wiki/Memory_ordering

Q: 单线程会发生指令重排吗(同理，运行在单个CPU core上的多线程)
A: 会，但不会影响结果

Q: 什么情况下肯定不会重排?

==== 可见性问题

==== cpu视角
x86: https://www.intel.com/content/www/us/en/architecture-and-technology/64-ia-32-architectures-software-developer-vol-3a-part-1-manual.html

chapter8 multi-processor management
8.2 memory ordering
8.2.5 strengthening or weakening the memory-order model:

• SFENCE — Serializes all store (write) operations that occurred prior to the SFENCE instruction in the program instruction stream, but does not affect load operations.

• LFENCE — Serializes all load (read) operations that occurred prior to the LFENCE instruction in the program
instruction stream, but does not affect store operations.

• MFENCE — Serializes all store and load operations that occurred prior to the MFENCE instruction in the
program instruction stream.

==== kernel视角
x86:
https://github.com/torvalds/linux/blob/master/arch/x86/include/asm/barrier.h

==== c++

===== 概念
https://en.cppreference.com/w/cpp/atomic/memory_order:

Acquire semantics is a property that can only apply to operations that read from shared memory, whether they are read-modify-write operations or plain loads. The operation is then considered a read-acquire. Acquire semantics prevent memory reordering of the read-acquire with any read or write operation that follows it in program order.

Release semantics is a property that can only apply to operations that write to shared memory, whether they are read-modify-write operations or plain stores. The operation is then considered a write-release. Release semantics prevent memory reordering of the write-release with any read or write operation that precedes it in program order.

Fence Semantics
A fence semantics combines both acquire and release semantics behavior.

- Sequenced-before

- Carries dependency

- Modification order

- Release sequence

- Dependency-ordered before

- Inter-thread happens-before

- Happens-before

- Visible side-effects

- Consume operation

- Acquire opertation

- Release operation

- Synchronizes-with

===== 本质
本质上两个问题:

    【1】______不可以重排到______的前面/后面
    【2】______对谁______可见

===== relaxed

===== release acquire

===== release consume

===== sequentially consistent
Q: 上述例子如果换成acquire/release，结果?
Q: seq_cst做了什么? 什么情况下使用?

===== thread_fence
std::atomic_thread_fence

extern "C" void atomic_thread_fence( std::memory_order order ) noexcept;

Establishes memory synchronization ordering of non-atomic and relaxed atomic accesses, as instructed by order, without an associated atomic operation.

===== implement
以memory_order_seq_cst  为例:
Ubuntu(g++, VM, Intel i5 4 core):    汇编指令mfence
Mac OSX(g++,  Intel i5 2 core):      汇编指令xchgl(= lock xchgl)
Win10(VS2015, Intel i5 4 core):      _ReadWriteBarrier, _InterlockedExchange

is_lock_free

==== java
http://gee.cs.oswego.edu/dl/jmm/cookbook.html
《深入理解java虚拟机》-第12章 Java内存模型与线程

==== 应用示例
https://github.com/facebook/rocksdb/blob/master/memtable/skiplist.h
https://github.com/apache/incubator-brpc/blob/master/src/bthread/work_stealing_queue.h

==== 参考
https://lwn.net/Articles/718628/