:toc:
:toclevels: 5
:hardbreaks-option:

=== condition variable

==== 概念
条件变量通常有wait和notify两个动作，wait用于阻塞挂起线程，直到另一个线程通过notify来唤醒。
例如在生产者和消费者问题中，消费者如何知道生成者是否生产出了可以消费的产品呢？通过while循环不停的去判断是否可消费是一种方式，但这种方式极其消耗CPU性能，这种情形需要使用条件变量来阻塞线程，降低CPU占用率。

==== wait
Q: wait作了什么

Q: 什么是虚假唤醒(spurious wakeup)
https://en.wikipedia.org/wiki/Spurious_wakeup

Q: 为什么会有虚假唤醒
https://stackoverflow.com/questions/8594591/why-does-pthread-cond-wait-have-spurious-wakeups

Q: 如何解决虚假唤醒
while 循环同时防范了两种问题: 既防范了语义上的干扰（多个消费者被唤醒但只有一个能拿到资源），以及最主要的，防范了虚假唤醒。
while 循环模式非常普遍，以至于在很多语言中它被直接集成到了条件变量的 API 中:

    C++: wait 方法可以接受一个谓词（lambda 表达式或函数），它会自动在循环中检查。
    Java: Object.wait() 也必须在 while 循环中使用。
        synchronized (obj) {
            while (conditionIsNotMet) {
                obj.wait();
            }
            // ...
        }
    Python: threading.Condition.wait() 也应在循环中使用。
        with cv:
            while not predicate():
                cv.wait()
        # ...

==== signal
Q: signal作了什么

Q: signal与unlock的顺序
顺序(1)：先解锁，后通知 (unlock then notify)
优点：
性能更好：由于锁已经被释放，被唤醒的线程不会立刻因为拿不到锁而被再次挂起。它和其它线程公平竞争。这避免了一次不必要的上下文切换（从线程 B 切换到线程 A，却发现线程 A 拿不到锁，又立刻切换出去）。
更公平：所有线程（被唤醒的和其它就绪的）在同一时间点开始竞争锁，调度更公平。
顺序(2)：先通知，后解锁 (notify then unlock)
缺点：性能损耗：导致了 “立刻的上下文切换”。线程会被毫无意义地唤醒一次，仅仅是为了尝试获取它肯定拿不到的锁，然后立刻又被挂起。这次上下文切换是纯粹的开销，被称为 “拖拽调度” 或是一种轻微的“惊群”效应。

Q: 什么是wait morphing
在后来的实现中，对顺序(2)的情况，如果线程被唤醒但是不能锁住mutex, 则线程被转移(morphing)到互斥量mutex的等待队列中，这样避免了上下文的切换造成的开销。

Q: signal与unlock的顺序选择哪一种
推荐采用(1)的顺序，即先解锁，再发唤醒信号。
在SUSv3 http://en.wikipedia.org/wiki/Single_UNIX_Specification 的规范中(pthread)，指明了两种顺序不管采用哪种，其实现效果都是一样的。
Java编程只能按照(2)的顺序，否则发生异常。

==== 注意事项
https://github.com/chenshuo/recipes/blob/master/thread/test/Waiter_test.cc

==== 实现
glibc: https://github.com/lattera/glibc/blob/master/nptl/pthread_cond_common.c

==== 参考
《The Linux Programming inTerface》 30.2
https://pubs.opengroup.org/onlinepubs/7908799/xsh/pthread_cond_wait.html