:toc:
:toclevels: 5
:hardbreaks-option:

=== priority
==== 概念
- 优先级反转
当高优先级线程在等待低优先级线程所拥有的资源时被无限期延迟，而低优先级线程由于存在不相关的中优先级线程而无法继续时，就会出现被称为优先级反转的现象。结果，高优先级线程实际上被较低的中等优先级线程拒绝访问 CPU。
例如，以优先级 4 运行的线程 T1 在获取锁之后被优先级为 8 的更高优先级线程 T2 抢占。随后，优先级为 12 的线程 T3 到达，抢占 T2，并在试图获取 T1 所持有的锁时被阻止。此时，T1 和 T2 都已准备好运行，但由于 T2 具有更高的优先级，因此它会继续执行，从而有效阻止 T3（一个优先级较高的线程）取得进展，因为 T1 无法运行并释放锁。
参考: https://learn.microsoft.com/en-us/windows/win32/procthread/priority-inversion

==== 调度
===== linux kernel
https://github.com/orientye/understanding-the-linux-kernel/blob/main/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Linux%E5%86%85%E6%A0%B8/%E8%BF%9B%E7%A8%8B/%E8%B0%83%E5%BA%A6.asc

===== glibc
https://man7.org/linux/man-pages/man3/pthread_attr_setschedpolicy.3.html
https://man7.org/linux/man-pages/man3/pthread_setschedprio.3.html
