:toc:
:toclevels: 5
:hardbreaks-option:

=== mutex

==== implement
- linux kernel
https://github.com/orientye/understanding-the-linux-kernel/blob/main/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Linux%E5%86%85%E6%A0%B8/%E8%BF%9B%E7%A8%8B/%E5%90%8C%E6%AD%A5.asc#%E4%BA%92%E6%96%A5%E9%94%81

- glibc
https://github.com/bminor/glibc/blob/master/nptl/pthread_mutex_lock.c

- gcc(libstdc++-v3)
https://github.com/gcc-mirror/gcc/blob/master/libstdc%2B%2B-v3/include/bits/std_mutex.h

- clang(libc++)
https://github.com/llvm/llvm-project/blob/master/libcxx/src/mutex.cpp 平台相关，例如linux通过pthread

==== management
===== c++
std::lock_guard vs. std::scoped_lock vs. std::unique_lock 等
参考:  https://en.cppreference.com/w/cpp/atomic.html#Generic_mutex_management

==== futex(fast userspace mutex)
在用户态进行无竞争的锁获取，只有在可能发生阻塞时才陷入内核
https://github.com/orientye/understanding-the-linux-kernel/blob/main/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Linux%E5%86%85%E6%A0%B8/%E8%BF%9B%E7%A8%8B/%E5%90%8C%E6%AD%A5.asc#futex

==== 参考
《The Linux Programming inTerface》30.1