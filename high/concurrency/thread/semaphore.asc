:toc:
:toclevels: 5
:hardbreaks-option:

=== semaphore
==== 概念
信号量是一种用于控制多线程/多进程访问共享资源的同步机制。

- vs. mutex

==== POSIX
命名信号量(Named Semaphore)与未命名信号量(Unnamed Semaphore)

==== cpp
since C++20
https://en.cppreference.com/w/cpp/atomic.html#Semaphores
counting_semaphore: 一个非负整数的计数器，用于控制对多个共享资源的访问。
binary_semaphore: 特化的 counting_semaphore<1>，计数器只能是 0 或 1，用于互斥或简单的信号传递。

==== implement
===== linux kernel
https://github.com/orientye/understanding-the-linux-kernel/blob/main/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Linux%E5%86%85%E6%A0%B8/%E8%BF%9B%E7%A8%8B/%E5%90%8C%E6%AD%A5.asc#%E4%BF%A1%E5%8F%B7%E9%87%8F

===== glibc
[source, c]
.https://elixir.bootlin.com/glibc/latest/source/sysdeps/nptl/internaltypes.h
----
/* Semaphore variable structure.  */
struct new_sem
{
#if __HAVE_64B_ATOMICS
  /* The data field holds both value (in the least-significant 32 bits) and
     nwaiters.  */
# if __BYTE_ORDER == __LITTLE_ENDIAN
#  define SEM_VALUE_OFFSET 0
# elif __BYTE_ORDER == __BIG_ENDIAN
#  define SEM_VALUE_OFFSET 1
# else
# error Unsupported byte order.
# endif
# define SEM_NWAITERS_SHIFT 32
# define SEM_VALUE_MASK (~(unsigned int)0)
  uint64_t data;
  int private;
  int pad;
#else
# define SEM_VALUE_SHIFT 1
# define SEM_NWAITERS_MASK ((unsigned int)1)
  unsigned int value;
  int private;
  int pad;
  unsigned int nwaiters;
#endif
};
----
unsigned int value;           // 信号量的当前值
int private;                  // 共享标志: 0=进程间, 1=线程间
unsigned int nwaiters;        // 

实际内存布局(x86_64):

    // sizeof(sem_t) = 32 bytes
    struct new_sem {
        unsigned int value;         // 偏移 0
        unsigned int nwaiters;      // 偏移 4  
        int private;                // 偏移 8
        // 填充到 32 字节保证缓存行对齐
        char __padding[20];
    };

int sem_init(sem_t *sem, int pshared, unsigned int value):
int __new_sem_init (sem_t *sem, int pshared, unsigned int value): https://elixir.bootlin.com/glibc/latest/source/nptl/sem_init.c

sem_wait(sem_t *sem):
int __new_sem_wait (sem_t *sem): https://elixir.bootlin.com/glibc/latest/source/nptl/sem_wait.c

int sem_post(sem_t *sem):
__new_sem_post (sem_t *sem): https://elixir.bootlin.com/glibc/latest/source/nptl/sem_post.c

int sem_destroy(sem_t *sem):
int __new_sem_destroy (sem_t *sem): https://elixir.bootlin.com/glibc/latest/source/nptl/sem_destroy.c