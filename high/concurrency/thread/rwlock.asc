:toc:
:toclevels: 5
:hardbreaks-option:

=== rwlock
==== 概念
读者-写者需保证对于一份资源操作满足以下条件:

    读写互斥
    写写互斥
    允许多个读者同时读取

readers-preference:
读者优先是读操作优先于写操作，即使写操作提出申请资源，但只要还有读者在读取操作，就还允许其他读者继续读取操作，直到所有读者结束读取，才开始写。
读优先可以提供很高的并发处理性能，但是在频繁读取的系统中，会长时间写阻塞，导致写饥饿。

writers-preference:
写者优先是写操作优先于读操作，如果有写者提出申请资源，在申请之前已经开始读取操作的可以继续执行读取，但是如果再有读者申请读取操作，则不能够读取，只有在所有的写者写完之后才可以读取。
写者优先解决了读者优先造成写饥饿的问题。但是若在频繁写入的系统中，会长时间读阻塞，导致读饥饿。

参考: https://en.wikipedia.org/wiki/Readers%E2%80%93writer_lock

==== impl
linux kernel: https://github.com/torvalds/linux/blob/master/include/linux/rwlock.h

glibc: https://github.com/bminor/glibc/tree/master/nptl

clang: https://github.com/llvm/llvm-project/blob/master/llvm/lib/Support/RWMutex.cpp (内部还是pthread)

java: http://tutorials.jenkov.com/java-concurrency/read-write-locks.html

==== Q&A
Q: vs. RCU

    The read-copy-update (RCU) algorithm is one solution to the readers–writers problem. RCU is wait-free for readers.

Q: vs. Copy On Write(cow)

Q: 写饥饿/读饥饿问题如何避免?

    写饥饿: The Linux kernel implements a special solution for few writers called seqlock.

Q: StampedLock(java8) vs. ReentrantReadWriteLock

=== std::shared_mutex
linux: pthread_rwlock_t
windows: slim-reader-writer-locks

==== slim-reader-writer-locks
参考:
https://stackoverflow.com/questions/1865412/is-there-a-cross-platform-version-of-window-vistas-slim-reader-writer-locks