:toc:
:toclevels: 5
:hardbreaks-option:

== coroutine

=== 概要

==== what

    co-cooperative and routines-functions
    vs. subroutine/function

==== why

    异步代码同步化
    轻量级; 用户态; 性能

==== vs. callback

    Q: 能取代callback吗
    A: 能
    Q: 比callback性能好吗
    A: 不一定

==== symmetric and asymmetric
- 非对称协程(asymmetric coroutines):

    与一个特定的调用者绑定，协程让出CPU时，只能让回给原调用者。
    不对称体现在:
    (1) 程序控制流转移到被调协程时使用resume操作，被调协程让出CPU时使用yield操作
    (2) 协程间的地位也不对等，非对称协程只能返回最初调用它的协程

- 对称协程(symmetric coroutines):

    被调协程启动之后就跟之前运行的协程没有任何关系了。
    一般而言只有一个yield操作，用于将程序控制流转移给另外的协程。
    对称协程机制一般需要一个调度器的支持，按一定调度算法去选择目标协程。

- 示例:

    对称协程: goroutine(goroutine不仅对称，还可以在多个线程上迁移)
    非对称协程: lua

- 参考
http://www.inf.puc-rio.br/~roberto/docs/MCC15-04.pdf[Revisiting Coroutines]
https://stackoverflow.com/questions/41891989/what-is-the-difference-between-asymmetric-and-symmetric-coroutines

==== stackful and stackless
- 概念

    stackful是指每个coroutine有独立的运行栈，切换coroutine时运行栈也会切换。

- 优缺点

    在表达力上，stackful占优:
    a stackful coroutine can be suspended from within a nested stackframe.
    Execution resumes at exactly the same point in the code where it was suspended before. 
    With a stackless coroutine, only the top-level routine may be suspended.
    Any routine called by that top-level routine may not itself suspend.
    This prohibits providing suspend/resume operations in routines within a general-purpose library.
    此外stackful意味着被调用者生命周期可以超越创建者的生命周期，可以从一个线程迁移到另一个线程？
    stackful支持first-class continuation

    在性能上，stackless占优

- 示例

    stackful: goroutine
    stackless: ES6 await/async, python中的协程, c++20

- 参考
https://stackoverflow.com/questions/28977302/how-do-stackless-coroutines-differ-from-stackful-coroutines
https://langdev.stackexchange.com/questions/697/what-are-the-benefits-of-stackful-vs-stackless-coroutines
https://www.zhihu.com/question/65647171
https://www.boost.org/doc/libs/1_84_0/libs/coroutine/doc/html/coroutine/intro.html

==== async/await
In computer programming, the async/await pattern is a syntactic feature of many programming languages that allows an asynchronous, non-blocking function to be structured in a way similar to an ordinary synchronous function. It is semantically related to the concept of a coroutine and is often implemented using similar techniques, and is primarily intended to provide opportunities for the program to execute other code while waiting for a long-running, asynchronous task to complete, usually represented by promises or similar data structures. The feature is found in C# 5.0, C++20, Python 3.5, F#, Hack, Julia, Dart, Kotlin 1.1, Rust 1.39, Nim 0.9.4, JavaScript ES2017, Swift 5.5 and Zig, with some experimental work in extensions, beta versions, and particular implementations of Scala.
参考: https://en.wikipedia.org/wiki/Async/await

特点: 一般来说stackless

=== 核心机制
- 状态
- 调度
- 通信

- 参考
https://www.cyhone.com/articles/analysis-of-cloudwu-coroutine/
https://mail.openjdk.org/pipermail/loom-dev/2019-November/000876.html

=== lua与coroutine
- 类别: 非对称, stackful
- 状态: lua_State
- 调度: 无线程级调度
- 通信: resume和yield参数
- 细节: 参考 https://github.com/orientye/understand/blob/main/lan/lua.asc#%E5%8D%8F%E7%A8%8B[《Lua协程》]

=== go与coroutine
- 类别: 对称, stackful
- 状态: G P M 默认2K
- 调度: M:N
- 通信: channel
- 细节: https://github.com/orientye/understand/blob/main/lan/go.asc#Goroutines-and-Channels[《Go协程》]

=== cpp与coroutine
==== 概览
- 状态:

    可以参考ucontext.h(实际上还是asm, 例如glibc的swapcontext.S)或者asm
    boost.context: https://github.com/boostorg/context
    setjmp/longjmp: 使用C标准库中的setjmp和longjmp
    使用汇编代码手动处理协程切换过程
        x86-64: System V AMD64 ABI
        https://en.wikipedia.org/wiki/X86_calling_conventions#x86-64_calling_conventions
        https://raw.githubusercontent.com/wiki/hjl-tools/x86-psABI/x86-64-psABI-1.0.pdf
        https://github.com/torvalds/linux/blob/master/arch/x86/entry/entry_64.S
        https://zhuanlan.zhihu.com/p/569907360

- 参考
https://en.cppreference.com/w/cpp/language/coroutines
https://open-std.org/JTC1/SC22/WG21/docs/papers/2018/n4775.pdf

==== libco
- 类别: 非对称, stackful(默认栈大小:128K)(Q: 为什么libco有共享栈?)
- 状态: https://github.com/Tencent/libco  Q: X64为什么只保存了14个寄存器？
- 调度: https://www.infoq.cn/article/CplusStyleCorourtine-At-Wechat
- 通信: co_cond_signal

Q: libco使用协程究竟解决什么问题

参考: https://www.cyhone.com/articles/analysis-of-libco/
参考: http://purecpp.org/purecpp/static/64a819e99584452aab70a7f9c307717f.pdf
参考: https://www.zhihu.com/question/52193579/answer/156692295

==== brpc
- 类别
- 状态: https://github.com/apache/incubator-brpc/blob/master/src/bthread/context.cpp 
- 调度: 线程调度，working stealing
- 通信
- 细节: 参考 https://github.com/orientye/understand/blob/main/misc/brpc.asc

参考: https://github.com/apache/incubator-brpc/blob/master/docs/cn/bthread.md

==== c++20
- 类别: 非对称，stackless
- 状态
- 调度
- 通信
- 细节

- 参考
https://en.cppreference.com/w/cpp/language/coroutines
https://www.modernescpp.com/index.php/c-20-coroutines-more-details
https://github.com/lewissbaker/cppcoro
https://github.com/yyzybb537/libgo

==== boost
https://www.boost.org/doc/libs/1_84_0/doc/html/boost_asio/overview/composition.html

=== javascript与coroutine
==== async/await
实现:
image:https://v8.dev/_img/fast-async/microtasks-vs-tasks.svg[height="256"]
image:https://v8.dev/_img/fast-async/await-under-the-hood.svg[height="256"]
image:https://v8.dev/_img/fast-async/node-10-vs-node-12.svg[height="256"]

On a high level there are tasks and microtasks in JavaScript. Tasks handle events like I/O and timers, and execute one at a time. Microtasks implement deferred execution for async/await and promises, and execute at the end of each task. The microtask queue is always emptied before execution returns to the event loop.

参考: https://v8.dev/blog/fast-async
参考: https://github.com/nodejs/node/blob/master/lib/internal/process/task_queues.js

性能测试:
image:coroutine/img/async-await-bm-node12.19.0.png[]
image:coroutine/img/async-await-bm-node10.21.0.png[]
参考: https://github.com/kyrylkov/promise-async-performance

Q: 以下函数, 执行流程是?/有无await有什么区别?
[source, js]
.async_await_js_code1
----
async function test() {
    console.log("test start");
    await async_func_a();
    await async_func_b();
    await async_func_c();
    console.log("test finish");
}
----

Q: javascript里使用async/await要注意什么事项?
A: 从上面的性能测试的结果看, 性能从高到低: callback > promise > async/await.

正确地使用async/await:
[source, js]
.async_await_js_code2
----
async function test() {
    console.log("test start");
    let result_a = async_func_a();
    let resutl_b = async_func_b();
    let result_c = async_func_c();
    await result_a;
    await result_b;
    await result_c;
    console.log("test finish");
}
----
上述async_await_js_code2代码比async_await_js_code1比性能会有明显上升, 经笔者测试, 某些场景下甚至会提升一个量级(10倍以上)。

为什么async_await_js_code2会更快呢？
因为async_await_js_code2能更好的并发，参考:
processTicksAndRejections(): https://github.com/nodejs/node/blob/master/lib/internal/process/task_queues.js

==== Promise
https://en.wikipedia.org/wiki/Futures_and_promises
https://stackoverflow.com/questions/58479537/where-is-the-implementation-of-promise-in-nodejs
https://stackoverflow.com/questions/17718673/how-is-a-promise-defer-library-implemented
https://www.freecodecamp.org/news/how-to-implement-promises-in-javascript-1ce2680a7f51/

==== Generator
此方案已经废弃

=== C#与coroutine
- 类别: 非对称，stackless
- 状态
- 调度
- 通信
- 细节: 参考 https://github.com/orientye/understand/blob/main/lan/c-sharp.asc#coroutine

=== rust与coroutine
- 类别: 非对称，stackless
- 状态
- 调度
- 通信
- 细节

=== python与coroutine
- 类别: 非对称，stackless
- 状态: 
- 调度: 
- 通信: 
- 细节: 参考 https://github.com/orientye/understand/blob/main/lan/python.asc#Coroutines-and-Tasks

=== java与coroutine
- 类别: 非对称，stackful
- 状态: 
- 调度: 
- 通信: 
- 细节: 参考 https://github.com/orientye/understand/blob/main/lan/java.asc#virtual-thread[《virtual thread》]