= 了解coroutine
:hardbreaks-option:
:revnumber: 0.0.1
:author: orient
:toc:
:homepage: http://orientye.com
<<<

== 介绍

- what

    co-cooperative and routines-functions
    vs. subroutine/function

- why

    轻量级; 用户态; 性能
    异步代码同步化

- vs. callback

    Q: 能取代callback吗
    Q: 比callback性能好吗

- 分类

Control Transfer Mechanism
      
    symmetric and asymmetric coroutines
       
    Although equivalent in terms of expressiveness, symmetric and asymmetric coroutines are not equivalent with respect to ease of use. Handlingand understanding the control flow of a program that employs even a moderate number of symmetric coroutines may require a considerable effort from a programmer. On the other hand, asymmetric coroutines behave like routines, in the sense that control is always transfered back to their invokers. Since even novice programmers are familiar with the concept of a routine, control sequencing is simpler to manage and understand. Moreover, asymmetric coroutines allow the development of more structured programs.

    symmetric: goroutine
    asymmetric: lua

Stackfulness
    
    Stackful coroutine mechanisms allow coroutines to suspend their execution from within nested functions; the next time the coroutine is resumed, its execution continues from the exact point where it suspended.

    此外stackful意味着被调用者生命周期可以超越创建者的生命周期，可以从一个线程迁移到另一个线程？ 性能上不如无栈？

    stackfulness：goroutine
    stackless：ES6 await/async, python中的协程, c++20

            

First-class versus constrained coroutines

参考: https://stackoverflow.com/questions/28977302/how-do-stackless-coroutines-differ-from-stackful-coroutines 
参考: http://www.inf.puc-rio.br/~roberto/docs/MCC15-04.pdf   Revisiting Coroutines
参考: https://www.cyhone.com/articles/analysis-of-cloudwu-coroutine/

== 核心机制

- 状态
- 调度
- 通信

== lua与coroutine

- 类别: 非对称, stackful
- 状态: lua_State
- 调度: 无线程级调度
- 通信: resume和yield参数
- 细节: 参考《了解Lua》

== go与coroutine

- 类别: 对称, stackful
- 状态: G P M 默认2K(Q: 调整时机呢?)
- 调度: M:N
- 通信: channel
- 细节: 参考《了解Go》

== c++与coroutine

- 类别: 非对称, stackless
- 状态: 
    
    可以参考ucontext.h(实际上还是asm, 例如glibc的swapcontext.S)或者asm
    boost.context: https://github.com/boostorg/context 

- 调度: 
- 通信: 
- 细节: 

=== 状态

x86-64: System V AMD64 ABI
TODO: img
参考: https://en.wikipedia.org/wiki/X86_calling_conventions#x86-64_calling_conventions

TODO: img
参考: https://raw.githubusercontent.com/wiki/hjl-tools/x86-psABI/x86-64-psABI-1.0.pdf

x86-64 entry.S contains the system-call and fault low-level handling routines.
参考: https://github.com/torvalds/linux/blob/master/arch/x86/entry/entry_64.S

=== libco

- 类别: 非对称, stackful(默认栈大小:128K)(Q: 为什么libco有共享栈?)
- 状态: https://github.com/Tencent/libco  Q: X64为什么只保存了14个寄存器？
- 调度: https://www.infoq.cn/article/CplusStyleCorourtine-At-Wechat
- 通信
- 细节: Q: libco使用协程究竟解决什么问题

参考: https://www.cyhone.com/articles/analysis-of-libco/
参考: http://purecpp.org/purecpp/static/64a819e99584452aab70a7f9c307717f.pdf
参考: https://www.zhihu.com/question/52193579/answer/156692295

=== brpc

- 类别
- 状态: https://github.com/apache/incubator-brpc/blob/master/src/bthread/context.cpp 
- 调度: 线程调度， working stealing
- 通信
- 细节: 参考《了解brpc》

=== 其它

参考: https://github.com/lewissbaker/cppcoro
参考: https://github.com/yyzybb537/libgo

== async/await

In computer programming, the async/await pattern is a syntactic feature of many programming languages that allows an asynchronous, non-blocking function to be structured in a way similar to an ordinary synchronous function. It is semantically related to the concept of a coroutine and is often implemented using similar techniques, and is primarily intended to provide opportunities for the program to execute other code while waiting for a long-running, asynchronous task to complete, usually represented by promises or similar data structures. The feature is found in C# 5.0, Python 3.5, Kotlin 1.1, Rust 1.39 and JavaScript ES2017, with some experimental work in extensions, beta versions, and particular implementations of Scala and C++.

参考: https://en.wikipedia.org/wiki/Async/await

特点: 一般来说stackless

参考: https://www.zhihu.com/question/65647171

=== javascript

async/await:

https://github.com/nodejs/node/blob/master/lib/internal/process/task_queues.js

TODO: 图

参考: https://v8.dev/blog/fast-async
参考: https://github.com/kyrylkov/promise-async-performance

Promise:

https://en.wikipedia.org/wiki/Futures_and_promises

实现:
https://github.com/nodejs/node/blob/master/deps/v8/src/builtins/builtins-promise-gen.h
https://github.com/nodejs/node/blob/master/deps/v8/src/builtins/builtins-promise-gen.cc
https://github.com/nodejs/node/blob/master/deps/v8/src/runtime/runtime-promise.cc
https://github.com/nodejs/node/blob/master/deps/v8/src/builtins/builtins-promise.h
https://github.com/nodejs/node/blob/master/deps/v8/src/objects/js-promise.h
https://github.com/nodejs/node/blob/master/deps/v8/src/objects/js-promise-inl.h
https://github.com/nodejs/node/blob/master/lib/internal/process/promises.js
参考: https://stackoverflow.com/questions/58479537/where-is-the-implementation-of-promise-in-nodejs

https://stackoverflow.com/questions/17718673/how-is-a-promise-defer-library-implemented
https://www.freecodecamp.org/news/how-to-implement-promises-in-javascript-1ce2680a7f51/

at processTicksAndRejections (internal/process/task_queues.js:97:5)
https://github.com/nodejs/node/blob/master/lib/internal/process/task_queues.js

Generator: (old)