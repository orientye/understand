= c#
:revnumber: 0.0.1
:author: orient
:homepage: http://orientye.com
:toc:
:toclevels: 5
:hardbreaks-option:
<<<

== 概览
=== .NET实现

    .NET Framework
        原始 .NET。 它提供对 Windows 和 Windows Server 的广泛功能的访问权限。
    Mono
        原始社区和开放源代码 .NET。 一个跨平台 .NET Framework 实现。
        积极支持 Android、iOS 和 WebAssembly。
    .NET (Core) -- 新式 .NET。
        .NET 的一个跨平台开放源代码实现
        针对云时代进行了反思，同时与 .NET Framework 保持极大的兼容。
        积极支持 Linux、macOS 和 Windows。
    参考: https://learn.microsoft.com/zh-cn/dotnet/core/introduction#net-ecosystem

=== 版本
https://dotnet.microsoft.com/en-us/platform/support/policy/dotnet-core

=== 语言规范
https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/language-specification/readme

== 核心
=== 委托
委托是持有一个或多个方法的对象。

两种方式调用委托:

    一种是像调用方法一样调用委托
    一种是使用委托的Invoke方法

多个方法与返回值:

    添加方法按顺序
    调用列表中最后一个方法返回的值即是委托调用的返回值

匿名方法与Lambda表达式:

    MyDel del = delegate(int x) { return x + 1; } ;     //匿名方法，不推荐
    MyDel del =         (int x) => { return x + 1; } ;  //Lambda，推荐

vs-event-Action-Func:
https://stackoverflow.com/questions/5600930/what-to-use-delegate-event-or-funct

Events:
https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/events/

Action:
https://learn.microsoft.com/en-us/dotnet/api/system.action

Func:
https://learn.microsoft.com/en-us/dotnet/api/system.func-2

=== 特性(attribute)
https://learn.microsoft.com/en-us/dotnet/csharp/advanced-topics/reflection-and-attributes/
https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/attributes/global

=== 反射(reflection)
https://learn.microsoft.com/en-us/dotnet/csharp/advanced-topics/reflection-and-attributes/

https://learn.microsoft.com/en-us/dotnet/api/system.activator
https://stackoverflow.com/questions/6582259/fast-creation-of-objects-instead-of-activator-createinstancetype

https://mattwarren.org/2016/12/14/Why-is-Reflection-slow/

=== 泛型
https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/new-constraint
https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/where-generic-type-constraint

=== expression-trees
https://learn.microsoft.com/en-us/dotnet/csharp/advanced-topics/expression-trees/

=== Q&A
==== const-vs-readonly
const: compile-time
readonly: runtime
static readonly
https://stackoverflow.com/questions/55984/what-is-the-difference-between-const-and-readonly-in-c
https://stackoverflow.com/questions/5142349/declare-a-const-array
《Effective C# 3rd》Item2

==== out-vs-ref
https://stackoverflow.com/questions/388464/whats-the-difference-between-the-ref-and-out-keywords

==== internal-vs-private
https://stackoverflow.com/questions/3813485/internal-vs-private-access-modifiers

==== struct-vs-class
https://learn.microsoft.com/en-us/dotnet/standard/design-guidelines/choosing-between-class-and-struct
https://stackoverflow.com/questions/13049/whats-the-difference-between-struct-and-class-in-net

==== string-vs-stringbuilder
https://stackoverflow.com/questions/3069416/difference-between-string-and-stringbuilder-in-c-sharp

==== int[][] -vs- int[,]
int[][]锯齿数组:
每一个元素本身是一个数组，但数组的长度可以不相同。
int[,]二维数组:
真正的二维数组，具有固定行数和列数。

==== properties
https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/properties

==== 可为空类型
https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/builtin-types/nullable-value-types
https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/builtin-types/nullable-reference-types
https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/operators/member-access-operators#null-conditional-operators--and-
https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/operators/null-coalescing-operator

==== casting-and-type-conversions
https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/types/casting-and-type-conversions
https://learn.microsoft.com/en-us/dotnet/csharp/fundamentals/tutorials/safely-cast-using-pattern-matching-is-and-as-operators
《Effective C# 3rd》Item3
https://www.reddit.com/r/csharp/comments/179834u/when_to_parse_cast_or_convert/

==== 程序集
https://learn.microsoft.com/en-us/dotnet/standard/assembly/

==== partial-classes-and-methods
https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/partial-classes-and-methods

==== 默认值
https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/builtin-types/default-values

==== 接口
https://learn.microsoft.com/en-us/dotnet/csharp/fundamentals/types/interfaces
For more information about explicit implementation, see Explicit Interface Implementation and Interface Properties:
https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/interfaces/explicit-interface-implementation
https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/interface-properties

==== the-object-type
https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/builtin-types/reference-types#the-object-type

box-and-unbox:
https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/types/boxing-and-unboxing

anonymous-types:
https://learn.microsoft.com/en-us/dotnet/csharp/fundamentals/types/anonymous-types
vs-dictionary:
https://stackoverflow.com/questions/29413942/c-sharp-anonymous-object-with-properties-from-dictionary
特点:
1. 简洁，快速构建和传递一些简单的数据结构，而不必为每个小的数据集合都定义一个专门的类。
2. 自动属性推断
编译器会根据初始化表达式中的属性名称和值自动推断出匿名类型的结构。
3. 不可变（通常情况下）
匿名类型的对象在创建后通常是不可变的，这意味着不能修改其属性的值。一旦创建了一个匿名类型的对象，它的属性值就被固定下来。这种不可变性可以带来一些好处，例如可以确保数据的一致性和线程安全性。
局限:
不能在方法外部定义，并且不能作为方法参数传递，也不能作为返回类型

==== dynamic
https://stackoverflow.com/questions/3442821/dynamic-vs-object-type
https://learn.microsoft.com/en-us/dotnet/api/system.dynamic

ExpandoObject:
https://learn.microsoft.com/en-us/dotnet/api/system.dynamic.expandoobject
https://stackoverflow.com/questions/1653046/what-are-the-true-benefits-of-expandoobject
https://learn.microsoft.com/en-us/dotnet/fundamentals/runtime-libraries/system-dynamic-expandoobject
vs-dictionary:
https://stackoverflow.com/questions/3522591/expandoobject-vs-dictionary-from-a-performance-point-of-view

==== partial
https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/partial-classes-and-methods

== concurrency

=== asynchronous-programming-patterns
https://learn.microsoft.com/en-us/dotnet/standard/asynchronous-programming-patterns/

Task-based Asynchronous Pattern (TAP), 即async/await模式
是异步编程模型的推荐方式，since .NET Framework 4
另外两种模式均不推荐:
Event-based Asynchronous Pattern (EAP)
Asynchronous Programming Model (APM) pattern (also called the IAsyncResult pattern)

=== parallel-programming
https://learn.microsoft.com/en-us/dotnet/standard/parallel-programming/

=== threading
https://learn.microsoft.com/en-us/dotnet/standard/threading/

=== coroutine
==== 概览
https://learn.microsoft.com/en-us/dotnet/csharp/asynchronous-programming/
https://learn.microsoft.com/en-us/dotnet/csharp/asynchronous-programming/task-asynchronous-programming-model
https://learn.microsoft.com/en-us/dotnet/csharp/asynchronous-programming/task-asynchronous-programming-model#BKMK_Threads

https://www.zhihu.com/question/554133167

https://stackoverflow.com/questions/18013523/when-correctly-use-task-run-and-when-just-async-await
https://stackoverflow.com/questions/21879606/async-await-threading-internals

==== 同步上下文
异步函数能够回到正确的线程中，是因为使用了SynchronizationContext类。
该类早在.NET 2.0中就已存在，供BackgroundWorker等其他组件使用。
SynchronizationContext涵盖了在适当的线程上执行委托这一理念。
不同的执行环境使用不同的上下文。例如，某个上下文可能会从线程池中取出一个线程并执行给定的行为。

==== 语法和语义
async修饰符在生成的代码中没有作用，但建议加上。
异步方法的返回类型: void/Task(可以认为是Task<void>)/Task<TResult>

对于一个异步方法，只有在作为事件订阅者时才应该返回void。在其他不需要特定返回值的情况下，最好将方法声明为返回Task。这样，调用者可以等待操作完成，以及探测失败情况等。

还有一个关于异步方法签名的约束:
所有参数都不能使用out或ref修饰符。这是因为这些修饰符是用于将通信信息返回给调用代码的；而且在控制返回给调用者时，某些异步方法可能还没有开始执行，因此引用参数可能还没有赋值。当然，更奇怪的是：将局部变量作为实参传递给ref形参，异步方法可以在调用方法已经结束的情况下设置该变量。这并没有多大意义，所以编译器干脆禁止这么做。

await的约束:
不能在catch或finally块、非异步匿名函数、lock语句块或不安全代码中使用。
这些约束条件是为了保证安全，特别是关于锁的约束。

==== 最佳实践
https://learn.microsoft.com/en-us/dotnet/csharp/asynchronous-programming/async-scenarios#important-info-and-advice
https://docs.microsoft.com/en-us/archive/msdn-magazine/2013/march/async-await-best-practices-in-asynchronous-programming
https://blog.stephencleary.com/2016/12/eliding-async-await.html

==== 实现
https://devblogs.microsoft.com/dotnet/how-async-await-really-works/
中文: https://zhuanlan.zhihu.com/p/661130031

https://learn.microsoft.com/en-us/shows/on-dotnet/writing-async-await-from-scratch-in-csharp-with-stephen-toub

async/await本质上只是一个语法糖，它并不产生线程，只是在编译时把语句的执行逻辑改了。

SynchronizationContext:
在线程切换过程中保存调用线程的上下文环境，在异步任务完成后使用此线程同步上下文执行后继代码。
https://learn.microsoft.com/en-us/dotnet/api/system.threading.synchronizationcontext
[source, csharp]
----
public static void DoWork()
{
    //On UI thread
    var sc = SynchronizationContext.Current;

    ThreadPool.QueueUserWorkItem(delegate
    {
        //... async task：do work on ThreadPool
        sc.Post(delegate
        {
             // do work on the original context (UI)
        }, null);
    });
}
----

https://learn.microsoft.com/en-us/dotnet/csharp/asynchronous-programming/async-scenarios
http://www.xyting.org/2017/02/28/understand-async-await-in-depth.html
https://www.cnblogs.com/brookshi/p/5240510.html
https://learn.microsoft.com/en-us/dotnet/api/system.runtime.compilerservices.iasyncstatemachine
https://learn.microsoft.com/en-us/archive/msdn-magazine/2011/february/msdn-magazine-parallel-computing-it-s-all-about-the-synchronizationcontext

==== 执行过程
[source, csharp]
----
namespace TestCoroutine
{
    internal class Program
    {
        static async Task<int> FuncAsync()
        {
            Func1();
            Func2();
            await Func3Async();
            await Func4Async();
            Func5();
            return 1;
        }

        static void Func1()
        {
            Console.WriteLine("Func1");
        }

        static void Func2()
        {
            Console.WriteLine("Func2");
        }

        static async Task<int> Func3Async()
        {
            Console.WriteLine("Func3Async Begin");
            await Task.Delay(1);
            Console.WriteLine("Func3Async End");
            return 1;
        }

        static async Task<int> Func4Async()
        {
            Console.WriteLine("Func4Async Begin");
            await Task.Delay(2);
            Console.WriteLine("Func4Async End");
            return 2;
        }

        static void Func5()
        {
            Console.WriteLine("Func5");
        }

        static async Task<int> Main(string[] args)
        {
            await FuncAsync();
            Console.WriteLine("Main 方法完成");
            return 0;
        }
    }
}
----
Q: 一旦FuncAsync开始执行，Func1()与Func2()是否一定会同时执行完毕？
Q: Func3Async()与Func4Async()如何被调度？
Func3Async()反编译结果:
[source, csharp]
----
[CompilerGenerated]
private sealed class <Func3Async>d__3 : IAsyncStateMachine
{
	public int <>1__state;

	public AsyncTaskMethodBuilder<int> <>t__builder;

	private TaskAwaiter <>u__1;

	private void MoveNext()
	{
		int num = <>1__state;
		int result;
		try
		{
			TaskAwaiter awaiter;
			if (num != 0)
			{
				Console.WriteLine("Func3Async Begin");
				awaiter = Task.Delay(1).GetAwaiter();
				if (!awaiter.IsCompleted)
				{
					num = (<>1__state = 0);
					<>u__1 = awaiter;
					<Func3Async>d__3 stateMachine = this;
					<>t__builder.AwaitUnsafeOnCompleted(ref awaiter, ref stateMachine);
					return;
				}
			}
			else
			{
				awaiter = <>u__1;
				<>u__1 = default(TaskAwaiter);
				num = (<>1__state = -1);
			}
			awaiter.GetResult();
			Console.WriteLine("Func3Async End");
			result = 1;
		}
		catch (Exception exception)
		{
			<>1__state = -2;
			<>t__builder.SetException(exception);
			return;
		}
		<>1__state = -2;
		<>t__builder.SetResult(result);
	}

	void IAsyncStateMachine.MoveNext()
	{
		//ILSpy generated this explicit interface implementation from .override directive in MoveNext
		this.MoveNext();
	}

	[DebuggerHidden]
	private void SetStateMachine(IAsyncStateMachine stateMachine)
	{
	}

	void IAsyncStateMachine.SetStateMachine(IAsyncStateMachine stateMachine)
	{
		//ILSpy generated this explicit interface implementation from .override directive in SetStateMachine
		this.SetStateMachine(stateMachine);
	}
}
----

关键组件解析：
IAsyncStateMachine 接口：
Func3Async 方法被编译成了一个实现了 IAsyncStateMachine 接口的类。这个接口提供了异步方法所需的机制，例如执行方法和处理状态转移的 MoveNext() 方法。

<>1__state：
这是状态机用来追踪执行流的状态变量。它帮助编译器追踪异步方法应该从哪个位置继续执行。例如，方法开始时，<>1__state 被设置为 0。在遇到 await 时，状态变量会改变，用来表示异步方法应该在某个点继续执行。

AsyncTaskMethodBuilder<int> <>t__builder：
AsyncTaskMethodBuilder 是一个结构体，用于内部管理异步方法的结果。它维护了一个 int 类型的任务，这意味着异步方法最终会返回一个 int 类型的结果。
<>t__builder 负责设置异步方法的结果（SetResult）、处理异常（SetException）以及报告完成（AwaitUnsafeOnCompleted）。

TaskAwaiter <>u__1：
这是一个 TaskAwaiter 类型的变量，用于存储 Task.Delay(1) 的 awaiter。TaskAwaiter 是一个结构体，用来等待异步任务的完成。如果任务尚未完成，状态机会保存当前的 awaiter，并且在任务完成后，恢复执行。
MoveNext()：

这是状态机的核心方法，负责推动异步方法的执行。它根据当前的状态（<>1__state）判断方法应该从哪里继续执行。状态机根据当前的状态执行下一步，或者在需要时等待异步任务的完成。
这个方法的执行流程大致如下：
初始时（num != 0），打印 "Func3Async Begin"，然后调用 Task.Delay(1)，并获取其 awaiter（等待器）。如果 Task.Delay 还没有完成，状态机会保存当前的 awaiter，并且将状态设置为 0，然后使用 AwaitUnsafeOnCompleted 调度后续操作。
当 Task.Delay 完成后，状态会恢复为 -1，然后继续执行方法的后续部分。
如果在执行过程中发生异常，状态机会将状态设置为 -2，并通过 <>t__builder.SetException 抛出异常。
如果执行成功，状态机会调用 <>t__builder.SetResult(result) 来设置结果。
异常处理：

如果方法执行过程中抛出异常，捕获异常后，通过 <>t__builder.SetException 将异常传递给异步方法的调用者。
状态转换：

<>1__state 的值对于方法的执行流程至关重要。它帮助状态机确定在每次 MoveNext() 调用时，应该从哪个位置继续执行。每次异步操作完成后，状态机会更新状态，决定下一步执行的位置。
简化的执行流程：
方法开始时，调用 MoveNext()。
如果 await 还没有完成，保存当前状态（num = 0）和 awaiter，并返回，等待任务完成。
当 Task.Delay 完成后，恢复执行，num 设置为 -1，继续后续操作。
执行成功后，通过 SetResult 设置方法的结果。
主要观察点：
状态机：MoveNext() 是异步方法的核心，它将整个异步方法拆分为多个部分。每次调用 MoveNext() 都会检查当前的状态并继续执行。
TaskAwaiter：TaskAwaiter 用于追踪异步任务的状态，在 await 期间，状态机会在任务完成时恢复执行。
异常处理：如果在异步操作中出现异常，状态机会捕获并通过 SetException 通知调用者。

==== 性能
https://learn.microsoft.com/en-us/archive/msdn-magazine/2011/october/asynchronous-programming-async-performance-understanding-the-costs-of-async-and-await

==== ValueTask
https://learn.microsoft.com/en-us/dotnet/api/system.threading.tasks.valuetask
https://devblogs.microsoft.com/dotnet/understanding-the-whys-whats-and-whens-of-valuetask/

==== Yield and Enumerator
- async iterators
https://learn.microsoft.com/en-us/archive/msdn-magazine/2019/november/csharp-iterating-with-async-enumerables-in-csharp-8
https://www.naveedulhaq.com/index.php/dot-net-core/combining-async-and-yield-in-c/

- 规范
https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/statements/yield
https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/language-specification/statements#1315-the-yield-statement

==== 参考
《深入理解C#》第三版 chapter15 使用async/await进行异步编程
https://devblogs.microsoft.com/pfxteam/

=== API
https://learn.microsoft.com/en-us/dotnet/api/system.threading

https://learn.microsoft.com/en-us/dotnet/api/system.threading.tasks.task

https://learn.microsoft.com/en-us/dotnet/api/system.threading.tasks.taskcompletionsource-1

=== Q&A
https://devblogs.microsoft.com/pfxteam/asyncawait-faq/

- await Task<T> and Task<T>.Result?
https://stackoverflow.com/questions/27464287/
https://stackoverflow.com/questions/32239661/

- task-run-vs-task-factory-startnew
https://devblogs.microsoft.com/pfxteam/task-run-vs-task-factory-startnew/
https://stackoverflow.com/questions/38423472/what-is-the-difference-between-task-run-and-task-factory-startnew

== 内存

== API
=== linq
https://learn.microsoft.com/en-us/dotnet/csharp/linq/

=== JSON
==== newtonsoft
https://stackoverflow.com/questions/38558844/jcontainer-jobject-jtoken-and-linq-confusion
https://www.newtonsoft.com/json/help/html/T_Newtonsoft_Json_Linq_JToken.htm

vs. system-text-json
https://learn.microsoft.com/en-us/dotnet/standard/serialization/system-text-json/migrate-from-newtonsoft

==== system-text-json
https://learn.microsoft.com/en-us/dotnet/standard/serialization/system-text-json/overview

==== 参考
https://www.cnblogs.com/stulzq/p/17118904.html

=== attribute
https://learn.microsoft.com/en-us/dotnet/api/system.serializableattribute

== 工具
=== roslyn
https://github.com/dotnet/roslyn
https://learn.microsoft.com/en-us/dotnet/csharp/roslyn-sdk/

CSharpSyntaxWalker:
https://learn.microsoft.com/en-us/dotnet/api/microsoft.codeanalysis.csharp.csharpsyntaxwalker

=== codedom
https://stackoverflow.com/questions/7852926/microsoft-roslyn-vs-codedom
https://github.com/dotnet/runtime/tree/main/src/libraries/System.CodeDom

=== t4
https://en.wikipedia.org/wiki/Text_Template_Transformation_Toolkit
https://learn.microsoft.com/en-us/visualstudio/modeling/code-generation-and-t4-text-templates

=== online
https://dotnet.microsoft.com/en-us/platform/try-dotnet

=== 编译过程、IL、反编译等
https://github.com/icsharpcode/ILSpy/releases

https://sharplab.io/


== 代码风格
https://google.github.io/styleguide/csharp-style.html

== 参考
https://github.com/thangchung/awesome-dotnet-core
https://learn.microsoft.com/en-us/dotnet/api/
https://wizardforcel.gitbooks.io/effective-csharp/