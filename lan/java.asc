= java
:revnumber: 0.0.1
:author: orient
:homepage: http://orientye.com
:toc:
:toclevels: 5
:hardbreaks-option:
<<<

== concurrency

== 热更新
Javassist(Java Programming Assistant)
Byte Buddy

== JVM

== 性能优化

== 框架
=== spring
==== 概念
- SSM框架: Spring + Spring MVC + MyBatis

- 控制反转(Inversion Of Control即IOC)与依赖注入(Dependency Injection即DI)

- AOP(面向切面编程，Aspect Oriented Program)
实现方式:
在Java平台上，对于AOP的切入，有3种方式:
编译期: 在编译时，由编译器把切面调用编译进字节码，这种方式需要定义新的关键字并扩展编译器，AspectJ就扩展了Java编译器，使用关键字aspect来实现切入
类加载器: 在目标类被装载到JVM时，通过一个特殊的类加载器，对目标类的字节码重新"增强"
运行期: 目标对象和切面都是普通Java类，通过JVM的动态代理功能或者第三方库实现运行期动态切入
最简单的方式是第三种，Spring的AOP实现就是基于JVM的动态代理。由于JVM的动态代理要求必须实现接口，如果一个普通类没有业务接口，就需要通过CGLIB或者Javassist这些第三方库实现。
AOP技术本质就是一个动态代理，把一些常用功能如权限检查、日志、事务等，从每个业务方法中剥离出来。
参考: https://en.wikipedia.org/wiki/Aspect-oriented_programming

==== spring boot
https://spring.io/projects/spring-boot

==== 参考
https://spring.io/
https://spring.io/projects

== 参考
https://github.com/akullpp/awesome-java