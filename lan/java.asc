= java
:revnumber: 0.0.1
:author: orient
:homepage: http://orientye.com
:toc:
:toclevels: 5
:hardbreaks-option:
<<<

== 历史
https://en.wikipedia.org/wiki/Java_version_history

== 基础
=== OOP

=== 泛型

=== 注解
https://docs.oracle.com/javase/tutorial/java/annotations/index.html

=== 异常

=== 反射

=== SPI
Service Provider Interface

== concurrency
=== 介绍

=== API
- java.util.concurrent
- java.util.concurrent.locks
- java.util.concurrent.atomic

== 热更新
Javassist(Java Programming Assistant)
Byte Buddy

== JVM

== 性能优化

== 框架
=== spring
==== 概念
- SSM框架: Spring + Spring MVC + MyBatis

- 控制反转(Inversion Of Control即IOC)与依赖注入(Dependency Injection即DI)

- AOP(面向切面编程，Aspect Oriented Program)
实现方式:
在Java平台上，对于AOP的切入，有3种方式:
编译期: 在编译时，由编译器把切面调用编译进字节码，这种方式需要定义新的关键字并扩展编译器，AspectJ就扩展了Java编译器，使用关键字aspect来实现切入
类加载器: 在目标类被装载到JVM时，通过一个特殊的类加载器，对目标类的字节码重新"增强"
运行期: 目标对象和切面都是普通Java类，通过JVM的动态代理功能或者第三方库实现运行期动态切入
最简单的方式是第三种，Spring的AOP实现就是基于JVM的动态代理。由于JVM的动态代理要求必须实现接口，如果一个普通类没有业务接口，就需要通过CGLIB或者Javassist这些第三方库实现。
AOP技术本质就是一个动态代理，把一些常用功能如权限检查、日志、事务等，从每个业务方法中剥离出来。
参考: https://en.wikipedia.org/wiki/Aspect-oriented_programming

==== spring boot
https://spring.io/projects/spring-boot
https://docs.spring.io/spring-boot/docs/current/reference/html/index.html

spring boot中的配置:
核心设计理念: 对配置信息的管理采用约定优于配置
配置文件与Profile
代码控制与Profile

配置加载顺序:
spring boot在启动时会扫描以下位置的application.properties或者application.yml文件作为全局配置文件:

    file:./config/
    file:./
    classpath:/config/
    classpath:/
    优先级从高到低

spring boot会全部扫描这四个位置，扫描规则是高优先级配置内容会覆盖低优先级配置内容。如果高优先级的配置文件中存在与低优先级配置文件不冲突的属性，会形成一种互补配置。

==== spring data
https://spring.io/projects/spring-data

==== spring cloud
https://spring.io/projects/spring-cloud

===== spring-cloud-alibaba
https://github.com/alibaba/spring-cloud-alibaba
Sentinel
Nacos
RocketMQ
Seata
Alibaba Cloud OSS
Alibaba Cloud SMS
Alibaba Cloud SchedulerX

==== reactive
https://spring.io/reactive
https://projectreactor.io/

==== spring webflux
https://docs.spring.io/spring-framework/reference/web/webflux.html

==== JdbcTemplate
https://www.baeldung.com/spring-jdbc-jdbctemplate
https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html

==== RestTemplate
https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/client/RestTemplate.html

==== spring security
https://spring.io/projects/spring-security

==== 监控
https://docs.spring.io/spring-boot/docs/current/reference/html/actuator.html#actuator

==== 管理
https://github.com/codecentric/spring-boot-admin

==== 测试
https://spring.io/guides/gs/testing-web/

==== 参考
https://spring.io/
https://spring.io/projects
https://spring.io/blog/
https://github.com/spring-projects/spring-boot
https://github.com/spring-projects/spring-framework

== 工具
lombok: https://projectlombok.org/

== 参考
https://github.com/akullpp/awesome-java
https://docs.oracle.com/en/java/javase/index.html