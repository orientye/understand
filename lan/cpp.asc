= 了解 C++
:hardbreaks-option:
:revnumber: 0.0.1
:author: orient
:toc:
:homepage: http://orientye.com
<<<

== history
https://en.cppreference.com/w/cpp/language/history

== 变量与函数
- 类型: https://en.cppreference.com/w/cpp/types (basic types, RTTI, type traits) 
- 值
- 物理: 内存
- 运算 (eg. sizeof, &)
- 指针变量
- 数组
- 引用 https://en.cppreference.com/w/cpp/language/reference

- 参数与返回值
- 调用规则: https://en.wikipedia.org/wiki/X86_calling_conventions
- 构造函数与析构函数
- 默认构造函数
- copy constructor与copy assignment operator
- move constructor与move assignment operator
- new与delete(new operator, operator new, placement new, delete同理)
- 关键字: https://en.cppreference.com/w/cpp/keyword (eg. const, volatile)

== 机器级表示与汇编嵌入
- 《CSAPP》chapter3

- https://en.cppreference.com/w/cpp/language/asm
- https://gcc.gnu.org/onlinedocs/gcc/Using-Assembly-Language-with-C.html
- https://clang.llvm.org/compatibility.html#inline-asm

== object-oriented
- 封装

- 继承

    继承
    多重继承
    虚拟继承
    参考《Inside the C++ Model Object》3.4

- 多态

- Inside the C++ Model Object

    gcc --fdump-class-hierarchy xyz.cpp
    clang -Xclang -fdump-record-layouts xyz.cpp
    visual studio: 编译选项 /d1reportSingleClassLayout<类名> 或者 /d1reportAllClassLayout(所有类相关布局)

== template

== STL
=== container
https://en.cppreference.com/w/cpp/container

=== iterator
https://en.cppreference.com/w/cpp/iterator

=== algorithm
https://en.cppreference.com/w/cpp/algorithm

=== adaptor
- 容器适应器
https://en.cppreference.com/w/cpp/container

- 迭代器适应器
https://en.cppreference.com/w/cpp/iterator (eg. reverse_iterator)

- 函数适应器
https://en.cppreference.com/w/cpp/utility/functional

=== functor
https://en.cppreference.com/w/cpp/utility/functional

=== allocator
https://en.cppreference.com/w/cpp/memory/allocator

== C++11
https://en.cppreference.com/w/cpp/11

=== lambla
lambla == 匿名函数
lambla vs. closure
caputure
https://en.cppreference.com/w/cpp/language/lambda
https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/stubs/callback.h

=== shared_ptr/weak_ptr/unique_ptr
Q: 是否线程安全
std::enable_shared_from_this
shared_from_this/weak_from_this

== C++14
https://en.cppreference.com/w/cpp/14

== C++17
https://en.cppreference.com/w/cpp/17

== C++20
https://en.cppreference.com/w/cpp/20

== 并发
=== 线程
参考:《了解concurrency》c++部分

=== 协程
参考:《了解coroutine》c++部分

== 工程实践
参考:《C++ Convention》

== 推荐
https://en.cppreference.com
https://google.github.io/styleguide/cppguide.html
https://github.com/MattPD/cpplinks
https://github.com/fffaraz/awesome-cpp
