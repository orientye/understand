了解 Go

2018-09-03,  orient@thu

blog:            http://orientye.com
微信公众号:   深入理解计算机系统

 程序结构

●  命名 
    推荐驼峰式命名

●  包
    初始化

●  变量
    指针变量，在Go语言中，返回函数中局部变量地址是安全的。

●  执行顺序
      import --> const --> var --> init() --> main()

数据类型

●  基础类型
    数值（整形，浮点，复数）， 字符串， 布尔

●  复合类型
    数组， 结构体

●  引用类型
    指针，切片，字典，函数，通道

●  接口类型

  函数

●   func  name(parameter-list) (result list) {
             body
     }

●   错误
     传播；
      重新尝试失败操作；
      输出错误信息并结束程序；
      只输出错误信息；
      忽略；

●   closure

●   defer

●   panic  & recover

  方法

●   func  receiver name(parameter-list) (result list) {
             body
     }

●   receiver ：  (变量名  变量类型)
     无 this, self
    
●   封装
     go语言只有一种控制可见性的手段：大写首字母的标识符会从
定义它们的包中被导出，小写字母则不会。

    最小封装单元是Package，而不是类型。

接 口

package main
import "fmt"
type human struct {
    something string
}
type animal struct {
    whatever string
}
func (a *animal) Speak() string {
    return a.whatever
}
func (h *human) Speak() string {
    return h.something
}

type living interface {
    Speak() string
}
func AnyMethod(l living) {
    fmt.Println(l.Speak())
}

func main() {
    john := human{"I am john"}
    tom := animal{"Bow Bow"}
    
    AnyMethod(&john)
    AnyMethod(&tom)
}

Goroutines & Channels

●  CSP(communicating sequential processes)

Q: vs. Actor

●  goroutine(eg. ch8/spinner)

●  channel(eg. ch8/pipeline1)

●  race condition

●  Goroutines and Threads

Goroutines & Channels - goroutine

●  go

Goroutines & Channels - channel

●  create, send, recv, close
ch := make(chan int) // ch has type 'chan int' 
ch <- x // a send statement 
x = <-ch // a receive expression in an assignment statement
 <-ch // a receive statement; result is discarded
close(ch) 

●  unbuffered/buffer
ch = make(chan int) // unbuffered channel 
ch = make(chan int, 0) // unbuffered channel 
ch = make(chan int, 3) // buffered channel with capacity 3 

unbuffered channels are sometimes called synchronous channels
A buffered channel has a queue of elements

●  select多路复用  

Goroutines & Channel - race condition

 

Goroutines & Threads

●  a goroutine's stack is not fixed; it grows and shrinks as needed.一般起始2K.

●  m:n scheduling,  multiplexes (or schedules) m goroutines on n OS threads

Goroutine - 实现

●  G-P-M 结构
runtime/runtime2.go

●  调度：
runtime/proc.go

参考：https://learnku.com/articles/41728

Channel - 实现

runtime/chan.go

其它

●  包和工具

●  测试

●  反射

●  底层编程

源码

●  sync  

