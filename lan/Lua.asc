= lua
:revnumber: 0.0.1
:author: orient
:homepage: http://orientye.com
:toc:
:toclevels: 5
:hardbreaks-option:
<<<

== 说明
如果没有特别声明，以下代码基于Lua 5.4.0

== 值与类型

8种基本类型: nil, boolean, number, string, table, function,userdata, and thread. 

Nil is a marker type having only one value, also called nil. 

Boolean values are the usual true and false. 

Numbers are double-precision floating-point numbers, corresponding to the type double in C, but it is easy to compile Lua 
using float or long instead. (Several games consoles and smaller machines lack hardware support for double.) 

Strings are arrays of bytes with an explicit size, and so can contain arbitrary binary data, including embedded zeros. 

Tables are associative arrays, which can be indexed by any value (exceptnil) and can hold any value.

Functions are either Lua functions or C functions written according to a protocol for interfacing with the Lua virtual machine.

Userdata are essentially pointers to user memory blocks, and come in two flavors: heavy, whose blocks are allocated by Lua 
and are subject to garbage collection, and light, whose blocks are allocated and freed by the user. 

threads represent coroutines.

●  Values of all types are first-class values: we can store them in global variables, local variables and table fields, pass them 
as arguments to functions, return them from functions, etc.


●  types are attached to values rather than to variables. 

    Q:  where are strings, tables... types?

=== 表

Tables are the main — in fact, the only — data-structuring mechanism in Lua. 

in Lua 5.0, tables are implemented as hybrid data structures: they contain a hash part and an array part

=== 函数与闭包

When Lua compiles a function it generates a prototype containing the virtual machine instructions for the function, its 
constant values (numbers, literalstrings, etc.), and some debug information. 

At run time, whenever Lua executes a function...end expression, it creates a new closure. Each closure has a reference to its 
corresponding prototype, a reference to its environment (a table wherein it looks for global variables), and an array of 
references to upvalues, which are used to access outer local variables.

The combination of lexical scoping with first-class functions creates a wellknown difficulty for accessing outer local variables. 
Consider the example in Figure 3. When add2 is called, its body accesses the outer local variable x (function parameters in Lua 
are local variables). However, by the time add2 is called, the function add that created add2 has already returned. If x was 
created in the stack, its stack slot would no longer exist.

Most procedural languages avoid this problem by restricting lexical scoping(e.g., Python), not providing first-class functions 
(e.g., Pascal), or both (e.g., C). Functional languages do not have those restrictions. 

Lua uses a structure called an upvalue to implement closures. Any outer local variable is accessed indirectly through an upvalue. 
The upvalue originally points to the stack slot wherein the variable lives (Figure 4, left). When the variable
goes out of scope, it migrates into a slot inside the upvalue itself (Figure 4, right). Because access is indirect through a pointer 
in the upvalue, this migration is transparent to any code that reads or writes the variable. Unlike its inner
functions, the function that declares the variable accesses it as it accesses its own local variables: directly in the stack.

It is possible for a function to access an outer local variable that does not belong to its immediately enclosing function, but to 
an outer function. In that case, even by the time the closure is created, the variable may no longer exist
in the stack. Lua solves this case by using flat closures [5]. With flat closures, whenever a function accesses an outer variable 
that is not local to its enclosing function, the variable also goes to the closure of the enclosing function. Thus,
when a function is instantiated, all variables that go into its closure are either in the enclosing function’s stack or in the 
enclosing function’s closure.

参考: 《The Implementation of Lua 5.0》

== 协程

●  Since version 5.0, Lua implements asymmetric coroutines (also called semisymmetric coroutines or semi-coroutines)

●  Conceptually, each coroutine has its own stack. (Concretely, each coroutine has two stacks, but we can consider them as 
a single abstract stack.) 

●  Coroutines in Lua are stackful, in the sense that we can suspend a coroutine from inside any number of nested calls. The 
interpreter simply puts aside the entire stack for later use and continues running on another stack. A program can restart 
any suspended coroutine at will. The garbage collector collects stacks whose coroutines are no longer accessible.

●  lcorolib.c   207 lines!
static const luaL_Reg co_funcs[] = { 
  {"create", luaB_cocreate},
  {"resume", luaB_coresume},
  {"running", luaB_corunning},
  {"status", luaB_costatus},
  {"wrap", luaB_cowrap},
  {"yield", luaB_yield},
  {"isyieldable", luaB_yieldable},
  {"close", luaB_close},
  {NULL, NULL}
};

通过resume/yield函数的参数在协程间传递数据/通信

●  eg.  https://www.tutorialspoint.com/lua/lua_coroutines.htm

=== 实现

●  数据结构，跟虚拟机一样，使用的是lua_State

/*
** 'per thread' state
*/
struct lua_State {
  CommonHeader;
  lu_byte status;
  lu_byte allowhook;
  unsigned short nci;  /* number of items in 'ci' list */
  StkId top;  /* first free slot in the stack */
  global_State *l_G;
  CallInfo *ci;  /* call info for current function */
  StkId stack_last;  /* last free slot in the stack */
  StkId stack;  /* stack base */
  UpVal *openupval;  /* list of open upvalues in this stack */
  GCObject *gclist;
  struct lua_State *twups;  /* list of threads with open upvalues */
  struct lua_longjmp *errorJmp;  /* current error recover point */
  CallInfo base_ci;  /* CallInfo for first level (C calling Lua) */
  volatile lua_Hook hook;
  ptrdiff_t errfunc;  /* current error handling function (stack index) */
  l_uint32 nCcalls;  /* number of allowed nested C calls - 'nci' */
  int oldpc;  /* last pc traced */
  int stacksize;
  int basehookcount;
  int hookcount;
  volatile l_signalT hookmask;
};

==== create

lcorolib.c
static int luaB_cocreate (lua_State *L) {
  lua_State *NL;
  luaL_checktype(L, 1, LUA_TFUNCTION);
  NL = lua_newthread(L);
  lua_pushvalue(L, 1);  /* move function to top */
  lua_xmove(L, NL, 1);  /* move function from L to NL */
  return 1;
}

lapi.c
LUA_API void lua_xmove (lua_State *from, lua_State *to, int n) {
  int i;
  if (from == to) return;
  lua_lock(to);
  api_checknelems(from, n);
  api_check(from, G(from) == G(to), "moving among independent states");
  api_check(from, to->ci->top - to->top >= n, "stack overflow");
  from->top -= n;
  for (i = 0; i < n; i++) {
    setobjs2s(to, to->top, from->top + i);
    to->top++;  /* stack already checked by previous 'api_check' */
  }
  lua_unlock(to);
}

lobjet.h
/* main macro to copy values (from 'obj1' to 'obj2') */
#define setobj(L,obj1,obj2) \
        { TValue *io1=(obj1); const TValue *io2=(obj2); \
          io1->value_ = io2->value_; settt_(io1, io2->tt_); \
          checkliveness(L,io1); lua_assert(!isnonstrictnil(io1)); }
  
/*
** Different types of assignments, according to source and destination.
** (They are mostly equal now, but may be different in the future.)
*/
  
/* from stack to stack */ 
#define setobjs2s(L,o1,o2)      setobj(L,s2v(o1),s2v(o2))

==== resume

lcorolib.c

static int luaB_coresume (lua_State *L) {
  lua_State *co = getco(L);
  int r;
  r = auxresume(L, co, lua_gettop(L) - 1);
  if (r < 0) {
    lua_pushboolean(L, 0);
    lua_insert(L, -2);
    return 2;  /* return false + error message */
  }
  else {
    lua_pushboolean(L, 1);
    lua_insert(L, -(r + 1));
    return r + 1;  /* return true + 'resume' returns */
  }
}

static lua_State *getco (lua_State *L) {
  lua_State *co = lua_tothread(L, 1);
  luaL_argexpected(L, co, 1, "thread");
  return co;
}
/*
** Resumes a coroutine. Returns the number of results for non-error
** cases or -1 for errors.
*/
static int auxresume (lua_State *L, lua_State *co, int narg) {
  int status, nres;
  if (!lua_checkstack(co, narg)) {
    lua_pushliteral(L, "too many arguments to resume");
    return -1;  /* error flag */
  }
  lua_xmove(L, co, narg);
  status = lua_resume(co, L, narg, &nres);
  if (status == LUA_OK || status == LUA_YIELD) {
    if (!lua_checkstack(L, nres + 1)) {
      lua_pop(co, nres);  /* remove results anyway */
      lua_pushliteral(L, "too many results to resume");
      return -1;  /* error flag */
    }
    lua_xmove(co, L, nres);  /* move yielded values */
    return nres;
  }
  else {
    lua_xmove(co, L, 1);  /* move error message */
    return -1;  /* error flag */
  }
}

ldo.c

LUA_API int lua_resume (lua_State *L, lua_State *from, int nargs,
                                      int *nresults) {
        int status;
        lua_lock(L);
        if (L->status == LUA_OK) {  /* may be starting a coroutine */
                if (L->ci != &L->base_ci)  /* not in base level? */
                return resume_error(L, "cannot resume non-suspended coroutine", nargs);
                else if (L->top - (L->ci->func + 1) == nargs)  /* no function? */
                return resume_error(L, "cannot resume dead coroutine", nargs);
        } 
        else if (L->status != LUA_YIELD)  /* ended with errors? */
                return resume_error(L, "cannot resume dead coroutine", nargs);
        if (from == NULL)
                L->nCcalls = CSTACKTHREAD;
        else  /* correct 'nCcalls' for this thread */
                L->nCcalls = getCcalls(from) - L->nci - CSTACKCF;
        if (L->nCcalls <= CSTACKERR)
                return resume_error(L, "C stack overflow", nargs);
        luai_userstateresume(L, nargs);
        api_checknelems(L, (L->status == LUA_OK) ? nargs + 1 : nargs);
        status = luaD_rawrunprotected(L, resume, &nargs);
        /* continue running after recoverable errors */
        while (errorstatus(status) && recover(L, status)) {
                /* unroll continuation */
                status = luaD_rawrunprotected(L, unroll, &status);
        }
        if (likely(!errorstatus(status)))
                lua_assert(status == L->status);  /* normal end or yield */
        else {  /* unrecoverable error */
                L->status = cast_byte(status);  /* mark thread as 'dead' */
                luaD_seterrorobj(L, status, L->top);  /* push error message */
                L->ci->top = L->top;
        }
        *nresults = (status == LUA_YIELD) ? L->ci->u2.nyield
                                            : cast_int(L->top - (L->ci->func + 1));
        lua_unlock(L);
        return status;
}

==== yield

lcorolib.c

static int luaB_yield (lua_State *L) {
        return lua_yield(L, lua_gettop(L));
}

#define lua_yield(L,n)          lua_yieldk(L, (n), 0, NULL)

ldo.c
LUA_API int lua_yieldk (lua_State *L, int nresults, lua_KContext ctx,
                        lua_KFunction k) {
        CallInfo *ci;
        luai_userstateyield(L, nresults);
        lua_lock(L);
        ci = L->ci;
        api_checknelems(L, nresults);
        if (unlikely(!yieldable(L))) {
                if (L != G(L)->mainthread)
                luaG_runerror(L, "attempt to yield across a C-call boundary");
                else
                luaG_runerror(L, "attempt to yield from outside a coroutine");
        }
        L->status = LUA_YIELD;
        if (isLua(ci)) {  /* inside a hook? */
                lua_assert(!isLuacode(ci));
                api_check(L, k == NULL, "hooks cannot continue after yielding");
                ci->u2.nyield = 0;  /* no results */
        }
        else {
                if ((ci->u.c.k = k) != NULL)  /* is there a continuation? */
                ci->u.c.ctx = ctx;  /* save context */
                ci->u2.nyield = nresults;  /* save number of results */
                luaD_throw(L, LUA_YIELD);
        }
        lua_assert(ci->callstatus & CIST_HOOKED);  /* must be inside a hook */
        lua_unlock(L);
        return 0;  /* return to 'luaD_hook' */
}

== 虚拟机

●  Lua runs programs by first compiling them into instructions (“opcodes”) for a virtual machine and then executing those instructions. For each function that Lua compiles it creates a prototype, which contains an array with the opcodes for the function and an array of Lua values (TObjects) with all constants (literal strings and numerals) used by the function.

●  Since 1993, when Lua was first released, Lua used a stackbased virtual machine. Since 2003, Lua 5.0, Lua uses a register-based virtual machine. This register-based machine also uses a stack, for allocating activation records, wherein the registers live. When Lua enters a function, it preallocates from the stack an activation record large enough to hold all the function registers. All local variables are allocated in registers. As a consequence, access to local variables is specially efficient.

== 应用

=== 与C/C++的交互

=== 热更新
●  基本思想
https://blog.csdn.net/xufeng0991/article/details/52473602
https://github.com/lichuang/Lua-Source-Internal/blob/master/doc/ch06-%E7%83%AD%E6%9B%B4%E6%96%B0.md

https://blog.codingnow.com/2016/11/lua_update.html
https://github.com/cloudwu/skynet/wiki/Snax#%E7%83%AD%E6%9B%B4%E6%96%B0-hotfix

●  _G, _ENV

● https://stackoverflow.com/questions/35910099/how-special-is-the-global-variable-g

== Lua JIT
https://github.com/LuaJIT/LuaJIT

vs. v8  benchmark:
https://programming-language-benchmarks.vercel.app/lua-vs-javascript

注意事项:
在64位系统（包括x86_64）上，LuaJIT垃圾回收器能管理的内存最大只有2GB一直为社区所诟病。所幸LuaJIT官方在2016年引入了 “GC64” 模式，这使得这个上限可以达到128TB（也就是低47位的地址空间），这也就意味着可以不受限制的跑在当今主流的个人电脑和服务器上了:
https://blog.openresty.com/en/luajit-gc64-mode/
https://blog.openresty.com.cn/cn/luajit-gc64-mode/

== 优化
https://www.lua.org/gems/sample.pdf

== dev
https://github.com/LuaLS/lua-language-server
https://github.com/mpeterv/luacheck
https://github.com/luarocks/luarocks