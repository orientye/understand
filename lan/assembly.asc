= 了解assembly
:revnumber: 0.0.1
:author: orient
:homepage: http://orientye.com
:toc:
:toclevels: 5
:hardbreaks-option:
<<<

== 汇编语言

== C/C++与汇编
=== 外嵌汇编
=== 内嵌汇编
=== 反汇编

== x86

=== x86_64汇编
https://github.com/0xAX/asm
系统调用: https://en.wikibooks.org/wiki/X86_Assembly/Interfacing_with_Linux
https://www.cnblogs.com/lsgxeva/p/11176000.html

=== register
https://cs.brown.edu/courses/cs033/docs/guides/x64_cheatsheet.pdf

=== 指令
- endbr64/endbr32:
https://stackoverflow.com/questions/56905811/what-does-the-endbr64-instruction-actually-do
Control-flow Enforcement Technology (CET)技术:
https://www.intel.com/content/www/us/en/developer/articles/technical/technical-look-control-flow-enforcement-technology.html

=== calling-convention
https://wizardforcel.gitbooks.io/re-for-beginners/content/Part-VI/Chapter-64.html
https://stackoverflow.com/questions/4429398/why-does-windows64-use-a-different-calling-convention-from-all-other-oses-on-x86/
http://dbp-consulting.com/tutorials/debugging/linuxProgramStartup.html

=== 参考
《Low  Level Programming C, Assembly and Program Execution on Intel 64 Architecture》
https://cch123.gitbooks.io/duplicate/content/
http://www.egr.unlv.edu/~ed/assembly64.pdf

