= lua
:revnumber: 0.0.1
:author: orient
:homepage: http://orientye.com
:toc:
:toclevels: 5
:hardbreaks-option:
<<<

== 说明
如果没有特别声明，以下代码>=Lua 5.4.0，基于: https://github.com/lua/lua

== 基本概念
=== 值与类型
8种基本类型: nil, boolean, number, string, table, function, userdata, and thread.

[source, c]
.https://github.com/lua/lua/blob/master/lua.h
----
/*
** basic types
*/
#define LUA_TNONE		(-1)

#define LUA_TNIL		0
#define LUA_TBOOLEAN		1
#define LUA_TLIGHTUSERDATA	2
#define LUA_TNUMBER		3
#define LUA_TSTRING		4
#define LUA_TTABLE		5
#define LUA_TFUNCTION		6
#define LUA_TUSERDATA		7
#define LUA_TTHREAD		8

#define LUA_NUMTYPES		9
----

Nil is a marker type having only one value, also called nil.

Boolean values are the usual true and false.

Numbers are double-precision floating-point numbers, corresponding to the type double in C, but it is easy to compile Lua using float or long instead. (Several games consoles and smaller machines lack hardware support for double.) 

Strings are arrays of bytes with an explicit size, and so can contain arbitrary binary data, including embedded zeros.

Tables are associative arrays, which can be indexed by any value (exceptnil) and can hold any value.
Tables are the main in fact, the only data-structuring mechanism in Lua.
in Lua 5.0, tables are implemented as hybrid data structures: they contain a hash part and an array part

Functions are either Lua functions or C functions written according to a protocol for interfacing with the Lua virtual machine.

Userdata are essentially pointers to user memory blocks, and come in two flavors: heavy, whose blocks are allocated by Lua and are subject to garbage collection, and light, whose blocks are allocated and freed by the user.

threads represent coroutines.

注意:
Values of all types are first-class values: we can store them in global variables, local variables and table fields, pass them as arguments to functions, return them from functions, etc.
types are attached to values rather than to variables.

参考:
https://www.lua.org/manual/5.4/manual.html#2.1
https://cloudwu.github.io/lua53doc/manual.html#2.1

=== 环境与全局环境
引用一个叫var的自由名字在句法上都被翻译为_ENV.var。此外，每个被编译的Lua代码块都会有一个外部的局部变量叫_ENV。
被_ENV用于值的那张表被称为环境。

Lua保有一个被称为全局环境的特别环境。它被保存在C注册表的一个特别索引下。在Lua中，全局变量_G被初始化为这个值。

当Lua加载一个代码块，_ENV这个上值的默认值就是这个全局环境。

参考:
https://www.lua.org/manual/5.4/manual.html#2.2
https://cloudwu.github.io/lua53doc/manual.html#2.2
https://stackoverflow.com/questions/35910099/how-special-is-the-global-variable-g

=== 模块与包

=== 错误处理

参考:
https://www.lua.org/manual/5.4/manual.html#2.3
https://cloudwu.github.io/lua53doc/manual.html#2.3

== 函数
lua存在三类函数(大类都是LUA_TFUNCTION):
LUA_VLCL(Lua closure)、LUA_VLCF(light C function)、LUA_VCCL(C closure)
其中，
Lua脚本函数(LUA_VLCL): 用lua脚本编写的函数，有上值，运行时需要闭包LClosure，函数原型为Proto。
轻量C函数(LUA_VCCL): 用C编写的函数，没有上值，运行时不需要闭包，函数原型为lua_CFunction。
C闭包函数(LUA_VLCF): 用C编写的函数，有上值，运行时需要闭包CClosure，函数原型为lua_CFunction。

[source, c]
.https://github.com/lua/lua/blob/master/lobject.h
----
/* Variant tags for functions */
#define LUA_VLCL	makevariant(LUA_TFUNCTION, 0)  /* Lua closure */
#define LUA_VLCF	makevariant(LUA_TFUNCTION, 1)  /* light C function */
#define LUA_VCCL	makevariant(LUA_TFUNCTION, 2)  /* C closure */
----

闭包:
[source, c]
.https://github.com/lua/lua/blob/master/lobject.h
----
#define ClosureHeader \
	CommonHeader; lu_byte nupvalues; GCObject *gclist

typedef struct CClosure {
  ClosureHeader;
  lua_CFunction f;
  TValue upvalue[1];  /* list of upvalues */
} CClosure;


typedef struct LClosure {
  ClosureHeader;
  struct Proto *p;
  UpVal *upvals[1];  /* list of upvalues */
} LClosure;


typedef union Closure {
  CClosure c;
  LClosure l;
} Closure;
----

== 协程
=== 概念
⦁ Since version 5.0, Lua implements asymmetric coroutines (also called semisymmetric coroutines or semi-coroutines)
为什么lua采用非对称协程的方案？
主要原因是: 非对称协程一样具有表达力，但在lua里实现起来更简单，与宿主C语言更容易整合，有更好的移植性。
详情参考: https://www.inf.puc-rio.br/~roberto/docs/corosblp.pdf

⦁ Conceptually, each coroutine has its own stack. (Concretely, each coroutine has two stacks, but we can consider them as a single abstract stack.)

⦁ Coroutines in Lua are stackful, in the sense that we can suspend a coroutine from inside any number of nested calls. The interpreter simply puts aside the entire stack for later use and continues running on another stack. A program can restart any suspended coroutine at will. The garbage collector collects stacks whose coroutines are no longer accessible.

⦁ 通过resume/yield函数的参数在协程间传递数据/通信

=== 示例
[source, lua]
----
function foo (a)
    print("foo print", a)
    return coroutine.yield(2 * a)
end
 
co = coroutine.create(function (a , b)
    print("1st in coroutine", a, b)
    local r = foo(a + 1)
     
    print("2nd in coroutine", r)
    local r, s = coroutine.yield(a + b, a - b)
     
    print("3rd in coroutine", r, s)
    return b, "end"
end)

print("main", coroutine.resume(co, 1, 10)) -- true 4
print("main", coroutine.resume(co, "r")) -- true 11 -9
print("main", coroutine.resume(co, "x", "y")) -- true 10 end
print("main", coroutine.resume(co, "x", "y")) -- false cannot resume dead coroutine
----

输出:

    1st in coroutine	1	10
    foo print	2
    main	true	4
    2nd in coroutine	r
    main	true	11	-9
    3rd in coroutine	x	y
    main	true	10	end
    main	false	cannot resume dead coroutine

=== 实现

==== struct lua_State
数据结构，跟虚拟机一样，使用的是lua_State:
[source, c]
.https://github.com/lua/lua/blob/master/lstate.h
----
/*
** 'per thread' state
*/
struct lua_State {
  CommonHeader;
  lu_byte status;
  lu_byte allowhook;
  unsigned short nci;  /* number of items in 'ci' list */
  StkIdRel top;  /* first free slot in the stack */
  global_State *l_G;
  CallInfo *ci;  /* call info for current function */
  StkIdRel stack_last;  /* end of stack (last element + 1) */
  StkIdRel stack;  /* stack base */
  UpVal *openupval;  /* list of open upvalues in this stack */
  StkIdRel tbclist;  /* list of to-be-closed variables */
  GCObject *gclist;
  struct lua_State *twups;  /* list of threads with open upvalues */
  struct lua_longjmp *errorJmp;  /* current error recover point */
  CallInfo base_ci;  /* CallInfo for first level (C calling Lua) */
  volatile lua_Hook hook;
  ptrdiff_t errfunc;  /* current error handling function (stack index) */
  l_uint32 nCcalls;  /* number of nested (non-yieldable | C)  calls */
  int oldpc;  /* last pc traced */
  int basehookcount;
  int hookcount;
  volatile l_signalT hookmask;
};
----

==== union StkIdRel
[source, c]
.https://github.com/lua/lua/blob/master/lobject.h
----
/*
** Union of all Lua values
*/
typedef union Value {
  struct GCObject *gc;    /* collectable objects */
  void *p;         /* light userdata */
  lua_CFunction f; /* light C functions */
  lua_Integer i;   /* integer numbers */
  lua_Number n;    /* float numbers */
  /* not used, but may avoid warnings for uninitialized value */
  lu_byte ub;
} Value;

//....

/*
** Tagged Values. This is the basic representation of values in Lua:
** an actual value plus a tag with its type.
*/

#define TValuefields	Value value_; lu_byte tt_

typedef struct TValue {
  TValuefields;
} TValue;

/*
** Entries in a Lua stack. Field 'tbclist' forms a list of all
** to-be-closed variables active in this stack. Dummy entries are
** used when the distance between two tbc variables does not fit
** in an unsigned short. They are represented by delta==0, and
** their real delta is always the maximum value that fits in
** that field.
*/
typedef union StackValue {
  TValue val;
  struct {
    TValuefields;
    unsigned short delta;
  } tbclist;
} StackValue;


/* index to stack elements */
typedef StackValue *StkId;


/*
** When reallocating the stack, change all pointers to the stack into
** proper offsets.
*/
typedef union {
  StkId p;  /* actual pointer */
  ptrdiff_t offset;  /* used while the stack is being reallocated */
} StkIdRel;
----

==== struct CallInfo
调用栈，双链表结构
[source, c]
.https://github.com/lua/lua/blob/master/lstate.h
----
/*
** Information about a call.
** About union 'u':
** - field 'l' is used only for Lua functions;
** - field 'c' is used only for C functions.
** About union 'u2':
** - field 'funcidx' is used only by C functions while doing a
** protected call;
** - field 'nyield' is used only while a function is "doing" an
** yield (from the yield until the next resume);
** - field 'nres' is used only while closing tbc variables when
** returning from a function;
** - field 'transferinfo' is used only during call/returnhooks,
** before the function starts or after it ends.
*/
struct CallInfo {
  StkIdRel func;  /* function index in the stack */
  StkIdRel	top;  /* top for this function */
  struct CallInfo *previous, *next;  /* dynamic call link */
  union {
    struct {  /* only for Lua functions */
      const Instruction *savedpc;
      volatile l_signalT trap;  /* function is tracing lines/counts */
      int nextraargs;  /* # of extra arguments in vararg functions */
    } l;
    struct {  /* only for C functions */
      lua_KFunction k;  /* continuation in case of yields */
      ptrdiff_t old_errfunc;
      lua_KContext ctx;  /* context info. in case of yields */
    } c;
  } u;
  union {
    int funcidx;  /* called-function index */
    int nyield;  /* number of values yielded */
    int nres;  /* number of values returned */
    struct {  /* info about transferred values (for call/return hooks) */
      unsigned short ftransfer;  /* offset of first value transferred */
      unsigned short ntransfer;  /* number of values transferred */
    } transferinfo;
  } u2;
  short nresults;  /* expected number of results from this function */
  unsigned short callstatus;
};
----

==== 操作
[source, c]
.https://github.com/lua/lua/blob/master/lcorolib.c
----
static const luaL_Reg co_funcs[] = {
  {"create", luaB_cocreate},
  {"resume", luaB_coresume},
  {"running", luaB_corunning},
  {"status", luaB_costatus},
  {"wrap", luaB_cowrap},
  {"yield", luaB_yield},
  {"isyieldable", luaB_yieldable},
  {"close", luaB_close},
  {NULL, NULL}
};
----

与coroutine.create类似，coroutine.wrap函数也会创建一个协程。不同之处在于，它不返回协程本身，而是返回一个函数。调用这个函数将启动该协程。传递给该函数的任何参数均当作coroutine.resume的额外参数。coroutine.wrap返回coroutine.resume的所有返回值，除了第一个返回值(布尔型的错误码)。和coroutine.resume不同，coroutine.wrap不会捕获错误，而是将任何错误都传播给调用者。

三个Lua标准库函数提供了对协程的支持: create，resume与yield。

==== create
[source, c]
.https://github.com/lua/lua/blob/master/lcorolib.c
----
static int luaB_cocreate (lua_State *L) {
  lua_State *NL;
  luaL_checktype(L, 1, LUA_TFUNCTION);
  NL = lua_newthread(L);
  lua_pushvalue(L, 1);  /* move function to top */
  lua_xmove(L, NL, 1);  /* move function from L to NL */
  return 1;
}
----

luaL_checktype(L, 1, LUA_TFUNCTION): 第一个参数必须是function
NL = lua_newthread(L): 新建协程
lua_pushvalue(L, 1): since the top of the stack is now NL, put the function back to the top,
lua_xmove(L, NL, 1): move function from L to NL

lua_newthread():
[source, c]
.https://github.com/lua/lua/blob/master/lstate.c
----
LUA_API lua_State *lua_newthread (lua_State *L) {
  global_State *g = G(L);
  GCObject *o;
  lua_State *L1;
  lua_lock(L);
  luaC_checkGC(L);
  /* create new thread */
  o = luaC_newobjdt(L, LUA_TTHREAD, sizeof(LX), offsetof(LX, l));
  L1 = gco2th(o);
  /* anchor it on L stack */
  setthvalue2s(L, L->top.p, L1);
  api_incr_top(L);
  preinit_thread(L1, g);
  L1->hookmask = L->hookmask;
  L1->basehookcount = L->basehookcount;
  L1->hook = L->hook;
  resethookcount(L1);
  /* initialize L1 extra space */
  memcpy(lua_getextraspace(L1), lua_getextraspace(g->mainthread),
         LUA_EXTRASPACE);
  luai_userstatethread(L, L1);
  stack_init(L1, L);  /* init stack */
  lua_unlock(L);
  return L1;
}
----

lua_xmove():
交换同一个状态机下不同线程中的值。
这个函数会从from的栈上弹出n个值，然后把它们压入to的栈上。
[source, c]
.https://github.com/lua/lua/blob/master/lapi.c
----
LUA_API void lua_xmove (lua_State *from, lua_State *to, int n) {
  int i;
  if (from == to) return;
  lua_lock(to);
  api_checknelems(from, n);
  api_check(from, G(from) == G(to), "moving among independent states");
  api_check(from, to->ci->top.p - to->top.p >= n, "stack overflow");
  from->top.p -= n;
  for (i = 0; i < n; i++) {
    setobjs2s(to, to->top.p, from->top.p + i);
    to->top.p++;  /* stack already checked by previous 'api_check' */
  }
  lua_unlock(to);
}
----

==== resume
[source, c]
.https://github.com/lua/lua/blob/master/lcorolib.c
----
static int luaB_coresume (lua_State *L) {
  lua_State *co = getco(L);
  int r;
  r = auxresume(L, co, lua_gettop(L) - 1);
  if (l_unlikely(r < 0)) {
    lua_pushboolean(L, 0);
    lua_insert(L, -2);
    return 2;  /* return false + error message */
  }
  else {
    lua_pushboolean(L, 1);
    lua_insert(L, -(r + 1));
    return r + 1;  /* return true + 'resume' returns */
  }
}
----
lua_State *co = getco(L): 从主线程栈上获取协程栈结构(如果多层嵌套就是上一层的栈)
调用auxresume方法:
返回值如果小于0表示失败，返回false与error message；否则表示成功，返回true与resume结果。

void lua_insert (lua_State *L, int index):
把栈顶元素移动到指定的有效索引处，依次移动这个索引之上的元素。

auxresume():
[source, c]
.https://github.com/lua/lua/blob/master/lcorolib.c
----
/*
** Resumes a coroutine. Returns the number of results for non-error
** cases or -1 for errors.
*/
static int auxresume (lua_State *L, lua_State *co, int narg) {
  int status, nres;
  if (l_unlikely(!lua_checkstack(co, narg))) {
    lua_pushliteral(L, "too many arguments to resume");
    return -1;  /* error flag */
  }
  lua_xmove(L, co, narg);
  status = lua_resume(co, L, narg, &nres);
  if (l_likely(status == LUA_OK || status == LUA_YIELD)) {
    if (l_unlikely(!lua_checkstack(L, nres + 1))) {
      lua_pop(co, nres);  /* remove results anyway */
      lua_pushliteral(L, "too many results to resume");
      return -1;  /* error flag */
    }
    lua_xmove(co, L, nres);  /* move yielded values */
    return nres;
  }
  else {
    lua_xmove(co, L, 1);  /* move error message */
    return -1;  /* error flag */
  }
}
----

lua_resume():
[source, c]
.https://github.com/lua/lua/blob/master/ldo.c
----
LUA_API int lua_resume (lua_State *L, lua_State *from, int nargs,
                                      int *nresults) {
  int status;
  lua_lock(L);
  if (L->status == LUA_OK) {  /* may be starting a coroutine */
    if (L->ci != &L->base_ci)  /* not in base level? */
      return resume_error(L, "cannot resume non-suspended coroutine", nargs);
    else if (L->top.p - (L->ci->func.p + 1) == nargs)  /* no function? */
      return resume_error(L, "cannot resume dead coroutine", nargs);
  }
  else if (L->status != LUA_YIELD)  /* ended with errors? */
    return resume_error(L, "cannot resume dead coroutine", nargs);
  L->nCcalls = (from) ? getCcalls(from) : 0;
  if (getCcalls(L) >= LUAI_MAXCCALLS)
    return resume_error(L, "C stack overflow", nargs);
  L->nCcalls++;
  luai_userstateresume(L, nargs);
  api_checknelems(L, (L->status == LUA_OK) ? nargs + 1 : nargs);
  status = luaD_rawrunprotected(L, resume, &nargs);
   /* continue running after recoverable errors */
  status = precover(L, status);
  if (l_likely(!errorstatus(status)))
    lua_assert(status == L->status);  /* normal end or yield */
  else {  /* unrecoverable error */
    L->status = cast_byte(status);  /* mark thread as 'dead' */
    luaD_seterrorobj(L, status, L->top.p);  /* push error message */
    L->ci->top.p = L->top.p;
  }
  *nresults = (status == LUA_YIELD) ? L->ci->u2.nyield
                                    : cast_int(L->top.p - (L->ci->func.p + 1));
  lua_unlock(L);
  return status;
}
----
status = luaD_rawrunprotected(L, resume, &nargs): 保护模式下调用resume函数

luaD_rawrunprotected():
[source, c]
.https://github.com/lua/lua/blob/master/ldo.c
----
int luaD_rawrunprotected (lua_State *L, Pfunc f, void *ud) {
  l_uint32 oldnCcalls = L->nCcalls;
  struct lua_longjmp lj;
  lj.status = LUA_OK;
  lj.previous = L->errorJmp;  /* chain new error handler */
  L->errorJmp = &lj;
  LUAI_TRY(L, &lj,
    (*f)(L, ud);
  );
  L->errorJmp = lj.previous;  /* restore old error handler */
  L->nCcalls = oldnCcalls;
  return lj.status;
}
----

resume():
[source, c]
.https://github.com/lua/lua/blob/master/ldo.c
----
static void resume (lua_State *L, void *ud) {
  int n = *(cast(int*, ud));  /* number of arguments */
  StkId firstArg = L->top.p - n;  /* first argument */
  CallInfo *ci = L->ci;
  if (L->status == LUA_OK)  /* starting a coroutine? */
    ccall(L, firstArg - 1, LUA_MULTRET, 0);  /* just call its body */
  else {  /* resuming from previous yield */
    lua_assert(L->status == LUA_YIELD);
    L->status = LUA_OK;  /* mark that it is running (again) */
    if (isLua(ci)) {  /* yielded inside a hook? */
      L->top.p = firstArg;  /* discard arguments */
      luaV_execute(L, ci);  /* just continue running Lua code */
    }
    else {  /* 'common' yield */
      if (ci->u.c.k != NULL) {  /* does it have a continuation function? */
        lua_unlock(L);
        n = (*ci->u.c.k)(L, LUA_YIELD, ci->u.c.ctx); /* call continuation */
        lua_lock(L);
        api_checknelems(L, n);
      }
      luaD_poscall(L, ci, n);  /* finish 'luaD_call' */
    }
    unroll(L, NULL);  /* run continuation */
  }
}
----

==== yield
[source, c]
.https://github.com/lua/lua/blob/master/lcorolib.c
----
static int luaB_yield (lua_State *L) {
  return lua_yield(L, lua_gettop(L));
}
----

[source, c]
.https://github.com/lua/lua/blob/master/lua.h
----
#define lua_yield(L,n)		lua_yieldk(L, (n), 0, NULL)
----
参考:
https://www.lua.org/manual/5.4/manual.html#lua_yield
https://cloudwu.github.io/lua53doc/manual.html#lua_yield

[source, c]
.https://github.com/lua/lua/blob/master/ldo.c
----
LUA_API int lua_yieldk (lua_State *L, int nresults, lua_KContext ctx,
                        lua_KFunction k) {
  CallInfo *ci;
  luai_userstateyield(L, nresults);
  lua_lock(L);
  ci = L->ci;
  api_checknelems(L, nresults);
  if (l_unlikely(!yieldable(L))) {
    if (L != G(L)->mainthread)
      luaG_runerror(L, "attempt to yield across a C-call boundary");
    else
      luaG_runerror(L, "attempt to yield from outside a coroutine");
  }
  L->status = LUA_YIELD;
  ci->u2.nyield = nresults;  /* save number of results */
  if (isLua(ci)) {  /* inside a hook? */
    lua_assert(!isLuacode(ci));
    api_check(L, nresults == 0, "hooks cannot yield values");
    api_check(L, k == NULL, "hooks cannot continue after yielding");
  }
  else {
    if ((ci->u.c.k = k) != NULL)  /* is there a continuation? */
      ci->u.c.ctx = ctx;  /* save context */
    luaD_throw(L, LUA_YIELD);
  }
  lua_assert(ci->callstatus & CIST_HOOKED);  /* must be inside a hook */
  lua_unlock(L);
  return 0;  /* return to 'luaD_hook' */
}
----
luaD_throw(L, LUA_YIELD): 会回到setjmp的调用点(luaD_rawrunprotected里的LUAI_TRY)。

参考:
https://www.lua.org/manual/5.4/manual.html#lua_yieldk
https://cloudwu.github.io/lua53doc/manual.html#lua_yieldk
https://www.lua.org/manual/5.4/manual.html#4.5

=== 参考
https://www.inf.puc-rio.br/~roberto/docs/corosblp.pdf
https://poga.github.io/lua53-notes/coroutine.html

== 虚拟机

=== 概念
⦁ Lua runs programs by first compiling them into instructions (“opcodes”) for a virtual machine and then executing those instructions. For each function that Lua compiles it creates a prototype, which contains an array with the opcodes for the function and an array of Lua values (TObjects) with all constants (literal strings and numerals) used by the function.

⦁ Since 1993, when Lua was first released, Lua used a stackbased virtual machine. Since 2003, Lua 5.0, Lua uses a register-based virtual machine. This register-based machine also uses a stack, for allocating activation records, wherein the registers live. When Lua enters a function, it preallocates from the stack an activation record large enough to hold all the function registers. All local variables are allocated in registers. As a consequence, access to local variables is specially efficient.

== 主流程
[source, c]
.https://github.com/lua/lua/blob/master/lua.c
----
/*
** Main body of stand-alone interpreter (to be called in protected mode).
** Reads the options and handles them all.
*/
static int pmain (lua_State *L) {
  int argc = (int)lua_tointeger(L, 1);
  char **argv = (char **)lua_touserdata(L, 2);
  int script;
  int args = collectargs(argv, &script);
  int optlim = (script > 0) ? script : argc; /* first argv not an option */
  luaL_checkversion(L);  /* check that interpreter has correct version */
  if (args == has_error) {  /* bad arg? */
    print_usage(argv[script]);  /* 'script' has index of bad arg. */
    return 0;
  }
  if (args & has_v)  /* option '-v'? */
    print_version();
  if (args & has_E) {  /* option '-E'? */
    lua_pushboolean(L, 1);  /* signal for libraries to ignore env. vars. */
    lua_setfield(L, LUA_REGISTRYINDEX, "LUA_NOENV");
  }
  luaL_openlibs(L);  /* open standard libraries */
  createargtable(L, argv, argc, script);  /* create table 'arg' */
  lua_gc(L, LUA_GCRESTART);  /* start GC... */
  lua_gc(L, LUA_GCGEN, 0, 0);  /* ...in generational mode */
  if (!(args & has_E)) {  /* no option '-E'? */
    if (handle_luainit(L) != LUA_OK)  /* run LUA_INIT */
      return 0;  /* error running LUA_INIT */
  }
  if (!runargs(L, argv, optlim))  /* execute arguments -e and -l */
    return 0;  /* something failed */
  if (script > 0) {  /* execute main script (if there is one) */
    if (handle_script(L, argv + script) != LUA_OK)
      return 0;  /* interrupt in case of error */
  }
  if (args & has_i)  /* -i option? */
    doREPL(L);  /* do read-eval-print loop */
  else if (script < 1 && !(args & (has_e | has_v))) { /* no active option? */
    if (lua_stdin_is_tty()) {  /* running in interactive mode? */
      print_version();
      doREPL(L);  /* do read-eval-print loop */
    }
    else dofile(L, NULL);  /* executes stdin as a file */
  }
  lua_pushboolean(L, 1);  /* signal no errors */
  return 1;
}


int main (int argc, char **argv) {
  int status, result;
  lua_State *L = luaL_newstate();  /* create state */
  if (L == NULL) {
    l_message(argv[0], "cannot create state: not enough memory");
    return EXIT_FAILURE;
  }
  lua_gc(L, LUA_GCSTOP);  /* stop GC while building state */
  lua_pushcfunction(L, &pmain);  /* to call 'pmain' in protected mode */
  lua_pushinteger(L, argc);  /* 1st argument */
  lua_pushlightuserdata(L, argv); /* 2nd argument */
  status = lua_pcall(L, 2, 1, 0);  /* do the call */
  result = lua_toboolean(L, -1);  /* get result */
  report(L, status);
  lua_close(L);
  return (result && status == LUA_OK) ? EXIT_SUCCESS : EXIT_FAILURE;
}
----

== 应用

=== 与C/C++的交互
C API注意事项:
https://blog.codingnow.com/2015/05/lua_c_api.html

=== 热更新
https://blog.csdn.net/xufeng0991/article/details/52473602
https://github.com/lichuang/Lua-Source-Internal/blob/master/doc/ch06-%E7%83%AD%E6%9B%B4%E6%96%B0.md
https://blog.codingnow.com/2016/11/lua_update.html
https://github.com/cloudwu/skynet/wiki/Snax#%E7%83%AD%E6%9B%B4%E6%96%B0-hotfix

== Lua JIT
https://github.com/LuaJIT/LuaJIT
https://luajit.org/

vs. v8 benchmark:
https://programming-language-benchmarks.vercel.app/lua-vs-javascript

注意事项:
在64位系统(包括x86_64)上，LuaJIT垃圾回收器能管理的内存最大只有2GB一直为社区所诟病。所幸LuaJIT官方在2016年引入了GC64模式，这使得这个上限可以达到128TB(也就是低47位的地址空间)，这也就意味着可以不受限制的跑在当今主流的个人电脑和服务器上了:
https://blog.openresty.com/en/luajit-gc64-mode/
https://blog.openresty.com.cn/cn/luajit-gc64-mode/

== 优化
https://www.lua.org/gems/sample.pdf

== dev
https://github.com/LuaLS/lua-language-server
https://github.com/mpeterv/luacheck
https://github.com/luarocks/luarocks

== project
https://github.com/LewisJEllis/awesome-lua

== 参考
https://www.lua.org/manual/
中文文档(by cloudwu): https://cloudwu.github.io/lua53doc/manual.html
https://www.codingnow.com/download/readinglua.pdf
https://github.com/lichuang/Lua-Source-Internal
《A No Frills Introduction to Lua 5.1 VM Instructions》
http://lua-users.org/wiki/LuaSource
http://manistein.club/tags/let-us-build-a-lua-interpreter/
《The Implementation of Lua 5.0》
https://github.com/lua/lua