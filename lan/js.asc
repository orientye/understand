= javascript
:revnumber: 0.0.1
:author: orient
:homepage: http://orientye.com
:toc:
:toclevels: 5
:hardbreaks-option:
<<<

== engine
https://github.com/v8/v8
https://github.com/WebKit/WebKit/tree/main/Source/JavaScriptCore
https://bellard.org/quickjs/bench.html

== nodejs

=== 主流程

参考: https://www.voidcanvas.com/nodejs-event-loop

=== 性能优化
Q: 瞬时CPU较大(主线程)
一些参考:
https://github.com/nodejs/help/issues/2402
https://segmentfault.com/a/1190000040475545
https://github.com/naugtur/blocked-at
https://nodejs.org/api/async_hooks.html

Q: RSS很高，但堆内存和external内存较小
一些参考:
https://github.com/nodejs/help/issues/1518
https://github.com/nodejs/node/issues/12805

=== memory
==== 概览
https://deepu.tech/memory-management-in-v8/
https://deepu.tech/avoiding-memory-leaks-in-nodejs/
https://v8.dev/blog/trash-talk

==== process.memoryUsage()实现
- heapTotal and heapUsed refer to V8's memory usage.
- external refers to the memory usage of C++ objects bound to JavaScript objects managed by V8.
- rss, Resident Set Size, is the amount of space occupied in the main memory device (that is a subset of the total allocated memory) for the process, including all C++ and JavaScript objects and code.
- arrayBuffers refers to memory allocated for ArrayBuffers and SharedArrayBuffers, including all Node.js Buffers. This is also included in the external value. When Node.js is used as an embedded library, this value may be 0 because allocations for ArrayBuffers may not be tracked in that case.

When using Worker threads, rss will be a value that is valid for the entire process, while the other fields will only refer to the current thread.

[source, cpp]
.https://github.com/nodejs/node/blob/main/src/node_process_methods.cc
----
static void MemoryUsage(const FunctionCallbackInfo<Value>& args) {
  Environment* env = Environment::GetCurrent(args);

  Isolate* isolate = env->isolate();
  // V8 memory usage
  HeapStatistics v8_heap_stats;
  isolate->GetHeapStatistics(&v8_heap_stats);

  NodeArrayBufferAllocator* array_buffer_allocator =
      env->isolate_data()->node_allocator();

  // Get the double array pointer from the Float64Array argument.
  Local<ArrayBuffer> ab = get_fields_array_buffer(args, 0, 5);
  double* fields = static_cast<double*>(ab->Data());

  size_t rss;
  int err = uv_resident_set_memory(&rss);
  if (err)
    return env->ThrowUVException(err, "uv_resident_set_memory");

  fields[0] = static_cast<double>(rss);
  fields[1] = static_cast<double>(v8_heap_stats.total_heap_size());
  fields[2] = static_cast<double>(v8_heap_stats.used_heap_size());
  fields[3] = static_cast<double>(v8_heap_stats.external_memory());
  fields[4] =
      array_buffer_allocator == nullptr
          ? 0
          : static_cast<double>(array_buffer_allocator->total_mem_usage());
}
----

===== rss
在linux下，uv_resident_set_memory()是通过/proc/self/stat来统计的。
具体参考: https://github.com/libuv/libuv/blob/master/src/unix/linux.c

===== external
external_memory(): https://github.com/v8/v8/blob/main/include/v8-statistics.h

[source, cpp]
.https://github.com/v8/v8/blob/main/src/api/api.cc
----
void Isolate::GetHeapStatistics(HeapStatistics* heap_statistics) {
  //...
  // On 32-bit systems backing_store_bytes() might overflow size_t temporarily
  // due to concurrent array buffer sweeping.
  heap_statistics->external_memory_ =
      i_isolate->heap()->backing_store_bytes() < SIZE_MAX
          ? static_cast<size_t>(i_isolate->heap()->backing_store_bytes())
          : SIZE_MAX;
  //...
----

[source, cpp]
.https://github.com/v8/v8/blob/main/src/heap/heap.h
----
class Heap final {
  //...
  uint64_t backing_store_bytes() const {
    return backing_store_bytes_.load(std::memory_order_relaxed);
  }
  //...
----

[source, cpp]
.https://github.com/v8/v8/blob/main/src/heap/heap-inl.h
----
void Heap::IncrementExternalBackingStoreBytes(ExternalBackingStoreType type,
                                              size_t amount) {
  base::CheckedIncrement(&backing_store_bytes_, static_cast<uint64_t>(amount),
                         std::memory_order_relaxed);
  // TODO(mlippautz): Implement interrupt for global memory allocations that can
  // trigger garbage collections.
}

void Heap::DecrementExternalBackingStoreBytes(ExternalBackingStoreType type,
                                              size_t amount) {
  base::CheckedDecrement(&backing_store_bytes_, static_cast<uint64_t>(amount),
                         std::memory_order_relaxed);
}
----

[source, cpp]
.https://github.com/v8/v8/blob/main/src/api/api.cc
----
int64_t Isolate::AdjustAmountOfExternalAllocatedMemory(
    int64_t change_in_bytes) {
  // Try to check for unreasonably large or small values from the embedder.
  const int64_t kMaxReasonableBytes = int64_t(1) << 60;
  const int64_t kMinReasonableBytes = -kMaxReasonableBytes;
  static_assert(kMaxReasonableBytes >= i::JSArrayBuffer::kMaxByteLength);

  CHECK(kMinReasonableBytes <= change_in_bytes &&
        change_in_bytes < kMaxReasonableBytes);

  i::Isolate* i_isolate = reinterpret_cast<i::Isolate*>(this);
  int64_t amount = i_isolate->heap()->update_external_memory(change_in_bytes);

  if (change_in_bytes <= 0) return amount;

  if (amount > i_isolate->heap()->external_memory_limit()) {
    ReportExternalAllocationLimitReached();
  }
  return amount;
}
----

[source, cpp]
.https://github.com/v8/v8/blob/main/src/heap/heap-inl.h
----
int64_t Heap::update_external_memory(int64_t delta) {
  return external_memory_.Update(delta);
}
----

参考:
https://cloud.tencent.com/developer/article/2004253

==== GC
https://www.dynatrace.com/news/blog/understanding-garbage-collection-and-hunting-memory-leaks-in-node-js/
https://jayconrod.com/posts/55/a-tour-of-v8-garbage-collection
GC调优: https://zhuanlan.zhihu.com/p/500054153

==== OOM
https://stackoverflow.com/questions/38558989/node-js-heap-out-of-memory
https://nodejs.org/api/cli.html#--max-old-space-sizesize-in-megabytes

==== 内存快照
shallow size与retained size:
https://stackoverflow.com/questions/62049063/retained-size-in-chrome-memory-snapshot-what-exactly-is-being-retained

==== 内存泄漏

==== 大内存应用

=== 性能监控与分析
https://github.com/noslate-project/andb
https://github.com/hyj1991/easy-monitor

=== 参考
https://github.com/theanarkh/understand-nodejs

== typescript

== deno
https://github.com/denoland/deno

== bun
https://github.com/oven-sh/bun

== 参考
https://v8.dev/docs
