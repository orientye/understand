= 了解javascript
:revnumber: 0.0.1
:author: orient
:homepage: http://orientye.com
:toc:
:toclevels: 5
:hardbreaks-option:
<<<

== engine
https://github.com/v8/v8
https://github.com/WebKit/WebKit/tree/main/Source/JavaScriptCore
https://bellard.org/quickjs/bench.html

== nodejs

=== 性能优化
Q: 瞬时CPU较大(主线程)

Q: RSS很高，但堆内存和external内存较小
一些参考:
https://github.com/nodejs/help/issues/1518
https://github.com/nodejs/node/issues/12805

==== process.memoryUsage()实现
[source, cpp]
.https://github.com/nodejs/node/blob/main/src/node_process_methods.cc
----
static void MemoryUsage(const FunctionCallbackInfo<Value>& args) {
  Environment* env = Environment::GetCurrent(args);

  Isolate* isolate = env->isolate();
  // V8 memory usage
  HeapStatistics v8_heap_stats;
  isolate->GetHeapStatistics(&v8_heap_stats);

  NodeArrayBufferAllocator* array_buffer_allocator =
      env->isolate_data()->node_allocator();

  // Get the double array pointer from the Float64Array argument.
  Local<ArrayBuffer> ab = get_fields_array_buffer(args, 0, 5);
  double* fields = static_cast<double*>(ab->Data());

  size_t rss;
  int err = uv_resident_set_memory(&rss);
  if (err)
    return env->ThrowUVException(err, "uv_resident_set_memory");

  fields[0] = static_cast<double>(rss);
  fields[1] = static_cast<double>(v8_heap_stats.total_heap_size());
  fields[2] = static_cast<double>(v8_heap_stats.used_heap_size());
  fields[3] = static_cast<double>(v8_heap_stats.external_memory());
  fields[4] =
      array_buffer_allocator == nullptr
          ? 0
          : static_cast<double>(array_buffer_allocator->total_mem_usage());
}
----

===== rss
在linux下，uv_resident_set_memory()是通过/proc/self/stat来统计的。
具体参考: https://github.com/libuv/libuv/blob/master/src/unix/linux.c

=== memory
https://deepu.tech/memory-management-in-v8/
https://deepu.tech/avoiding-memory-leaks-in-nodejs/
https://v8.dev/blog/trash-talk

== typescript

== deno
https://github.com/denoland/deno

== ben
https://github.com/oven-sh/bun

== 参考
https://v8.dev/docs
