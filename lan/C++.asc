= 了解 C++
:hardbreaks-option:
:revnumber: 0.0.1
:author: orient
:toc:
:homepage: http://orientye.com
<<<

== history
https://en.cppreference.com/w/cpp/language/history

== 变量与函数
标识符
类型: https://en.cppreference.com/w/cpp/types (basic types, RTTI, type traits) 
值
物理: 内存
运算: sizeof, &
指针变量
数组
引用
复合类型

参数 返回值
调用规则: https://en.wikipedia.org/wiki/X86_calling_conventions
构造函数与析构函数
默认构造函数
copy constructor与copy assignment operator
move constructor与move assignment operator
new与delete函数 placement

关键字: const, volatile
https://en.cppreference.com/w/cpp/keyword

== 机器级表示与汇编嵌入
《CSAPP》chapter3

https://en.cppreference.com/w/cpp/language/asm
https://gcc.gnu.org/onlinedocs/gcc/Using-Assembly-Language-with-C.html
https://clang.llvm.org/compatibility.html#inline-asm

== object-oriented

=== C++对象模型

=== 封装

=== 继承
继承, 多重继承, 虚拟继承
参考《InsideThe C++Model Object 》3.4

=== 多态

==== CRTP
参考: https://en.wikipedia.org/wiki/Curiously_recurring_template_pattern
参考: https://fuzhe1989.github.io/2018/04/21/crtp/

== template

== STL

=== Container

==== Sequence Container
vector
deque
list(以及forward_list)
array

==== Associative Container
map multimap set  multiset 
unordered_map unordered_multimap
unordered_set unordered_multiset

==== impletation

==== 注意事项
vector:    push_back/[]/emplace/emplace_back/at
map:       find/[]/insert/at/emplace

=== Iterator
失效问题

=== Algorithm
https://en.cppreference.com/w/cpp/algorithm

=== Adaptor
==== 容器适应器

栈(Stack)

    stack<vector> s1; 
    stack<list > s2;
    stack<deque> s3; 

队列(Queue)

    queue<list> q1; 
    queue<deque> q2; 

优先级队列(Priority Queue)

    priority_queue<vector, less> pq1; 
    priority_queue<deque, greater> pq2; 

vector不能用来实现queue, 因为缺乏pop_front!
list不能用来实现priority_queue, pop中用到堆排序时要求randomaccess iterator

==== 迭代器适应器
如逆向迭代器(Reverse Iterator)

==== 函数适应器
https://en.cppreference.com/w/cpp/utility/functional

=== Functor
https://en.cppreference.com/w/cpp/utility/functional

=== Allocator

== C++11

https://en.cppreference.com/w/cpp/11

=== lambla

lambla == 匿名函数
lambla vs. closure
caputure

https://en.cppreference.com/w/cpp/language/lambda
https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/stubs/callback.h

=== shared_ptr/weak_ptr/unique_ptr
Q: 是否线程安全
std::enable_shared_from_this
shared_from_this/weak_from_this

== C++14
https://en.cppreference.com/w/cpp/14

== C++17
https://en.cppreference.com/w/cpp/17

== C++20
https://en.cppreference.com/w/cpp/20

== 并发

=== 线程

参考:《了解concurrency》c++部分

=== 并发-协程

参考:《了解coroutine》c++部分

== 工程实践

https://google.github.io/styleguide/cppguide.html

Effective C++ 3rd
More effective C++
Effective Modern C++

=== exception

https://google.github.io/styleguide/cppguide.html#Exceptions
https://google.github.io/styleguide/cppguide.html#noexcept

== 推荐资源
https://en.cppreference.com
https://github.com/MattPD/cpplinks