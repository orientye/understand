= rust
:revnumber: 0.0.1
:author: orient
:homepage: http://orientye.com
:toc:
:toclevels: 5
:hardbreaks-option:
<<<

== 概览
- 设计哲学

    内存安全
    零成本抽象
    实用性

== 核心
=== 基本概念
- mut
- const

    vs. let

- shadowing

    建议不要使用

- data types

    scalar types: integer, floating-point number, bool, and character
    compound types: tuple, array

- function
- comment
- control flow

=== 所有权(ownership)

==== Ownership Rules
- Each value in Rust has a variable that’s called its owner.
- There can only be one owner at a time.
- When the owner goes out of scope, the value will be dropped.

==== Copy and Move

==== References and Borrowing
- References and Borrowing
- Mutable References
- Dangling References

The Rules of References:

- At any given time, you can have either one mutable reference or any number of immutable references.
- References must always be valid.

==== Slice
Another data type that does not have ownership is the slice.
Slices let you reference a contiguous sequence of elements in a collection rather than the whole collection.

=== concurrency
==== coroutine
https://doc.rust-lang.org/nightly/std/ops/trait.Coroutine.html

=== misc
https://loglog.games/blog/leaving-rust-gamedev/

== 参考
https://github.com/rust-lang/rust
https://doc.rust-lang.org/reference/index.html
https://www.rust-lang.org/learn
《Rust编程之道》
https://github.com/KaiserY/trpl-zh-cn