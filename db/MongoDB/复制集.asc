:toc:
:toclevels: 5
:hardbreaks-option:

== 复制集

=== 作用
- 高可用
- 数据分发

    将数据从一个区域复制到另一个区域，减少另一个区域的读延迟

- 读写分离
- 异地容灾

=== 结构
- 一个主节点: 接受写入操作和选举时投票
- 两个/多个从节点: 复制主节点上的新数据和选举时投票, 从节点只接受(客户端)读取操作
- 不推荐使用Arbiter(投票节点，不存储数据)

=== 复制
- oplog(operations log)
- 异步, 因而存在延迟

=== 选举
- 如果主节点不可用, 会启动选举
- 心跳
- RAFT

=== 配置
https://docs.mongodb.com/manual/reference/replica-configuration/

=== 部署
- 主从节点的机器规格保持一样
- 主从节点尽量放在不同的数据中心
- 主从节点的数据库版本保持一样

=== 回滚

=== Read Preference

==== Mode
primary(默认)
primaryPreferred
secondary
secondaryPreferred
nearest
Q: Read Preference解决什么问题
Q: Read Preference带来什么问题

NOTE: Multi-document transactions that contain read operations must use read preference primary. All operations in a given transaction must route to the same member.

==== Behavior
All read preference modes except primary may return stale data because secondaries replicate operations from the primary in an asynchronous process. Ensure that your application can tolerate stale data if you choose to use a non-primary mode.
Read preference does not affect the visibility of data; i.e. clients can see the results of writes before they are acknowledged or have propagated to a majority of replica set members. For details, see Read Isolation, Consistency, and Recency.
Read preference does not affect causal consistency. The causal consistency guarantees provided by causally consistent sessions for read operations with "majority" read concern and write operations with "majority" write concern hold across all members of the MongoDB deployment.

==== Use Case
- Maximize Consistency - To avoid stale reads, use primary read preference and "majority" readConcern.
- Maximize Availability - To permit read operations when possible, use primaryPreferred. When there’s a primary you will get consistent reads , but if there is no primary you can still query secondaries. However, when using this read mode, consider the situation described in secondary vs secondaryPreferred.
- Maximize Response Speed - nearest. The driver or mongos will read from the nearest member and those no more than 15 milliseconds further away than the nearest member.nearest does not guarantee consistency.