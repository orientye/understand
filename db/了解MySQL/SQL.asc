:toc:
:toclevels: 5
:hardbreaks-option:

== SQL

=== 分类
- DDL(Data Definition Language)

    create, drop, alter, truncate, comment, rename...
    因为DDL没有事务性, 所以DDL不能回滚
    Q: 能online执行DDL吗? MySQL8.0 online ddl?
    https://dev.mysql.com/doc/refman/8.0/en/innodb-online-ddl.html
    http://mysql.taobao.org/monthly/2021/03/06/

- DML(Data Manipulation Language)

    insert, update, delete...

- DQL(Data Query Language)

    select...

- DCL(Data Control Language)

    grant, revoke...

- TCL(Transaction Definition Language)

    commit, rollback, savepoint...

=== 数据类型
https://dev.mysql.com/doc/refman/8.0/en/data-types.html

==== varchar
https://stackoverflow.com/questions/13506832/what-is-the-mysql-varchar-max-size

==== varbinary
https://stackoverflow.com/questions/54470262/mysql-varbinary-with-maximum-size
一般来说, MySQL VARBINARY with maximum size: 65533
https://dbfiddle.uk/?rdbms=mysql_8.0&fiddle=7c8b2d3395c618cdbb98100da4b5b1ae

==== json
https://stackoverflow.com/questions/33660866/native-json-support-in-mysql-5-7-what-are-the-pros-and-cons-of-json-data-type
https://www.slideshare.net/billkarwin/how-to-use-json-in-mysql-wrong

JSON类型支持需要>=5.7.8版本
推荐使用8.0以上版本:
https://mydbops.wordpress.com/2019/02/26/presentation-json-improvements-in-mysql-8-0/

=== 执行顺序

    (1) FROM
    (2) JOINs
    (3) ON
    (4) WHERE
    (5) GROUP BY(开始使用select中的别名, 后面语句中都可以, 违反标准?)
    (6) AVG, SUM....
    (7) HAVING
    (8) SELECT
    (9) DISTINCT
    (10) UNION
    (11) ORDER BY
    (12) LIMIT and OFFSET

=== join

==== WHERE vs INNER JOIN
https://stackoverflow.com/questions/121631/inner-join-vs-where

==== SELF JOIN
在同一张表上自己连接自己

==== UNION vs JOIN
UNION puts lines from queries after each other, while JOIN makes a cartesian product and subsets it -- completely different operations.
In simple terms, joins combine data into new columns. unions combine data into new rows.

==== join-impl

==== hash-join
https://dev.mysql.com/doc/refman/8.0/en/hash-joins.html
mysql 8.0.18(2019-10-14)
Beginning with MySQL 8.0.18, MySQL employs a hash join for any query for which each join has an equi-join condition and uses no indexes
A hash join is usually faster than and is intended to be used in such cases instead of the block nested loop algorithm(see Block Nested-Loop Join Algorithm) employed in previous versions of MySQL.
Beginning with MySQL 8.0.20, support for block nested loop is removed, and the server employs a hash join wherever a block nested loop would have been used previously.

=== 进阶

- CASE表达式
- SELF JOIN与排序(rank mysql 8.0)
- HAVING可以单独使用, 面向集合
- 子查询(及优化)
- NOT EXISTS vs NOT IN
- EXISTS(谓词predicate Q: 什么是谓词? 有哪些?)
- 更新后读取

    START TRANSACTION;
    SELECT value FROM counters WHERE id = 1 FOR UPDATE;
    UPDATE counters SET value = value + 1 WHERE id = 1;
    COMMIT;
    参考: http://www.sqlines.com/mysql/how-to/select-update-single-statement-race-condition

=== 优化

- index

    mysql> explain select * from (select * from ( select * from t1 where id=2602) );
    +----+-------------+------------+--------+-------------------+---------+---------+------+------+-------
    +
    | id | select_type | table      | type   | possible_keys     | key     | key_len | ref  | rows | Extra |
    +----+-------------+------------+--------+-------------------+---------+---------+------+------+-------
    +
    |  1 | PRIMARY     | <derived2> | system | NULL              | NULL    | NULL    | NULL |    1 |       |
    |  2 | DERIVED     | <derived3> | system | NULL              | NULL    | NULL    | NULL |    1 |       |
    |  3 | DERIVED     | t1         | const  | PRIMARY,idx_t1_id | PRIMARY | 4       |      |    1 |       |
    +----+-------------+------------+--------+-------------------+---------+---------+------+------+-------

    type: 
    常用的类型有: ALL, index, range, ref, eq_ref, const, system, NULL(从左到右, 性能从差到好)
    
    ALL: Full Table Scan, MySQL将遍历全表以找到匹配的行
    
    index: Full Index Scan, index与ALL区别为index类型只遍历索引树
    
    range: 只检索给定范围的行, 使用一个索引来选择行
    
    ref: 表示上述表的连接匹配条件, 即哪些列或常量被用于查找索引列上的值
    
    eq_ref: 类似ref, 区别就在使用的索引是唯一索引, 对于每个索引键值, 表中只有一条记录匹配, 
    简单来说, 就是多表连接中使用primary key或者 unique key作为关联条件
    
    const、system: 当MySQL对查询某部分进行优化, 并转换为一个常量时, 使用这些类型访问。
    如将主键置于where列表中, MySQL就能将该查询转换为一个常量
    system是const类型的特例, 当查询的表只有一行的情况下, 使用system
    
    NULL: MySQL在优化过程中分解语句, 执行时甚至不用访问表或索引, 例如从一个索引列里选取最小值可以通过单独索引查找完成。

- 使用高效的查询

    参数是子查询时, 用EXISTS代替IN
    参数是子查询时, 用连接代替IN
    EXISTS vs 连接: 如果没有索引, EXISTS可能比连接更胜一筹
    https://www.cnblogs.com/wxw16/p/6105624.html

- 避免排序

    会进行排序的代表性运算:
    GROUP BY子句
    ORDER BY子句
    聚合函数(SUM, COUNT, AVG, MAX, MIN)
    DISTINCT
    集合运算符(UNION, INTERSECT, EXCEPT)
    窗口函数(RANK, ROW_NUMBER等)

- 考虑用UNION ALL代替UNION
- 使用EXISTS代替DISTINCT
- 在极值函数中使用索引(MAX/MIN)
- 能写在WHERE子句里的条件不要写在HAVING子句里

    在使用GROUP BY子句聚合时会进行排序, 如果事先通过WHERE子句筛选出一部分行就能够减轻排序的负担。
    同时, WHERE子句的条件里可以使用索引。
    HAVING子句是针对聚合后生成的视图进行筛选的, 但是很多时候聚合后的视图都没有继承原表的索引结构。

- 在GROUP BY子句和ORDER BY子句中使用索引

- 真正使用索引: 参考: link:./索引.asc[《索引》]
- 减少子查询
- 先进行连接再进行聚合
- 合理使用视图

    减少中间表: 1展开数据需要耗费内存资源; 2原始表中的索引不容易使用到(特别是聚合时)
    聚合函数(AVG, COUNT, SUM, MIN, MAX)
    集合运算符(UNION, INTERSECT, EXCEPT等)

- 插入或更新

    传统的思路: 先select判断是否存在, 再选择insert或者update
    用replace into 与 insert into … on duplicate key update替换
    https://stackoverflow.com/questions/9168928/what-are-practical-differences-between-replace-and-insert-on-duplicate-ke

- 插入或读取

    似乎一条SQL搞不定?
    参考: https://stackoverflow.com/questions/20479971/mysql-insert-record-if-not-exists-else-return-the-id-of-record

- 插入或忽略

    INSERT IGNORE INTO ...

- force index(vs. use index)

    一条sql只会用到一个索引, mysql优化器会计算出一个合适的索引, 但是这个索引不一定是最好的。
    force index()指令可以避免优化器用到了一个低效的索引。

- 分页

    SELECT * FROM table_name LIMIT 10 OFFSET 8000001; (不推荐)
    SELECT * FROM table_name WHERE id > 8000000 LIMIT 10; (推荐)
    参考: https://hackernoon.com/please-dont-use-offset-and-limit-for-your-pagination-8ux3u4y