:toc:
:toclevels: 5
:hardbreaks-option:

== SQL

=== 分类
- DDL(Data Definition Language)

    create, drop, alter, truncate, comment, rename...
    因为DDL没有事务性, 所以DDL不能回滚
    Q: 能online执行DDL吗? MySQL8.0 online ddl?
    https://dev.mysql.com/doc/refman/8.0/en/innodb-online-ddl.html
    http://mysql.taobao.org/monthly/2021/03/06/

- DML(Data Manipulation Language)

    insert, update, delete...

- DQL(Data Query Language)

    select...

- DCL(Data Control Language)

    grant, revoke...

- TCL(Transaction Definition Language)

    commit, rollback, savepoint...

=== 数据类型
https://dev.mysql.com/doc/refman/8.0/en/data-types.html

==== 整形
不推荐使用整型类型的属性unsigned，若非要使用，参数sql_mode务必额外添加上选项NO_UNSIGNED_SUBTRACTION。
解读: 在做一些数据分析时，SQL可能返回的结果并不是想要得到的结果。

自增整型类型做主键，务必使用类型BIGINT，而非INT。
解读: 后期表结构调整代价巨大

MySQL 8.0版本前自增值并不持久化，可能会有回溯现象。
解读:
删除自增为cur的这条记录后，下一个自增值依然为cur+1，但如果这时数据库发生重启，那数据库启动后，表t的自增起始值将再次变为cur，即自增值发生回溯。
解决方法是升级到8.0: 若无法升级数据库版本8.0，则强烈不推荐在核心业务表中使用自增数据类型做主键。

当达到自增整型类型的上限值时，再次自增插入，MySQL数据库会报重复错误，MySQL并不会自动将其重置为1。

==== 浮点
不要再使用浮点类型Float、Double。
解读:
这些类型因为不是高精度，也不是SQL标准的类型。从8.0.17版本开始，当创建表用到类型Float或Double时，会抛出警告。

账户余额字段，使用整型而不是DECIMAL，这样性能更好，存储更紧凑。例如资金金额推荐用分来表示。

==== 字符串
字符串类型有: CHAR, VARCHAR, BINARY, VARBINARY, BLOB, TEXT, ENUM, and SET.

CHAR与VARCHAR:
CHAR(N)用来保存固定长度的字符，N的范围是0-255，N表示字符，而不是字节。
VARCHAR(N)来保存变长字符，N的范围为0-65536，N表示字符。
在超出65536个字符的情况下，可以考虑使用更大的字符类型TEXT或BLOB，两者最大存储长度为4G，其区别是BLOB没有字符集属性，纯属二进制存储。
https://stackoverflow.com/questions/13506832/what-is-the-mysql-varchar-max-size
CHAR和VARCHAR对于变长字符集如GBK、UTF8MB4，其本质是一样的，都是变长，设计时完全可以用VARCHAR替代CHAR。

VARBINARY:
https://stackoverflow.com/questions/54470262/mysql-varbinary-with-maximum-size
一般来说, MySQL VARBINARY with maximum size: 65533
https://dbfiddle.uk/?rdbms=mysql_8.0&fiddle=7c8b2d3395c618cdbb98100da4b5b1ae

==== json
https://stackoverflow.com/questions/33660866/native-json-support-in-mysql-5-7-what-are-the-pros-and-cons-of-json-data-type
https://www.slideshare.net/billkarwin/how-to-use-json-in-mysql-wrong

JSON类型支持需要>=5.7.8版本
推荐使用8.0以上版本: 8.0版本解决了更新JSON的日志性能瓶颈
https://mydbops.wordpress.com/2019/02/26/presentation-json-improvements-in-mysql-8-0/

优点:
1、可以任意的增减字段而无需修改数据表结构，甚至可以减少数据表的设计
2、某些情况下可以减少数据表的查询，减少关联查询

缺点:
1、查询/更新某个字段相对效率较低，建立索引等操作也稍微复杂些
2、不适合存储业务逻辑复杂或者需要统计的数据

适用场景:
无schema的场景
仅是简单的读取或者整体覆盖一个有结构的数据，不需要用来统计或者局部更新

=== 执行顺序

    (1) FROM
    (2) JOINs
    (3) ON
    (4) WHERE
    (5) GROUP BY(开始使用select中的别名, 后面语句中都可以, 违反标准?)
    (6) AVG, SUM....
    (7) HAVING
    (8) SELECT
    (9) DISTINCT
    (10) UNION
    (11) ORDER BY
    (12) LIMIT and OFFSET

=== join

==== 为什么需要join
数据库需要有多个表: 现实中的事物就是复杂多样的
多个表之间存在一些关系
可以不使用join，放在应用层处理(例如一些NoSQL不支持JOIN，还只能应用层处理)

交给应用层处理的缺点:
执行效率方面不如在数据库高效
数据一致性和正确性得不到保证

==== WHERE vs INNER JOIN
[source, sql]
----
    SELECT * FROM table1 t1
    INNER JOIN table2 t2 ON t1.id = t2.id;

    SELECT * FROM table1 t1, table2 t2
    WHERE t1.id = t2.id;
----
是等价的，执行计划也一样。
https://stackoverflow.com/questions/121631/inner-join-vs-where

==== SELF JOIN
在同一张表上自己连接自己

==== UNION vs JOIN
UNION puts lines from queries after each other, while JOIN makes a cartesian product and subsets it -- completely different operations.
In simple terms, joins combine data into new columns. unions combine data into new rows.

==== join-impl
===== 概念
常见的join算法有: nested-loop-join、hash-join、merge-join

MySQL支持nested-loop-join，8.0.18版本后支持hash-join。

可以使用explain查看使用哪种join算法:
EXPLAIN FORMAT=JSON或者EXPLAIN FORMAT=Tree

===== nested-loop-join
https://dev.mysql.com/doc/refman/8.0/en/nested-loop-joins.html

nested-loop-join相当于两个嵌套循环，用第一张表做outter loop，第二张表做inner loop。

===== hash-join
https://dev.mysql.com/doc/refman/8.0/en/hash-joins.html
mysql 8.0.18(2019-10-14)
Beginning with MySQL 8.0.18, MySQL employs a hash join for any query for which each join has an equi-join condition and uses no indexes
A hash join is usually faster than and is intended to be used in such cases instead of the block nested loop algorithm(see Block Nested-Loop Join Algorithm) employed in previous versions of MySQL.
Beginning with MySQL 8.0.20, support for block nested loop is removed, and the server employs a hash join wherever a block nested loop would have been used previously.

hash-join分为两个阶段: build构建阶段和probe探测阶段。

Q: HashJoin普遍情况下性能最优，为什么还需要实现其他JOIN呢？
因为在特定的情况下，NestedLoopIndexScan可能会比HashJoin更快，或者在需要排序的情况下，SortMergeJoin也可能更有优势。影响因素有具体的查询语句，表A和表B的大小，join键值的分布，以及是否对join键值有index等等。数据库在执行语句的时候，需要通盘考虑这些影响因素来决定最后具体使用哪种JOIN算子。做这个决定的是数据库的大脑–优化器。

==== 参考
https://www.infoq.cn/article/6xgx92fyq45cmxpj2mgz
https://zhuanlan.zhihu.com/p/349420901

=== 子查询

==== 参考
https://zhuanlan.zhihu.com/p/350009405

=== 进阶

- CASE表达式
- SELF JOIN与排序(rank mysql 8.0)
- HAVING可以单独使用, 面向集合
- 子查询(及优化)
- NOT EXISTS vs NOT IN
- EXISTS(谓词predicate Q: 什么是谓词? 有哪些?)
- 更新后读取

    START TRANSACTION;
    SELECT value FROM counters WHERE id = 1 FOR UPDATE;
    UPDATE counters SET value = value + 1 WHERE id = 1;
    COMMIT;
    参考: http://www.sqlines.com/mysql/how-to/select-update-single-statement-race-condition

=== 优化

- index

    mysql> explain select * from (select * from ( select * from t1 where id=2602) );
    +----+-------------+------------+--------+-------------------+---------+---------+------+------+-------
    +
    | id | select_type | table      | type   | possible_keys     | key     | key_len | ref  | rows | Extra |
    +----+-------------+------------+--------+-------------------+---------+---------+------+------+-------
    +
    |  1 | PRIMARY     | <derived2> | system | NULL              | NULL    | NULL    | NULL |    1 |       |
    |  2 | DERIVED     | <derived3> | system | NULL              | NULL    | NULL    | NULL |    1 |       |
    |  3 | DERIVED     | t1         | const  | PRIMARY,idx_t1_id | PRIMARY | 4       |      |    1 |       |
    +----+-------------+------------+--------+-------------------+---------+---------+------+------+-------

    type: 
    常用的类型有: ALL, index, range, ref, eq_ref, const, system, NULL(从左到右, 性能从差到好)
    
    ALL: Full Table Scan, MySQL将遍历全表以找到匹配的行
    
    index: Full Index Scan, index与ALL区别为index类型只遍历索引树
    
    range: 只检索给定范围的行, 使用一个索引来选择行
    
    ref: 表示上述表的连接匹配条件, 即哪些列或常量被用于查找索引列上的值
    
    eq_ref: 类似ref, 区别就在使用的索引是唯一索引, 对于每个索引键值, 表中只有一条记录匹配, 
    简单来说, 就是多表连接中使用primary key或者unique key作为关联条件
    
    const、system: 当MySQL对查询某部分进行优化, 并转换为一个常量时, 使用这些类型访问。
    如将主键置于where列表中, MySQL就能将该查询转换为一个常量
    system是const类型的特例, 当查询的表只有一行的情况下, 使用system
    
    NULL: MySQL在优化过程中分解语句, 执行时甚至不用访问表或索引, 例如从一个索引列里选取最小值可以通过单独索引查找完成。

- 使用高效的查询

    参数是子查询时, 用EXISTS代替IN
    参数是子查询时, 用连接代替IN
    EXISTS vs 连接: 如果没有索引, EXISTS可能比连接更胜一筹
    https://www.cnblogs.com/wxw16/p/6105624.html

- 避免排序

    会进行排序的代表性运算:
    GROUP BY子句
    ORDER BY子句
    聚合函数(SUM, COUNT, AVG, MAX, MIN)
    DISTINCT
    集合运算符(UNION, INTERSECT, EXCEPT)
    窗口函数(RANK, ROW_NUMBER等)

- 考虑用UNION ALL代替UNION
- 使用EXISTS代替DISTINCT
- 在极值函数中使用索引(MAX/MIN)
- 能写在WHERE子句里的条件不要写在HAVING子句里

    在使用GROUP BY子句聚合时会进行排序, 如果事先通过WHERE子句筛选出一部分行就能够减轻排序的负担。
    同时, WHERE子句的条件里可以使用索引。
    HAVING子句是针对聚合后生成的视图进行筛选的, 但是很多时候聚合后的视图都没有继承原表的索引结构。

- 在GROUP BY子句和ORDER BY子句中使用索引

- 真正使用索引: 参考: link:./索引.asc[《索引》]
- 减少子查询
- 先进行连接再进行聚合
- 合理使用视图

    减少中间表: 1展开数据需要耗费内存资源; 2原始表中的索引不容易使用到(特别是聚合时)
    聚合函数(AVG, COUNT, SUM, MIN, MAX)
    集合运算符(UNION, INTERSECT, EXCEPT等)

- 插入或更新

    传统的思路: 先select判断是否存在, 再选择insert或者update
    用replace into与insert into ... on duplicate key update替换
    https://stackoverflow.com/questions/9168928/what-are-practical-differences-between-replace-and-insert-on-duplicate-ke

- 插入或读取

    似乎一条SQL搞不定?
    参考: https://stackoverflow.com/questions/20479971/mysql-insert-record-if-not-exists-else-return-the-id-of-record

- 插入或忽略

    INSERT IGNORE INTO ...

- force index(vs. use index)

    一条sql只会用到一个索引, mysql优化器会计算出一个合适的索引, 但是这个索引不一定是最好的。
    force index()指令可以避免优化器用到了一个低效的索引。

- 分页

    SELECT * FROM table_name LIMIT 10 OFFSET 8000001; (不推荐)
    SELECT * FROM table_name WHERE id > 8000000 LIMIT 10; (推荐)
    参考: https://hackernoon.com/please-dont-use-offset-and-limit-for-your-pagination-8ux3u4y