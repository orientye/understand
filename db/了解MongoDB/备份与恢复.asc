== 备份与恢复
:hardbreaks-option:

=== 考虑因素
- 数据粒度: 实例 文件 db collection document?
- 时间点: 能否精确到任意时间点(PIT:any-point-in-time)
- 对线上业务的影响: 热冷; 是否需要新节点; 是否需要停写; 性能影响
- 一致性
- 周期与效率

=== 备份机制
- 全量备份 + 增量备份(oplog增量)
    
    优点: 根据全量备份的方式, 粒度可能会细一些
    缺点: 复杂一些

- 延迟节点备份
    
    优点: 实现简单
    缺点: 粒度太粗, 一是针对该节点上的所有数据; 二是时间跨度大

=== 全量备份
- mongodump

    逻辑备份
    支持单库单表
    缺点: 数据量大的时候, dump性能可能会比较慢, 原因: 如果数据超过内存容量, 将会引起page faults
    https://docs.mongodb.com/manual/core/backups/#back-up-with-mongodump

- 文件系统快照(lvm snapshot/Amazon EBS/Aliyun ECS Cloud Disk)

    物理备份
    不支持单库单表
    快照过程中可以不用停机
    数据文件和Journal须在同一个卷上
    参考: https://docs.mongodb.com/manual/core/backups/#back-up-with-filesystem-snapshots

- 复制数据文件(cp/tar/rsync)

    物理备份
    不支持单库单表
    缺点: 需要停止写入(即db.shutdownServer/db.fsyncLock), 原因: 拷贝多个文件不是原子操作
    参考: https://docs.mongodb.com/manual/core/backups/#back-up-with-cp-or-rsync

=== 逻辑备份(mongodump)
- https://docs.mongodb.com/database-tools/mongodump/

=== 逻辑恢复(mongorestore)
- https://docs.mongodb.com/database-tools/mongorestore/

=== 复制集
- 一般在secondary上进行备份

=== 分片集群
- balance
- 一致性
- 备份
- 恢复an Entire Cluster
- 恢复a Single Shard
    
    Q: 如果发生了chunk迁移(移入或者移出)怎么办?
    A: 根据config来调整/忽略/该shard上的所有collection均指定唯一shard(别的移入呢)?

- 恢复db
- 恢复collection

=== 恢复
- 新建实例，恢复后切换到新实例
- 新建实例，恢复部分数据到原有实例
- 原有实例上恢复(一般不建议)

=== 工具
- mongodb

    Atlas
    MongoDB Cloud Manager or Ops Manager

- 阿里云

    https://help.aliyun.com/document_detail/55008.html?spm=a2c4g.11174283.2.17.3cdb6c7dSbMuN9
    副本集实例和分片集群实例目前支持实例级别和库级别的备份和回档
    目前最高版本支持4.4(2021/04/13, 但4.4目前仅支持副本集, https://help.aliyun.com/document_detail/61906.html?spm=a2c4g.11186623.6.563.641a7a9ay2dUAy, 分片集群需要选择4.2或其它版本)

- 腾讯云

    副本集实例目前支持实例级别和库表级别的备份和回档
    分片集群实例目前支持实例级别的备份和回档
    目前最高版本支持4.0(2021/04/13)

=== 问题
.Q:如何实现collection级别的任意时间点的备份与恢复
[%collapsible]
====
    考虑停止与该collection相关的服务
    文件系统快照+oplog到新建实例(阿里云直接提供)
    mongodump collection
    mongorestore -drop collection到原有实例
    某些情况下要考虑与collection相关联的数据(跟应用相关)
====

.Q:如何实现document级别的任意时间点的备份与恢复
[%collapsible]
====
- 方案:

    方案一: 业务逻辑实现
    方案二: mongodump collection -q

- 优点

    粒度小, 较高的灵活性

- 缺点

    方案一对create和delete的备份和恢复不友好, 方案二带上-oplog参数呢
    适合collection比较单一，并且关联比较少的场景
====

=== 参考与推荐
- https://developer.aliyun.com/article/406060
- https://docs.mongodb.com/manual/core/backups/
- https://docs.cloudmanager.mongodb.com/tutorial/nav/backup-use/