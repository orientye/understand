:toc:
:toclevels: 5
:hardbreaks-option:

== 事务

=== ACID
- 原子性

- 一致性

- 隔离性

    the isolation level is the setting that fine-tunes the balance 
    between performance and reliability, consistency, and reproducibility of results 
    when multiple transactions are making changes and performing queries at the same time.

- 持久性

    在异常崩溃时:
    如果没有出现页数据损坏，可以通过redo恢复数据，否则，通过double write buffer能够恢复页数据。
    假如double write buffer落盘的页数据都有问题，那就会丢失数据了？

=== 启动方式

    显式事务: start/begin transaction; commit/rollback
    隐式事务: 每个语句都会在一个事务中
        autocommit=1(默认)
        autocommit=0时执行第一个语句时, 事务就启动了, 此事务会持续到主动执行commit/rollback或者disconnect

=== 隔离性
==== 现象
- dirty read

- non-repeatable read

- phantom read

==== 级别
- read uncommited

    直接返回记录上的最新值, 没有视图概念

- read commited

    视图在每个SQL语句开始执行时创建

- repeatable read(默认)

    视图在事务启动时创建, 整个事务期间都用这个视图
    注意: MySQL与标准SQL略有不同, 可以认为其在RR级别上解决了幻读

- serializable

    对于同一行记录, 写会加写锁, 读会加读锁, 当出现读写锁冲突时, 后访问的事务必须等待前一个事务执行完成才能继续执行

==== 参考
https://en.wikipedia.org/wiki/Isolation_(database_systems)
https://dev.mysql.com/doc/refman/8.0/en/innodb-transaction-isolation-levels.html

==== 示例
create table T(c int) engine=InnoDB; Insert into T(c) values(1);

[format="csv", options="header", separator=|]
|===
事务A|事务B
启动事务|启动事务
查询得到值1|
|查询得到值1
|将1改成2
查询得到值v1|
|提交事务B
查询得到值v2|
提交事务A|
查询得到值v3|
|===

[format="csv", options="header", separator=|]
|===
隔离级别|结果
read uncommited |v1=2 v2=2 v3=2
read commited|v1=1 v2=2 v3=2
repeatable read|v1=1 v2=1 v3=2
serializable|事务B执行将1改成2的时候会阻塞
|===

- 隔离如何实现:

    锁 + MVCC(Multi-Version Concurrency Control)

- MVCC

    应对高并发事务, MVCC比单纯的加行锁更有效, 开销更小
    MVCC在RC和RR隔离级别下起作用

    既可以基于乐观锁又可以基于悲观锁来实现
    InnoDB中MVCC的实现方式为: 每一行记录都有两个隐藏列: DATA_TRX_ID、DATA_ROLL_PTR(如果没有主键, 则还会多一个隐藏的主键列)。

    DATA_TRX_ID
    记录最近更新这条行记录的事务ID, 大小为6个字节

    DATA_ROLL_PTR
    表示指向该行回滚段(rollback segment)的指针, 大小为7个字节, InnoDB通过此指针找到之前版本的数据。
    该行记录上所有旧版本, 在undo中都通过链表的形式组织。

    DB_ROW_ID
    行标识(隐藏单调自增ID), 大小为6字节, 如果表没有主键, InnoDB会自动生成一个隐藏主键, 因此会出现这个列。
    另外, 每条记录的头信息(record header)里都有一个专门的bit(deleted_flag)来表示当前记录是否已经被删除。

    参考: https://dev.mysql.com/doc/refman/8.0/en/innodb-multi-versioning.html

- 实践

    应该使用哪种隔离级别？根据业务情况来定

    避免长事务:
    长事务占用锁资源
    长事务可能会拖垮整个库
    回滚记录会导致大量占用存储空间

    如何避免长事务?

=== 快照读与当前读
- 快照读

    读取的是记录的可见版本 (有可能是历史版本), 不用加锁。(也有例外)
    select * from table where ?;

    With RR, the snapshot is based on the time when the first read operation is performed(except WITH CONSISTENT SNAPSHOT).
    With RC, the snapshot is reset to the time of each consistent read operation.

- 当前读

    特殊的读操作, 插入/更新/删除操作, 属于当前读, 需要加锁。
    select * from table where ? lock in share mode; (S锁)
    select * from table where ? for update;         (X锁)
    insert update delete                            (X锁)
    以上语句都属于当前读, 读取记录的最新版本。并且, 读取之后, 还需要保证其他并发事务不能修改当前记录, 对读取记录加锁。
    Q: 一个在写, 另一个能同时读吗?

- 参考
https://dev.mysql.com/doc/refman/8.0/en/innodb-consistent-read.html
https://dev.mysql.com/doc/refman/8.0/en/innodb-locking-reads.html

=== Q&A
MySQL事务能跨实例吗?
在同一个实例上, MySQL事务能跨DB吗?

=== 参考
https://dev.mysql.com/doc/refman/8.0/en/innodb-transaction-model.html
https://dev.mysql.com/doc/refman/8.0/en/sql-transactional-statements.html
https://tech.meituan.com/2014/08/20/innodb-lock.html