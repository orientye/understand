:toc:
:toclevels: 5
:hardbreaks-option:

== 索引

== 数据结构

- B+ Tree索引

    B+树 vs. B树

    索引与页: 一个节点对应一页?

    Q: InnoDB一棵B+树可以存放多少行数据
    A: https://mp.weixin.qq.com/s/comUSOOUPbkfdcXOvXgpVA

- Hash索引

    除了memory引擎外, NDB引擎也支持唯一哈希索引;
    innodb引擎有一个特殊的功能叫做自适应哈希索引, 当innodb注意到某些索引值被使用的非常频繁时, 
    它会在内存中基于btree索引之上再创建一个哈希索引, 这样就让btree索引也具有哈希索引的一些优点,
    比如: 快速的哈希查找, 这是一个全自动的, 内部的行为, 用户无法控制或者配置
    如果有必要, 可以选择关闭这个功能(innodb_adaptive_hash_index=OFF, 默认为ON)
    https://dev.mysql.com/doc/refman/8.0/en/index-btree-hash.html

- Inverted Lists(FULLTEXT索引)

- R树索引

== 类别

- 聚簇索引(clustered index)/主键索引

    叶子结点存储的是整行数据
    如果没有主键, 会寻找非空唯一索引, 如果没找到合适的, 则会隐式创建主键rowid(6-byte)

- 非聚簇索引(nonclustered index)/非主键索引/二级索引

    叶子结点存储的是主键的值

- 普通索引, 唯一索引, 联合索引(也称组合索引/复合索引/多列索引), 外键索引, 全文索引

- 回表

    SQL需要通过二级索引查询得到主键值，然后再根据主键值搜索主键索引，最后定位到完整的数据。

- 覆盖索引

    若查询的字段在二级索引的叶子节点中，则可直接返回结果，无需回表。
    这种通过组合索引避免回表的优化技术称为索引覆盖(Covering Index)。

- 函数索引
https://blogs.oracle.com/mysql/post/functional-indexes-in-mysql

== 设计

- 一般设计原则

    如果没有指定主键, InnoDB会用一个具有唯一且非空值的索引来代替
    如果不存在这样的索引, InnoDB会定义一个隐藏的主键, row num
    应当尽量避免随机的聚簇主键, 例如字符串主键
    主键长度应当尽量短小, 这样普通索引就越小, 从而节省空间
    一般建议使用自增主键: 避免B+树分裂
    采用业务字段作为主键: 只有一个索引; 该索引必须是唯一索引
    尽量使用主键查询
    尽量使用覆盖索引
    最左前缀原则: 最左前缀既可以是联合索引的最左N个字段, 也可以是字符串索引的最左M个字符
    避免重复索引, 冗余索引

- 字符串字段的索引

    完整索引, 可能比较占用空间。
    前缀索引, 节省空间, 但会增加扫描次数, 并且不能使用覆盖索引。
    倒序存储, 再创建前缀索引, 绕过字符串本身前缀的区分度不够问题, 不支持范围扫描。
    创建hash字段索引, 有额外的存储和计算消耗, 不支持范围扫描。

- 联合索引

    数据结构
    查询

== 失效情况

== 操作

    可以通过表sys.schema_unused_indexes和索引不可见特性，删除无用的索引。

    MySQL会选择成本最低的执行计划，可以通过EXPLAIN命令查看每个SQL的成本
    一般只对高选择度的字段和字段组合创建索引，低选择度的字段如性别，不创建索引
    低选择性，但是数据存在倾斜，通过索引找出少部分数据，可以考虑创建索引
    若数据存在倾斜，可以创建直方图，让优化器知道索引中数据的分布，进一步校准执行计划

== 优化
=== 索引下推
索引下推（Index Condition Pushdown, ICP）用于提高查询性能。它允许 MySQL 在使用索引时，将某些条件下推到存储引擎层，从而减少需要读取的行数。

示例：
假设有一个表 employees，包含 id, name, age 和 salary 字段，并且在 age 字段上有索引。
SELECT * FROM employees WHERE age > 30 AND salary < 50000;
在这个查询中，如果启用了索引下推，MySQL 会首先使用 age 索引来找到所有 age > 30 的行，然后在存储引擎层进一步过滤出 salary < 50000 的行。

启用：
>=MySQL 5.6 中默认启用。
SHOW VARIABLES LIKE 'optimizer_switch';查找 index_condition_pushdown 的值，确保为 on。

注意事项：
适用于使用复合索引的查询，尤其是当 WHERE 子句中包含多个条件时。