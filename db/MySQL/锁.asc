:toc:
:toclevels: 5
:hardbreaks-option:

== 锁

=== 全局锁
- 对整个数据库实例加锁
- 命令: flush tables with read lock(FTWRL)
- 典型使用场景

    全库逻辑备份，也就是把整库每个表都select出来存成文本
    缺点: 如果是主库备份，业务基本停摆；如果是从库备份，主从延迟；
    因为加上全局锁，意味着整个数据库都是只读状态。
    正确姿势: mysqldump --single-transaction(过程中也用到FTWRL)

- 为什么全库逻辑备份需要加全局锁
防止在备份数据库期间，因为数据或表结构的更新，出现备份文件的数据与预期不一样的情况。

- 如何防止备份数据库时全局锁影响到业务？
如果数据库的引擎支持的事务支持可重复读的隔离级别，那么在备份数据库之前先开启事务，会先创建Read View，然后整个事务执行期间都在用这个Read View，而且由于MVCC的支持，备份期间业务依然可以对数据进行更新操作。
在可重复读的隔离级别下，即使其他事务更新了表的数据，也不会影响备份数据库时的Read View，这也正是事务的隔离性，这样备份期间备份的数据一直是在开启事务时的数据。
使用mysqldump带上–single-transaction参数，就会事先开启事务。
对于MyISAM这种不支持事务的引擎，在备份数据库时就需要使用全局锁。

=== 表锁
==== 表锁
lock tables ... read/write
unlock tables主动释放或客户端断开时自动释放
对于innodb, 不推荐使用，影响面太大，改成begin和commit;
对于MyISAM等，安排升级换引擎

参考:
https://dev.mysql.com/doc/refman/8.0/en/lock-tables.html
https://www.mysqltutorial.org/mysql-table-locking/

==== MDL锁(metadata lock)
MDL无需显式使用
对表做增删改查，加MDL读锁
对表结构变更操作，加MDL写锁
事务的MDL锁，在语句执行开始时申请，会等到整个事务提交后再释放

metadata lock是server层的锁，表级锁，每执行一条DML、DDL语句时都会申请MDL锁，DML操作需要MDL读锁，DDL操作需要MDL写锁(MDL加锁过程是系统自动控制，无法直接干预，读读共享，读写互斥，写写互斥)，申请MDL锁的操作会形成一个队列，队列中写锁获取优先级高于读锁。一旦出现写锁等待，不但当前操作会被阻塞，同时还会阻塞后续该表的所有操作。事务一旦申请到MDL锁后，直到事务执行完才会将锁释放。(有种特殊情况如果事务中包含DDL操作，mysql会在DDL操作语句执行前，隐式提交commit，以保证该DDL语句操作作为一个单独的事务存在，同时也保证元数据排他锁的释放)。

MDL锁一旦发生会对业务造成极大影响(后续所有对该表的访问都会被阻塞)。
因此，要尽量避免MDL锁的发生，一些优化建议:

    开启metadata_locks表记录MDL锁
    设置参数lock_wait_timeout为较小值，使被阻塞端主动停止
    及时提交事务，避免使用大事务
    增强监控告警，及时发现MDL锁
    DDL操作及备份操作放在业务低峰期执行
    少用工具开启事务进行查询，及时关闭图形化工具

参考:
https://dev.mysql.com/doc/refman/8.0/en/metadata-locking.html
http://mysql.taobao.org/monthly/2018/02/01/
https://dev.mysql.com/doc/refman/8.0/en/performance-schema-metadata-locks-table.html
https://www.jiangmingtao.com/deep-understanding-of-mdl-metadata-locks

==== AUTO-INC Locks
An AUTO-INC lock is a special table-level lock taken by transactions inserting into tables with AUTO_INCREMENT columns. In the simplest case, if one transaction is inserting values into the table, any other transactions must wait to do their own inserts into that table, so that rows inserted by the first transaction receive consecutive primary key values.

The innodb_autoinc_lock_mode configuration option controls the algorithm used for auto-increment locking. It allows you to choose how to trade off between predictable sequences of auto-increment values and maximum concurrency for insert operations.

参考: https://dev.mysql.com/doc/refman/8.0/en/innodb-auto-increment-handling.html

=== 意向锁(Intension Locks)
InnoDB supports multiple granularity locking which permits coexistence of row locks and table locks

intention shared lock(IS)

    indicates that a transaction intends to set a shared lock on individual rows in a table

intention exclusive lock(IX)

    indicates that that a transaction intends to set an exclusive lock on individual rows in a table

For example, SELECT ... LOCK IN SHARE MODE sets an IS lock, and SELECT ... FOR UPDATE sets an IX lock.

Before a transaction can acquire a shared lock on a row in a table, it must first acquire an IS lock or stronger on the table.
Before a transaction can acquire an exclusive lock on a row in a table, it must first acquire an IX lock on the table.

Intention locks do not block anything except full table requests (for example, LOCK TABLES ... WRITE).
The main purpose of intention locks is to show that someone is locking a row, or going to lock a row in the table.

为了控制在一个事务锁表之后, 其他事务的「锁行」行为, 因此设置这么一道关卡-每个事务获取行锁时都要先获取对应的意向锁.
每个事务在尝试获取自己需要的行锁时, 会先通过意图锁检查一下表锁的占用情况, 再决定是否继续获得行锁, 具体判断规则:
如果表X锁被占有, 则其他事务尝试获得IS、IX均会阻塞, 也就不能继续获取行X锁或行S锁了。
如果表S锁被占有, 则其他事务可以获得IS, 而获得IX会阻塞, 从而阻止其他事务获得行X锁。

=== 行锁

==== record lock
- 共享锁/读锁 shared (S) lock

    permits the transaction that holds the lock to read a row.

- 排它锁/写锁 exclusive (X) lock

    permits the transaction that holds the lock to update or delete a row.

==== Gap Lock & Next-key Lock 
>=RR

Next-Key Lock = Gap Lock + Record Lock 前开后闭

For locking reads (SELECT with FOR UPDATE or LOCK IN SHARE MODE), UPDATE, and DELETE statements, locking depends on whether the statement uses a unique index with a unique search condition, or a range-type search condition. For a unique index with a unique search condition, InnoDB locks only the index record found, not the gap before it. For other search conditions, InnoDB locks the index range scanned, using gap locks or next-key locks to block insertions by other sessions into the gaps covered by the range.

作用: 解决幻读

==== Insert Intension Lock
An insert intention lock is a type of gap lock set by INSERT operations prior to row insertion

This lock signals the intent to insert in such a way that multiple transactions inserting into the same index gap need not wait for each other if they are not inserting at the same position within the gap. Suppose that there are index records with values of 4 and 7. Separate transactions that attempt to insert values of 5 and 6, respectively, each lock the gap between 4 and 7 with insert intention locks prior to obtaining the exclusive lock on the inserted row, but do not block each other because the rows are nonconflicting.

=== 乐观锁与悲观锁
==== 应用场景
乐观锁，适用于写比较少的情况下，冲突真的很少发生的时候，可以省去了锁的开销，加大了系统的整个吞吐量。
但如果经常产生冲突上层应用会不断的进行retry, 这种情况下用悲观锁就比较合适。

==== 实现方式
悲观锁的实现:

    依靠数据库提供的锁机制, 悲观锁的流程如下:
    1 在对数据修改前，尝试增加排他锁。
    2 加锁失败，意味着数据正在被修改，进行等待或者抛出异常。
    3 加锁成功，对数据进行修改，提交事务，锁释放。
    4 如果加锁成功，有其他线程对该数据进行操作或者加排他锁的操作，只能等待或者抛出异常。

乐观锁的实现:

    VERSION方式:
        一般是在数据表中加上一个数据版本号version字段，当数据被修改时，version值加一。
        更新数据值时，在读取数据的同时也会读取version值，
        在提交更新时，如果之前到的version值与当前数据库中的version值相等，则更新, 否则重试直到更新成功。
        示例sql: update table set n=n+1, version=version+1 where id=#{id} and version=#{version};

    CAS方式:
        即compare and swap或compare and set，涉及到三个操作数，数据所在的内存值，预期值，新值。
        当需要更新时，判断当前内存值与之前取到的值是否相等，若相等，则用新值更新，若失败则重试。

=== 分析
事务的隔离级别？
是否为主键？
如果不是主键，那么id列上有索引吗？
如果有二级索引，那么这个索引是唯一索引吗？
主键扫描？唯一键扫描？范围扫描？全表扫描？

=== 死锁
超时机制
wait-for graph检测机制
innodb并不会回滚大部分的错误异常，但死锁除外

=== 参考
https://dev.mysql.com/doc/refman/8.0/en/innodb-locking.html