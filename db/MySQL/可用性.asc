:toc:
:toclevels: 5
:hardbreaks-option:

== 可用性

=== 复制

- 复制是高性能，高可用，可扩展，灾难恢复，备份(在从库上备份以减轻主库压力)以及数据仓库等工作的基础
- 复制只能扩展读操作，无法扩展写操作，写操作只能通过分区扩展
- 复制原理

- binlog的三种格式

    statement(也叫逻辑复制, MySQL 3.23)
    row(MySQL 5.1)
    mixed

    statement的binlog可能会导致主备不一致
    row格式主要是占空间
    mixed格式会自动判断这条SQL语句是否可能引起主备一致，如果可能用row, 否则用statement

    MYSQL设置为statement不合理，至少要设置为mixed
    现在越来越多的场景要求binlog设置为row, 好处很多，例如: 恢复数据

    5.7.7之前，默认STATEMENT
    5.7.7及更高版本中，默认值ROW
    日志格式通过 binlog-format 指定，
    如binlog-format=STATEMENT/ROW/MIXED

- binlog的作用

    复制; 数据恢复

- binlog相关命令

    SHOW BINLOG EVENTS
    mysqlbinlog

- binlog的刷盘

    sync_binlog:
    如果设置为0，则表示MySQL不控制binlog的刷新，由文件系统去控制它缓存的刷新；
    如果设置为不为0的值，则表示每sync_binlog次事务，MySQL调用文件系统的刷新操作刷新binlog到磁盘中。
    设为1是最安全的，在系统故障时最多丢失一个事务的更新，但是会对性能有所影响。
    也有为了性能设置为100-1000中的某个值。
    5.7.7之前默认值是0，5.7.7和更高版本使用默认值1

- 拓扑结构

    一主一/多丛
    主主(主动-主动模式) - 强烈不推荐
    主主(主动-被动模式)
    拥有备库的主主结构
    环形复制 - 不推荐
    主库，分发主库，及备库
    树或金字塔形
    定制的复制方案:
        选择性复制: -replicate_wild_do_table
        分离功能等
    现在用的比较多的是主主

- 同步异步

    <5.5(2010年前)  异步复制
    5.5             半同步复制
    5.7.17(2016年)  全同步复制

=== 组复制
MySQL Group Replication

两种模式:
单主(Single Primary)模式
多主(Multi Primary)模式

参考: https://dev.mysql.com/doc/refman/8.0/en/group-replication.html

=== 架构

- 方案: db-connection pool / API

- 方案: MM/MS + vip

- 方案: MMM

- 方案: MHA(+中间件)

- 方案: Orchestrator(+中间件)

- 方案：MM + keepalive(网易)
参考: http://www.noobyard.com/article/p-yxmiucfw-ko.html

- 方案: 基于分布式协议(基于MGR等)
InnoDB Cluster: https://dev.mysql.com/doc/refman/8.0/en/mysql-innodb-cluster-introduction.html

=== 案例
- 案例: MMM(美团2015年前)

- 案例: MHA + 中间件(美团2015后)
参考: https://tech.meituan.com/2017/06/29/database-availability-architecture.html

- 案例: github(多数据中心)

=== InnoDB Cluster
一个InnoDB Cluster由三个组件组成: MGR集群、MySQL Shell、MySQL Router。

参考: https://dev.mysql.com/doc/refman/8.0/en/mysql-innodb-cluster-introduction.html
