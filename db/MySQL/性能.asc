
:toc:
:toclevels: 5
:hardbreaks-option:

== 性能

=== 通用法则
数据库优化的通用法则基本可分为5个层次(即漏斗法则):

- 减少数据访问(减少磁盘访问)

    索引，减少全表扫描

- 返回更少数据(减少网络传输或磁盘访问)

    根据实际业务需求返回所需数据

- 减少交互次数(减少网络传输)

    缓存
    存储过程
    批量查询

- 减少服务器CPU与内存开销(减少CPU与内存开销)

    批量处理
    在客户端处理大量负责运算
    近似计算代替准确计算

- 利用更多资源(增加资源)

    硬件资源
    读写分离
    分库分表
    并行处理

=== 硬件系统
- CPU

    innodb-read_io_threads, innodb_write_io_threads
    注意mysql在NUMA上的问题 https://www.modb.pro/db/57983

- 内存

    innodb buffer pool大小
    缓冲池命中率

- 硬盘

    顺序访问
    固态硬盘
    合理设置RAID类型: 例如RAID10

- 网络

=== 库表设计
- link:../mysql-convention.asc[参考:《mysql-convention》]

- 分区表

    并不是用于提升性能，如果使用非分区列查询，性能反而会更差
    更多解决的是数据迁移和备份的问题，是方便管理数据的一种方式
    批量删除整个分区数据较快，因为实际执行过程是把分区文件删除和重建

=== SQL优化
- link:SQL.asc[参考:《SQL》]

=== 读写分离
- 分离之前

    优先考虑缓存等其它方案
    除了缓存, 还有哪些解决读的？搜索引擎
    实际上很多公司都不使用读写分离方案

- 问题与难点

    数据复制的延迟问题(导致没有读到更新后的数据)
    应用对于数据源的选择

- 读写分离

    maxscale? (官方推荐使用Lsyncd或者Corosync-Pacemaker做Maxscale的HA)
    https://www.modb.pro/db/66316

- 主从存在延迟如何解决？

    ▪ 方案1: 强制走主库(用的最多)
        区分哪些请求能够容忍，不能容忍就走主库

    ▪ 方案2: Sleep(不靠谱)

    ▪ 方案3: 判断主备无延迟
        方法一: 判断seconds_behind_master==0(秒为单位, 不够精确)
        方法二: 判断位点：Master_Log_File, Read_Master_Log_Pos, Relay_Master_Log_File, Exec_Master_Log_Pos
        方法三: 判断GTID集合, AUTO_Position=1, Retrieved_Gtid_Set==Executed_Gtid_Set
        精确度已经提高不少，但仍没达到最精确。比如主库已经执行完成，但从库还没收到binlog。

    ▪ 方案3+: 配合semi-sync
        问题一: 一主多从的时候，某些从库依然存在问题；一主一丛没问题
        问题二: 业务更新高峰期，主库的位点或者GTID集合更新很快，判断可能一直不成立，导致从库迟迟无法响应

    ▪ 方案4: 等主库位点
        select master_pos_wait(file, pos[, timeout])
        如果超时，去主库查询

    ▪ 方案5: 等GTID
        select wait_for_execute_gtid_set(gtid_set, 1)
        如果超时，去主库查询

=== 分库分表
==== 方案
- 基于MySQL的方案

    ▪ MySQL分库分表
    ▪ MySQL Cluster(生产环境下实际很少使用)
    ▪ MySQL + Vitess
    ▪ MySQL + MyCAT
    ▪ https://github.com/apache/shardingsphere
    ▪ https://github.com/actiontech/dble
    ▪ TDSQL for MySQL: https://cloud.tencent.com/product/dcdb

- 兼容MySQL的方案

    ▪ 例如TiDB, Aurora

- 其他不兼容MySQL的分布式数据库

==== 方式
- 分库与分表:

    并发量大优先考虑分库
    数据量大优先考虑分表
    有些情况下会同时进行

    分库分为水平分库与垂直分库
    分表分为水平分表与垂直分表
    有业务归属/冷热数据/只读非只读数据的区分，可以考虑垂直切分(以及服务化)

- 路由方式:

    ▪ Hash:
        复杂性:
            体现在库、表数量的选取
        优点:
            分布比较均匀
        缺点:
            扩容比较麻烦
    ▪ 范围:
        复杂性:
            体现在分段大小的选取
        优点:
            方便扩容
        缺点:
            实际可能分布不均匀
    ▪ 配置:
        复杂性:
            体现在多了一套配置数据
        优点:
            灵活
            扩容也相对简单
        缺点:
            配置数据不能太大

- 哈希方式案例

    一次性分好
    库: 64个，表32个 一共2048个表
    假定每个库正常承载的写入并发量是1500，则可以承载96000的写并发
    假定每个表放500万数据，则可以存放100亿条数据
    扩缩容:
        初期为逻辑库，可以在一个实例上;
        之后新建实例，DBA实例间迁移，然后修改配置调整迁移的库所在数据库服务器的地址

- 配置方式案例

- 范围方式案例

==== 问题
- 非Sharding Key查询

    非shardingkey里带有某些主键信息
    索引表

- 跨库关联查询

    字段冗余: 把需要关联的字段放入主表中，避免join操作
    数据抽象: 通过ETL(Extract-Transform-Load)等将数据汇合聚集，生成新的表
    应用层组装: 将基础数据查出来，通过应用程序计算组装
    全局表: 比如一些基础表可以在每个数据库中都放一份

- 排序、分页、函数计算

    在每个分片上执行相应的函数，然后将各个分片的结果集进行汇总和再次计算

- 分布式ID

- 分布式事务

- 多数据源

- 扩容缩容

=== 参考
https://dev.mysql.com/doc/refman/8.0/en/optimization.html
