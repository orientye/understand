= MYSQL-convention
:hardbreaks-option:
:revnumber: 0.0.1
:author: orient
:toc:
:homepage: http://orientye.com

<<<

== key

- 【建议】: db名:表名:id
    
    例如: ugc:video:1

- 【建议】: 控制key的长度

    例如: user:{uid}:friends:messages:{mid}简化为u:{uid}:fr:m:{mid}

- 【推荐】: 控制key的生命周期

    建议使用expire设置过期时间(条件允许可以打散过期时间，防止集中过期)，不过期的数据重点关注idletime

== value

- 【强制】: 避免大key

    string 类型控制在 10KB 以内，hash、list、set、zset 元素个数不要超过 5000。
    反例: 一个包含 200 万个元素的 list。
    非字符串的 bigkey，不要使用 del 删除，使用 hscan、sscan、zscan 方式渐进式删除，同时要注意防止 bigkey 过期时间自动删除问题(例如一个 200 万的 zset 设置 1 小时过期，会触发 del 操作，造成阻塞，而且该操作不会不出现在慢查询中(latency 可查))，查找方法和删除方法

- 【推荐】: 选择适合的数据类型

    例如: 实体类型(要合理控制和使用数据结构内存编码优化配置,例如 ziplist，但也要注意节省内存和性能之间的平衡)
    反例: 
    set user:1:name tom
    set user:1:age 19
    set user:1:favor football
    正例:
    hmset user:1 name tom age 19 favor football

== 命令使用
- 【推荐】 O(N)命令关注N的数量

    例如 hgetall、lrange、smembers、zrange、sinter 等并非不能使用，但是需要明确N的值。有遍历的需求可以使用hscan、sscan、zscan代替。

- 【推荐】 禁用命令

    禁止线上使用 keys、flushall、flushdb 等，通过 redis 的 rename 机制禁掉命令，或者使用 scan 的方式渐进式处理。

- 【推荐】合理使用select

    redis 的多数据库较弱，使用数字进行区分，很多客户端支持较差，同时多业务用多数据库实际还是单线程处理，会有干扰。

- 【推荐】使用批量操作提高效率

    原生命令: 例如mget、mset。
    非原生命令: 可以使用pipeline提高效率。
    但要注意控制一次批量操作的元素个数(例如 500 以内，实际也和元素字节数有关)。

    注意两者不同: 
    原生是原子操作，pipeline是非原子操作。
    pipeline可以打包不同的命令，原生做不到
    pipeline需要客户端和服务端同时支持

- 【建议】Redis 事务功能较弱，不建议过多使用

    Redis 的事务功能较弱(不支持回滚)，而且集群版本(自研和官方)要求一次事务操作的 key 必须在一个 slot 上(可以使用 hashtag 功能解决)

- 【建议】Redis 集群版本在使用 Lua 上有特殊要求:

    1.所有 key 都应该由 KEYS 数组来传递，redis.call/pcall 里面调用的 redis 命令，key 的位置，必须是 KEYS array, 否则直接返回 error，"-ERR bad lua script for redis cluster, all the keys that the script uses should be passed using the KEYS array"
    2.所有 key，必须在 1 个 slot 上，否则直接返回 error, “-ERR eval/evalsha command keys must in same slot”

- 【建议】必要情况下使用monitor命令时，要注意不要长时间使用。

== 客户端使用
- 【推荐】避免多个应用使用一个Redis实例
    
    正例: 不相干的业务拆分，公共数据做服务化。

- 【推荐】使用带有连接池的数据库，可以有效控制连接，同时提高效率

- 【建议】高并发下建议客户端添加熔断功能(例如 netflix hystrix)

- 【推荐】设置合理的密码，如有必要可以使用 SSL 加密访问（阿里云 Redis 支持）

- 【建议】根据自身业务类型，选好 maxmemory-policy(最大内存淘汰策略)，设置好过期时间。

    默认策略是 volatile-lru，即超过最大内存后，在过期键中使用lru算法进行ke 的剔除，保证不过期数据不被删除，但是可能会出现OOM问题。
    其他策略如下: 
    allkeys-lru: 根据 LRU 算法删除键，不管数据有没有设置超时属性，直到腾出足够空间为止。
    allkeys-random: 随机删除所有键，直到腾出足够空间为止。
    volatile-random:随机删除过期键，直到腾出足够空间为止。
    volatile-ttl: 根据键值对象的 ttl 属性，删除最近将要过期数据。如果没有，回退到 noeviction 策略。
    noeviction: 不会剔除任何数据，拒绝所有写入操作并返回客户端错误信息"(error) OOM command not allowed when used memory"，此时 Redis 只响应读操作。

== 相关工具
- 【推荐】: redis间数据同步可以使用: redis-port

- 【推荐】: big key搜索 redis大key搜索工具

- 【推荐】: 热点key寻找(内部实现使用monitor，所以建议短时间使用) facebook的redis-faina

== 参考
- https://github.com/ITcathyh/redis-best-practice
- https://www.infoq.cn/article/K7dB5AFKI9mr5Ugbs_px