= redis-convention
:hardbreaks-option:
:toc:
:revnumber: 0.0.2
:revdate: 2020年10月25日
:author: orient
:homepage: http://orientye.com

<<<

== 说明
本文对《阿里云Redis开发规范》作了一些补充和最新说明。

== 键与值

- 【建议】db名:表名:id

    例如: ugc:video:1

- 【建议】控制key的长度

    例如: user:{uid}:friends:messages:{mid} 简化为 u:{uid}:fr:m:{mid}

- 【推荐】控制key的生命周期

    建议使用expire设置过期时间(条件允许可以打散过期时间, 防止集中过期), 不过期的数据重点关注idletime

- 【强制】避免大key

    string类型控制在10KB以内, hash、list、set、zset元素个数不要超过5000。
    反例: 一个包含200万个元素的list。
    非字符串的bigkey, 不要使用del删除, 使用hscan、sscan、zscan方式渐进式删除, 防止bigkey过期时间自动删除问题
    例如一个200万的zset设置1小时过期, 会触发del操作, 造成阻塞, 而且该操作不会出现在慢查询中(latency可查)

- 【推荐】选择适合的数据类型

    例如: 实体类型(要合理控制和使用数据结构内存编码优化配置, 例如ziplist, 但也要注意节省内存和性能之间的平衡)
    反例: 
    set user:1:name tom
    set user:1:age 19
    set user:1:favor football
    正例:
    hmset user:1 name tom age 19 favor football

== 命令
- 【推荐】O(N)命令关注N的数量

    例如hgetall、lrange、smembers、zrange、sinter这些命令都是全集操作, 如果元素很多, 很耗性能, 因此需要明确N的值。
    有遍历的需求可以使用hscan、sscan、zscan代替。

- 【推荐】禁用命令

    禁止线上使用keys、flushall、flushdb等, 通过redis的rename机制禁掉命令, 或者使用scan的方式渐进式处理。

- 【推荐】合理使用select

    redis的多数据库较弱, 使用数字进行区分, 很多客户端支持较差, 同时多业务用多数据库实际还是单线程处理, 会有干扰。

- 【推荐】使用批量操作提高效率

    原生命令: 例如mget、mset。
    非原生命令: 可以使用pipeline提高效率。
    但要注意控制一次批量操作的元素个数(例如500以内, 实际也和元素字节数有关)。

    注意两者不同: 
    mget和mset是原子操作, pipeline是非原子操作。
    pipeline可以打包不同的命令, mget和mset做不到。
    pipeline需要客户端和服务端同时支持。

- 【建议】Redis事务功能较弱, 不建议过多使用

    Redis的事务功能较弱(不支持回滚), 而且集群版本(自研和官方)要求一次事务操作的key必须在一个slot上(可以使用hashtag功能解决)

- 【建议】Redis集群版本在使用Lua上有特殊要求

    1.所有key都应该由KEYS数组来传递, redis.call/pcall里面调用的redis命令, key的位置, 必须是KEYS array, 否则直接返回error:
        "-ERR bad lua script for redis cluster, all the keys that the script uses should be passed using the KEYS array"
    2.所有key, 必须在1个slot上, 否则直接返回error:"-ERR eval/evalsha command keys must in same slot"

- 【建议】必要情况下使用monitor命令时, 要注意不要长时间使用。

- 【推荐】严禁不设置范围的批量操作

    redis慢查询除了网络延迟，就属于这些批量操作函数。大多数线上问题都是由于这些函数引起。
    [zset] 严禁对zset的不设范围操作
    ZRANGE ZRANGEBYSCORE等多个操作ZSET的函数，严禁使用ZRANGE myzset 0 -1等这种不设置范围的操作。
    请指定范围，如ZRANGE myzset 0 100。如不确定长度，可使用ZCARD判断长度
    [hash] 严禁对大数据量Key使用HGETALL
    HGETALL会取出相关HASH的所有数据，如果数据条数过大，同样会引起阻塞，请确保业务可控。如不确定长度，可使用HLEN先判断长度
    [key] Redis Cluster集群的mget操作，会到各分片取数据聚合，相比传统的M/S架构，性能会下降很多，请提前压测和评估
    [其他] 严禁使用sunion, sinter, sdiff等一些聚合操作

== 客户端
- 【推荐】避免多个应用使用一个redis实例

    正例: 不相干的业务拆分, 公共数据做服务化。

- 【推荐】使用带有连接池的数据库, 可以有效控制连接, 同时提高效率

- 【建议】高并发下建议客户端添加熔断功能(例如netflix hystrix)

- 【推荐】设置合理的密码, 如有必要可以使用SSL加密访问(阿里云Redis支持)

- 【建议】根据自身业务类型, 选好maxmemory-policy(最大内存淘汰策略), 设置好过期时间。

    默认策略是volatile-lru, 即超过最大内存后, 在过期键中使用lru算法进行key的剔除, 保证不过期数据不被删除, 但是可能会出现OOM问题。
    其它策略如下: 
    allkeys-lru: 根据LRU算法删除键, 不管数据有没有设置超时属性, 直到腾出足够空间为止。
    allkeys-random: 随机删除所有键, 直到腾出足够空间为止。
    volatile-random: 随机删除过期键, 直到腾出足够空间为止。
    volatile-ttl: 根据键值对象的ttl属性, 删除最近将要过期数据。如果没有, 回退到noeviction策略。
    noeviction: 不会剔除任何数据, 拒绝所有写入操作并返回"(error) OOM command not allowed when used memory", 此时Redis只响应读操作。

== 工具
- 【推荐】使用Redis 4.0以上的版本: –-bigkeys, memory命令和dbtools工具分析统计实例存在的大key

- 【推荐】使用Redis 4.0以上, 大key问题主动删除无条件使用UNLINK异步，被动删除时配置lazyfree惰性删除

- 【推荐】redis间数据同步可以使用: redis-port

- 【推荐】big key搜索redis大key搜索工具: https://developer.aliyun.com/article/117042

- 【推荐】热点key寻找: https://github.com/facebookarchive/redis-faina

    (内部实现使用monitor, 因此建议短时间使用)

== 参考
- https://www.infoq.cn/article/K7dB5AFKI9mr5Ugbs_px
- https://help.aliyun.com/document_detail/26365.html