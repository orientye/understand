:toc:
:toclevels: 5
:hardbreaks-option:

== 概览
https://github.com/facebook/rocksdb/wiki/RocksDB-Overview
https://github.com/facebook/rocksdb/wiki/RocksDB-FAQ
https://www.zhihu.com/question/533045476
https://xie.infoq.cn/article/462cb16f70d9a0eba30c0ef89

- vs. LevelDB
https://github.com/facebook/rocksdb/wiki/Features-Not-in-LevelDB

- LSM(Log-Structured Merge-Trees) vs B+

    https://tikv.org/docs/deep-dive/key-value-engine/b-tree-vs-lsm/
    Through comparing various kinds of amplification between B+ tree and Level-based LSM-tree, we can come to a conclusion that Level-based LSM-tree has a better write performance than B+ tree while its read performance is not as good as B+ tree. The main purpose for TiKV to use LSM-tree instead of B-tree as its underlying storage engine is because using cache technology to promote read performance is much easier than promote write performance.

=== 结构
- MemTable：内存数据结构，具体实现是 SkipList。 接受用户的读写请求，新的数据修改会首先在这里写入。

- Immutable MemTable：当 MemTable 的大小达到设定的阈值时，会变成 Immutable MemTable，只接受读操作，不再接受写操作，后续由后台线程 Flush 到磁盘上。

- SST Files：Sorted String Table Files，磁盘数据存储文件。分为 Level0 到 LevelN 多层，每一层包含多个 SST 文件，文件内数据有序。Level0 直接由 Immutable Memtable Flush 得到，其它每一层的数据由上一层进行 Compaction 得到。

- Manifest Files：Manifest 文件中记录 SST 文件在不同 Level 的分布，单个 SST 文件的最大、最小 key，以及其他一些 LevelDB 需要的元信息。由于 LevelDB 支持 snapshot，需要维护多版本，因此可能同时存在多个 Manifest 文件。

- Current File：由于 Manifest 文件可能存在多个，Current 记录的是当前的 Manifest 文件名。

- Log Files (WAL)：用于防止 MemTable 丢数据的日志文件。

    Q: LevelDB会丢失数据吗？

=== 参考
https://rocksdb.org/docs/
https://github.com/facebook/rocksdb/wiki
https://github.com/facebook/rocksdb/
