:toc:
:toclevels: 5
:hardbreaks-option:

== 数据类型

=== 对象
[source, c]
.https://github.com/redis/redis/blob/unstable/src/server.h
----
#define LRU_BITS 24
//...
struct redisObject {
    unsigned type:4;
    unsigned encoding:4;
    unsigned lru:LRU_BITS; /* LRU time (relative to global lru_clock) or
                            * LFU data (least significant 8 bits frequency
                            * and most significant 16 bits access time). */
    int refcount;
    void *ptr;
};
----

不同的对象具有不同的类型type(4bit)
同一个类型的type会有不同的存储形式encoding(4bit)
24个bit记录LRU/LFU信息
每个对象都有个引用计数，当引用计数为零时，对象会被销毁，内存得以回收
ptr指针指向对象内容的具体存储位置
一个redisObject对象头占据16字节(64位系统)

==== 类型
redis有5种实际的对象类型，分别为：string(字符串)、list(列表)、set(集合)、zset(有序集合)与hash(哈希)。

[source, c]
.https://github.com/redis/redis/blob/unstable/src/server.h
----
/* The actual Redis Object */
#define OBJ_STRING 0    /* String object. */
#define OBJ_LIST 1      /* List object. */
#define OBJ_SET 2       /* Set object. */
#define OBJ_ZSET 3      /* Sorted set object. */
#define OBJ_HASH 4      /* Hash object. */

/* The "module" object type is a special one that signals that the object
 * is one directly managed by a Redis module. In this case the value points
 * to a moduleValue struct, which contains the object value (which is only
 * handled by the module itself) and the RedisModuleType struct which lists
 * function pointers in order to serialize, deserialize, AOF-rewrite and
 * free the object.
 *
 * Inside the RDB file, module types are encoded as OBJ_MODULE followed
 * by a 64 bit module type ID, which has a 54 bits module-specific signature
 * in order to dispatch the loading to the right module, plus a 10 bits
 * encoding version. */
#define OBJ_MODULE 5    /* Module object. */
#define OBJ_STREAM 6    /* Stream object. */
#define OBJ_TYPE_MAX 7  /* Maximum number of object types */
----

==== 编码
[source, c]
.https://github.com/redis/redis/blob/unstable/src/server.h
----
/* Objects encoding. Some kind of objects like Strings and Hashes can be
 * internally represented in multiple ways. The 'encoding' field of the object
 * is set to one of this fields for this object. */
#define OBJ_ENCODING_RAW 0     /* Raw representation */
#define OBJ_ENCODING_INT 1     /* Encoded as integer */
#define OBJ_ENCODING_HT 2      /* Encoded as hash table */
#define OBJ_ENCODING_ZIPMAP 3  /* No longer used: old hash encoding. */
#define OBJ_ENCODING_LINKEDLIST 4 /* No longer used: old list encoding. */
#define OBJ_ENCODING_ZIPLIST 5 /* No longer used: old list/hash/zset encoding. */
#define OBJ_ENCODING_INTSET 6  /* Encoded as intset */
#define OBJ_ENCODING_SKIPLIST 7  /* Encoded as skiplist */
#define OBJ_ENCODING_EMBSTR 8  /* Embedded sds string encoding */
#define OBJ_ENCODING_QUICKLIST 9 /* Encoded as linked list of listpacks */
#define OBJ_ENCODING_STREAM 10 /* Encoded as a radix tree of listpacks */
#define OBJ_ENCODING_LISTPACK 11 /* Encoded as a listpack */
----

==== 字符串对象
编码:

    int
    emstr(<=32字节)
    raw

命令:
https://redis.io/commands/?group=string

实现:
https://github.com/redis/redis/blob/unstable/src/t_string.c

参考:
https://redis.io/docs/data-types/strings/

==== 列表对象
编码:

    #define OBJ_ENCODING_QUICKLIST 9 /* Encoded as linked list of ziplists */

命令:
https://redis.io/commands/?group=list

实现:
https://github.com/redis/redis/blob/unstable/src/t_list.c

参考:
https://redis.io/docs/data-types/lists/

==== 集合对象
编码:

    intset
        需同时满足:
            所有元素都是整数值
            元素数量<=512
    ht

命令:
https://redis.io/commands/?group=list

实现:
https://github.com/redis/redis/blob/unstable/src/t_set.c

参考:
https://redis.io/docs/data-types/sets/

==== 有序集合对象
编码:

    ziplist
        需同时满足:
            元素长度都<64
            元素数量<128
    skiplist

命令:
https://redis.io/commands/?group=sorted-set

实现:
https://github.com/redis/redis/blob/unstable/src/t_zset.c

参考:
https://redis.io/docs/data-types/sorted-sets/

==== 哈希对象
编码:

    ziplist
        需同时满足:
            字符串元素长度都<=64
            元素数量<=512
    dict

命令:
https://redis.io/commands/?group=hash

实现:
https://github.com/redis/redis/blob/unstable/src/t_hash.c

参考:
https://redis.io/docs/data-types/hashes/

==== 命令
TYPE
OBJECT ENCODING
OBJECT REFCOUNT
OBJECT IDLETIME

=== JSON
Redis Stack提供
https://redis.io/docs/data-types/json/

=== streams
A Redis stream is a data structure that acts like an append-only log but also implements several operations to overcome some of the limits of a typical append-only log. These include random access in O(1) time and complex consumption strategies, such as consumer groups. You can use streams to record and simultaneously syndicate events in real time.

命令:
https://redis.io/commands/?group=stream

实现:
https://github.com/redis/redis/blob/unstable/src/t_stream.c

参考:
https://redis.io/docs/data-types/streams/

=== geospatial
命令:
https://redis.io/commands/?group=geo

实现:
https://github.com/redis/redis/blob/unstable/src/geohash.h
https://github.com/redis/redis/blob/unstable/src/geohash.c

参考:
https://redis.io/docs/data-types/geospatial/

=== bitmaps
命令:
https://redis.io/commands/?group=bitmap

参考:
https://redis.io/docs/data-types/bitmaps/

=== bitfields
命令:
https://redis.io/commands/bitfield/

参考:
https://redis.io/docs/data-types/bitfields/

=== probabilistic
==== hyperloglogs
命令:
https://redis.io/commands/?group=hyperloglog
PF: Philippe Flajolet, https://en.wikipedia.org/wiki/Philippe_Flajolet

实现:
https://github.com/redis/redis/blob/unstable/src/hyperloglog.c

参考:
https://redis.io/docs/data-types/probabilistic/hyperloglogs/

==== bloom filter
Redis Stack提供
https://redis.io/docs/data-types/probabilistic/bloom-filter/

==== cuckoo filter
Redis Stack提供
https://redis.io/docs/data-types/probabilistic/cuckoo-filter/

==== t-digest
Redis Stack提供
https://redis.io/docs/data-types/probabilistic/t-digest/

==== top-k
Redis Stack提供
https://redis.io/docs/data-types/probabilistic/top-k/

==== count-min sketch
Redis Stack提供
https://redis.io/docs/data-types/probabilistic/count-min-sketch/

==== 参考
https://redis.io/docs/data-types/probabilistic/

=== timeseries
Redis Stack提供
https://redis.io/docs/data-types/timeseries/

=== 参考
https://redis.io/docs/data-types/