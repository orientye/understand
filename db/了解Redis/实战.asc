:toc:
:toclevels: 5
:hardbreaks-option:

== 实战

=== 缓存与DB
- 读流程:

    hit: 返回数据
    否则miss: 从DB中读取, 然后放入缓存

- 写流程: 

    更新缓存:
        特点: 数据库和缓存都要写入
        优点: 不会增加一次miss, 效率可能会高一些
        缺点: 从一致性的角度, 有时候淘汰缓存可能会更好些

    淘汰缓存:
        特点: 只会写入数据库
        优点: 简单些
        缺点: 会增加一次miss

    操作顺序:
    先操作数据库，还是先操作缓存?  
    
    需要集合具体的场景综合考虑一致性及性能问题, 具体参考下面的一致性问题

- 一致性问题

    ▪ 什么是一致
    cache里有数据: cache和db里的数据是相同的
    cache里无数据: db里是最新的

    ▪ 有两种情况需要考虑:
    读写并发
    Cache/DB其中一个更新失败

    模式:
    ▪ Cache Aside Pattern
        先更新数据库，成功后让缓存失效
        依然存在问题，只是降低了概率
    ▪ Read/Write Through Pattern
        可以理解为，应用认为后端就是一个单一的存储，而存储自己维护自己的Cache
        也就是读写都落到一个DB节点上
        单一的存储保证一致性
    ▪ Write Behind Caching Pattern
        只更新缓存，不更新数据库，缓存会异步地批量更新数据库
        优点: 性能
        缺点: 数据不是强一致性的，而且可能会丢失
    ▪ 分布式事务或强一致性
        效率太低

    可选方案:
    方案1:
    修改服务Service连接池，id取模选取服务连接，能够保证同一个数据的读写都落在同一个后端服务上
    修改数据库DB连接池，id取模选取DB连接，能够保证同一个数据的读写在数据库层面是串行的
    这个类似Read/Write Through Pattern的思想

参考: https://m.w3cschool.cn/architectroad/architectroad-cache-architecture-design.html
参考: https://m.w3cschool.cn/architectroad/architectroad-consistency-of-cache-with-database.html
参考: https://xie.infoq.cn/article/47241d099404a1565e168fad4
参考: https://coolshell.cn/articles/17416.html
参考: https://www.zhihu.com/question/319817091

=== 缓存穿透
- 缓存和数据库中都没有的数据，而用户不断发起请求，这时的用户很可能是攻击者，攻击会导致数据库压力过大

- 接口层增加校验, 如用户鉴权校验

- 将key-value对写为key-null，缓存有效时间可以设置短点，如30秒(设置太长会导致正常情况也没法使用)

=== 缓存击穿
- 缓存击穿是指缓存中没有但数据库中有的数据(一般是缓存时间到期)，这时由于并发用户特别多，同时读缓存没读到数据，又同时去数据库去取数据，引起数据库压力瞬间增大，造成过大压力

- 击穿与雪崩的区别即在于击穿是对于特定的热点数据来说，而雪崩是全部数据。

- 二级缓存：对于热点数据进行二级缓存，并对于不同级别的缓存设定不同的失效时间，则请求不会直接击穿缓存层到达数据库

- 热点数据永不过期

=== 缓存雪崩
- 当缓存服务器重启或者大量缓存集中在某一个时间段失效，会给后端系统(比如DB)带来很大压力，造成数据库后端故障，从而引起应用服务器雪崩

- 交错失效时间

- 提高HA

- 控制请求，重建缓存

- 熔断 隔离 限流

=== 慢查询日志
- SLOWLOG GET
- CONFIG SET slow-log-slower-than 0  (u seconds)
- CONFIG SET slowlog-max-len 5

=== 大key问题
参考: https://www.modb.pro/db/103715
参考: https://mp.weixin.qq.com/s?__biz=Mzg2NTEyNzE0OA==&mid=2247483677&idx=1&sn=5c320b46f0e06ce9369a29909d62b401&chksm=ce5f9e9ef928178834021b6f9b939550ac400abae5c31e1933bafca2f16b23d028cc51813aec&scene=21#wechat_redirect
参考: https://www.getui.com/college/2019100911

=== SQL

==== 查询
https://redis.io/docs/stack/search/reference/query_syntax/

条件查询与索引:
zadd, zRangeByScore/zRangeByLex等
https://segmentfault.com/q/1010000000613127