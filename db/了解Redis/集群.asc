:toc:
:toclevels: 5
:hardbreaks-option:

== 集群

=== cluster

==== 简介
多主多从的方式:
多个主节点，每个主节点上可以挂载多个从节点。

数据分片:
将数据分散到多个主节点上，而每个主节点都可以对外提供读写服务。

节点:
Redis Cluster是一个去中心化的集群，每个节点都会与其他节点保持互连，使用gossip协议来交换彼此的信息，以及探测新加入的节点信息。并且Redis Cluster无需任何代理，客户端会直接与集群中的节点直连。

==== 分片
Redis Cluster将所有数据划分为16384的slots，比Codis的1024个槽划分的更为精细，每个节点负责其中一部分槽位。
槽位的信息存储于每个节点中，而不是像Codis那样需要额外的分布式存储来存储节点槽位信息。
当客户端来连接集群时，客户端会得到一份集群的槽位配置信息。这样当客户端要查找某个key时，可以直接定位到目标节点。这点也不同于Codis，Codis需要通过Proxy来定位目标节点， Redis Cluster则是直接定位。客户端为了可以直接定位某个具体的key所在的节点，需要缓存槽位相关信息。同时槽位的信息可能会存在客户端与服务器不一致的情况，因此需要纠正机制来实现槽位信息的校验调整。

==== 扩容缩容

==== 实践
https://developer.aliyun.com/article/136152

==== 参考
https://redis.io/topics/cluster-tutorial
https://redis.io/docs/management/scaling/
https://redis.io/topics/cluster-spec

=== codis
- 简介
https://github.com/CodisLabs/codis/blob/master/doc/FAQ_zh.md
https://github.com/CodisLabs/codis/blob/master/doc/tutorial_zh.md
https://github.com/CodisLabs/codis/blob/master/doc/unsupported_cmds.md

- 优点

    开发简单，对应用几乎透明
    性能比Twemproxy好
    图形化界面，容易扩缩容，运维方便

- 缺点

    代理依旧影响性能
    组件过多，需要很多机器资源
    修改了redis代码，和官方同步困难，新特性跟进缓慢

- 特点
动态扩容/缩容，增减redis实例对client完全透明、不需要重启服务，不需要业务方担心Redis内存爆掉的问题；也不用担心申请太大, 造成浪费；业务方也不需要自己维护Redis.
扩容可以直接界面的"Auto Rebalance"按钮，缩容只需要将要下线的实例拥有的slot迁移到其它实例，然后在界面上删除下线的group即可。

- 架构
codis proxy: 接收客户端请求，把请求转发给codis server
codis server: 二次开发的redis实例，具有额外的数据结构，支持数据迁移操作
zookeeper: 集群元数据（数据位置信息和codis proxy信息）
codis dashboard与codis fe: 集群管理工具
    codis dashboard: 增删codis server、codis proxy和进行数据迁移
    codis fe: 提供dashboard的web操作界面

- 分片
采用pre-sharding的技术来实现数据的分片, 默认分成1024个slots(0-1023), 对于每个key来说, 通过以下公式确定所属的slot id: slot_id = crc32(key) % 1024。
每一个slot都会有一个且必须有一个特定的server group id来表示这个slot的数据由哪个server group来提供。数据的迁移也是以slot为单位的。

- 数据迁移
在源server上，从要迁移的slot中随机选择一个数据，发送给目的server;
源server接收到目标ack后，删除本地数据；
不断重复上面的迁移过程，直到要迁移的slot中的数据全部迁移完成。
注意事项:
在auto rebalance中不影响redis集群的性能，系统同时只会对几个slot进行迁移，尽量不影响其它slot的读写。
数据迁移的粒度优化到 key，针对单个key进行迁移，大key若能拆分成小Key分批次异步迁移、并在迁移过程中该Key可读、不可写，只要迁移速度够快，业务一般是可以接受的。

- 扩容缩容

- vs. redis cluster
https://github.com/CodisLabs/codis/blob/master/doc/FAQ_zh.md#%E7%9B%B8%E5%AF%B9%E4%BA%8Eredis-cluster%E7%9A%84%E4%BC%98%E5%8A%A3

- vs. twemproxy
最大的区别: codis支持动态水平扩展
https://github.com/CodisLabs/codis/blob/master/doc/FAQ_zh.md#%E7%9B%B8%E5%AF%B9%E4%BA%8Etwemproxy%E7%9A%84%E4%BC%98%E5%8A%A3

==== 参考
https://github.com/CodisLabs/codis/tree/master/doc
https://github.com/CodisLabs/codis
