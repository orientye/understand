:toc:
:toclevels: 5
:hardbreaks-option:

== 持久化

=== 方式
- RDB (Redis Database)
RDB persistence performs point-in-time snapshots of your dataset at specified intervals.
RDB是默认的持久化方式。

- AOF (Append Only File)
AOF persistence logs every write operation received by the server. These operations can then be replayed again at server startup, reconstructing the original dataset. Commands are logged using the same format as the Redis protocol itself.

- No persistence
disable persistence completely. This is sometimes used when caching.

- RDB + AOF
combine both AOF and RDB in the same instance.

=== RDB
==== 配置

    # 在900秒(15分钟)之后，如果至少有1个key发生变化，则dump内存快照
    save 900 1
    # 在300秒(5分钟)之后，如果至少有10个key发生变化，则dump内存快照
    save 300 10
    # 在60秒(1分钟)之后，如果至少有10000个key发生变化，则dump内存快照
    save 60 10000

==== 关闭
config set save ""
或者:
在配置里屏蔽掉save 900 1等，并打开save ""

可能还需要删除掉持久化的文件(否则重启仍然有数据)

==== SAVE
在主线程中执行，会导致阻塞
https://redis.io/commands/save/

==== BGSAVE
会创建一个子进程，专门用于写入RDB文件，避免了主线程的阻塞
是Redis RDB文件生成的默认配置
https://redis.io/commands/bgsave/

==== 注意事项
AOF文件的更新频率通常比RDB文件的更新频率高，如果开启了AOF，则优先使用AOF文件来还原数据库状态;
只有在AOF持久化功能处于关闭状态时，服务器才会使用RDB文件来还原数据库状态。

==== Q&A
Q: 快照期间可以写数据吗？
A: 可以。(但RDB文件未必能同步到最新？)

==== 实现
原理: fork, 写时复制

=== AOF

==== 配置

- appendfsync选项
appendfsync always: 每个写命令执行完将日志写回磁盘
appendfsync everysec: 每秒将日志写回磁盘
appendfsync no: 操作系统控制的写回，Normally Linux will flush data every 30 seconds with this configuration, but it's up to the kernel's exact tuning.

==== 关闭
配置: appendonly yes
或
命令: config set appendonly no

==== rewriting
https://redis.io/docs/management/persistence/#log-rewriting

==== 执行顺序
后写日志: 先执行命令，只有命令能执行成功，才会被记录到日志中

优点:

    1 避免出现记录错误命令的情况
        如果先记日志再执行命令，日志中就有可能记录了错误的命令，在使用日志恢复数据时就可能会出错。
    2 避免额外的检查开销
    3 不会阻塞当前的写操作

缺点:

    1 宕机时可能丢失数据
    2 虽然避免了对当前命令的阻塞，但可能会给下一个操作带来阻塞风险
        因为AOF日志也是在主线程中执行的，如果磁盘写压力大，就会导致写盘很慢，影响后续的操作

==== BGREWRITEAOF
https://redis.io/commands/bgrewriteaof/

=== 混合持久化
内存快照以一定的频率执行，在两次快照之间，使用AOF日志记录这期间的所有命令操作。

=== 工程实践
数据不能丢失时，内存快照和AOF的混合使用是一个比较好的选择;
如果允许稍长实践的数据(例如几分钟?)的丢失，可以只使用RDB;
如果仅AOF，优先使用everysec的配置选项(在可靠性和性能之间取了一个平衡)。

=== 参考
https://redis.io/docs/management/persistence/