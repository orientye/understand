:toc:
:toclevels: 5
:hardbreaks-option:

== 数据库

=== redisDb
[source, c]
.https://github.com/redis/redis/blob/unstable/src/server.h
----
/* Redis database representation. There are multiple databases identified
 * by integers from 0 (the default database) up to the max configured
 * database. The database number is the 'id' field in the structure. */
typedef struct redisDb {
    dict **dict;                /* The keyspace for this DB */
    dict **expires;             /* Timeout of keys with a timeout set */
    dict *blocking_keys;        /* Keys with clients waiting for data (BLPOP)*/
    dict *blocking_keys_unblock_on_nokey;   /* Keys with clients waiting for
                                             * data, and should be unblocked if key is deleted (XREADEDGROUP).
                                             * This is a subset of blocking_keys*/
    dict *ready_keys;           /* Blocked keys that received a PUSH */
    dict *watched_keys;         /* WATCHED keys for MULTI/EXEC CAS */
    int id;                     /* Database ID */
    long long avg_ttl;          /* Average TTL, just for stats */
    unsigned long expires_cursor; /* Cursor of the active expire cycle. */
    list *defrag_later;         /* List of key names to attempt to defrag one by one, gradually. */
    int dict_count;             /* Indicates total number of dictionaires owned by this DB, 1 dict per slot in cluster mode. */
    dbDictState sub_dict[2];  /* Metadata for main and expires dictionaries */
} redisDb;
----

dict *dict:

    key: obj_string
    val: obj***

dict *expires:

    key: void* 指向dict里的key
    val: long long, 毫秒精度

个数:

    int dbnum;  /* Total number of configured DBs */
    默认16个

select dbnum:
https://groups.google.com/g/redis-db/c/vS5wX8X4Cjg/m/8ounBXitG4sJ
I understand how this can be useful, but unfortunately I consider Redis multiple database errors my worst decision in Redis design at all... without any kind of real gain, it makes the internals a lot more complex. The reality is that databases don't scale well for a number of reason, like active expire of keys and VM. If the DB selection can be performed with a string I can see this feature being used as a scalable O(1) dictionary layer, that instead it is not.With DB numbers, with a default of a few DBs, we are communication better what this feature is and how can be used I think. I hope that at some point we can drop the multiple DBs support at all, but I think it is probably too late as there is a number of people relying on this feature for their work.
建议不要使用

=== 读写
读:
更新hit或miss次数(INFO stats查看)
更新LRU时间(OBJECT idletime查看)
如果发现过期，会先删除过期键，然后才执行余下的操作

写:
如果有客户端WATCH监视了某个键，则将这个键标记为脏
脏计数器加1，这个计数器会触发服务器的持久化及复制操作

lookupKey(): https://github.com/redis/redis/blob/unstable/src/db.c

=== 淘汰与过期
==== maxmemory_policy
[source, c]
.https://github.com/redis/redis/blob/unstable/src/config.c
----
configEnum maxmemory_policy_enum[] = {
    {"volatile-lru", MAXMEMORY_VOLATILE_LRU},
    {"volatile-lfu", MAXMEMORY_VOLATILE_LFU},
    {"volatile-random",MAXMEMORY_VOLATILE_RANDOM},
    {"volatile-ttl",MAXMEMORY_VOLATILE_TTL},
    {"allkeys-lru",MAXMEMORY_ALLKEYS_LRU},
    {"allkeys-lfu",MAXMEMORY_ALLKEYS_LFU},
    {"allkeys-random",MAXMEMORY_ALLKEYS_RANDOM},
    {"noeviction",MAXMEMORY_NO_EVICTION},
    {NULL, 0}
};
----
不进行数据淘汰的策略，只有 noeviction 这一种。
会进行淘汰的策略:
在设置了过期时间的数据中进行淘汰(4种): volatile-random、volatile-ttl、volatile-lru、volatile-lfu。
在所有数据范围内进行淘汰(3种): allkeys-lru、allkeys-random、allkeys-lfu。

默认: MAXMEMORY_NO_EVICTION
LFU: since V4.0
Q: Approximated LRU algorithm, why?
A: 如果按照HashMap和双向链表实现，需要额外的存储存放next和prev指针，牺牲较大的存储空间，因此redis采用了一个近似的做法: 随机取出若干个key，然后按照访问时间排序后，淘汰掉最不经常使用的。
参考: https://zhuanlan.zhihu.com/p/34133067

==== 过期键
过期是以对象为单位，例如一个hash对象的过期是整个hash对象的过期，而不是其中的某个子key。
如果一个字符串已经设置了过期时间，之后又调用set方法进行了修改，则该字符串的过期时间会消失。

==== 设置键的生存时间或过期时间
EXPIRE 秒(之后)
PEXPIRE 毫秒
EXPIREAT
PEXPIREAT
实际上都是PEXPIREAT

PERSIST

TTL 返回还有多长时间
PTTL

如果没有设置时间，那缓存就是永不过期

==== 过期键的删除
1、定时删除：通过维护一个定时器，过期马上删除，是最有效的，内存友好，cpu不友好。
2、惰性删除：程序在取出键时才判断它是否过期，过期才删除，cpu友好，内存不友好。
3、定期删除：每隔一定时间执行一次删除过期键的操作，并限制每次删除操作的执行时长和频率，是一种折中方案。

redis采用了惰性删除和定期删除的策略。

惰性删除:
expireIfNeeded(): https://github.com/redis/redis/blob/unstable/src/db.c

定期删除:
activeExpireCycle(): https://github.com/redis/redis/blob/unstable/src/expire.c

==== 过期事件
https://redis.io/docs/manual/keyspace-notifications/#configuration

==== 持久化与复制对过期键的处理
RDB

    生成:
        SAVE/BGSAVE生成RDB时，过期键不会被保存到新创建的RDB中
    载入:
        如果服务器以主服务器模式运行，过期键不会被载入到数据库
        如果服务器以从服务器模式运行，过期键会被载入到数据库

AOF

    写入:
        过期不会影响AOF文件写入
        删除过期键时会追加DEL命令到AOF文件
    重写:
        过期键不会被保存到重写后的AOF文件中

复制

    主服务器删除一个过期键后会向所有从服务器发送DEL命令
    从服务器执行客户端命令时，遇到过期键也不会将过期键删除，而是像处理未过期的键一样来处理
    从服务器只有在接到主服务器的DEL命令之后才会删除过期键

==== 从库的过期策略
从库不会进行过期扫描，从库对过期的处理是被动的。主库在key到期时，会在AOF文件里增加一条del指令，同步到所有的从库，从库通过执行这条del指令来删除过期的key。
因为指令同步是异步进行的，所以主库过期的key的del指令没有及时同步到从库的话，会出现主从数据的不一致，主库没有的数据在从库里还存在。

==== 工程实践
- 优先使用allkeys-lru策略: 比较适合数据有明显的冷热区分的业务。

- 如果业务中有置顶的需求，例如置顶新闻，可以考虑使用volatile-lru策略，同时不要给这些置顶数据设置过期时间。这样，需要置顶的数据一直不会被删除，其它数据则会在过期时根据LRU规则进行筛选。

- 如果没有明显的冷热数据区分，可以使用allkeys-random策略，随机选择淘汰的数据。

- 如果数据量比较小，可以使用noeviction策略。

==== 参考
https://redis.io/docs/reference/eviction/

=== 数据库通知
==== 概念
key-space notification: 关注某个键被执行了哪些命令
Key-event notification: 关注某个命令被什么键执行了

例如:

    PUBLISH __keyspace@0__:mykey del
    PUBLISH __keyevent@0__:del mykey

==== 配置
https://redis.io/docs/manual/keyspace-notifications/#configuration

==== 特别注意事项
===== 可能会丢失
Note: Redis Pub/Sub is fire and forget that is, if your Pub/Sub client disconnects, and reconnects later, all the events delivered during the time the client was disconnected are lost.

===== 过期事件
注意: Basically expired events are generated when the Redis server deletes the key and not when the time to live theoretically reaches the value of zero.
https://redis.io/docs/manual/keyspace-notifications/#timing-of-expired-events

===== 集群与事件
https://redis.io/docs/manual/keyspace-notifications/#events-in-a-cluster

==== 实现
https://github.com/redis/redis/blob/unstable/src/notify.c

==== 参考
https://redis.io/docs/manual/keyspace-notifications/