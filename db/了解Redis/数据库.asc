:toc:
:toclevels: 5
:hardbreaks-option:

== 数据库

=== redisDb
[source, c]
.https://github.com/redis/redis/blob/unstable/src/server.h
----
/* Redis database representation. There are multiple databases identified
 * by integers from 0 (the default database) up to the max configured
 * database. The database number is the 'id' field in the structure. */
typedef struct redisDb {
    dict *dict;                 /* The keyspace for this DB */
    dict *expires;              /* Timeout of keys with a timeout set */
    dict *blocking_keys;        /* Keys with clients waiting for data (BLPOP)*/
    dict *blocking_keys_unblock_on_nokey;   /* Keys with clients waiting for
                                             * data, and should be unblocked if key is deleted (XREADEDGROUP).
                                             * This is a subset of blocking_keys*/
    dict *ready_keys;           /* Blocked keys that received a PUSH */
    dict *watched_keys;         /* WATCHED keys for MULTI/EXEC CAS */
    int id;                     /* Database ID */
    long long avg_ttl;          /* Average TTL, just for stats */
    unsigned long expires_cursor; /* Cursor of the active expire cycle. */
    list *defrag_later;         /* List of key names to attempt to defrag one by one, gradually. */
    clusterSlotToKeyMapping *slots_to_keys; /* Array of slots to keys. Only used in cluster mode (db 0). */
} redisDb;
----

dict *dict:

    key: obj_string
    val: obj***

dict *expires:

    key: void* 指向dict里的key
    val: long long, 毫秒精度

个数:

    int dbnum;  /* Total number of configured DBs */
    默认16个

=== 操作

==== select dbnum
https://groups.google.com/forum/#!topic/redis-db/vS5wX8X4Cjg/discussion
Salvatore Sanfilippo
I understand how this can be useful, but unfortunately I consider Redis multiple database errors my worst decision in Redis design at all... without any kind of real gain, it makes the internals a lot more complex. The reality is that databases don't scale well for a number of reason, like active expire of keys and VM. If the DB selection can be performed with a string I can see this feature being used as a scalable O(1) dictionary layer, that instead it is not.With DB numbers, with a default of a few DBs, we are communication better what this feature is and how can be used I think. I hope that at some point we can drop the multiple DBs support at all, but I think it is probably too late as there is a number of people relying on this feature for their work.
其实没什么用

==== FLUSHDB

==== DBSIZE

==== EXISTS

==== RENAME

==== KEYS

==== 增删改查

=== 读写
读：

更新hit或miss次数（INFO stats查看）
更新LRU时间(OBJECT idletime查看)
如果发现过期，会先删除过期键，然后才执行余下的操作

写：
如果有客户端WATCH监视了某个键，则将这个键标记为脏
脏计数器加1，这个计数器会触发服务器的持久化及复制操作

lookupKey(): https://github.com/redis/redis/blob/unstable/src/db.c

=== 过期
==== 设置键的生存时间或过期时间
EXPIRE 秒(之后)
PEXPIRE 毫秒
EXPIREAT
PEXPIREAT
实际上都是PEXPIREAT

PERSIST

TTL 返回还有多长时间
PTTL

如果没有设置时间，那缓存就是永不过期

==== 过期键的删除
1、定时删除：通过维护一个定时器，过期马上删除，是最有效的，内存友好，cpu不友好。
2、惰性删除：程序在取出键时才判断它是否过期，过期才删除，cpu友好，内存不友好。
3、定期删除：每隔一定时间执行一次删除过期键的操作，并限制每次删除操作的执行时长和频率，是一种折中方案。

Redis采用了惰性删除和定期删除的策略。

惰性删除：
expireIfNeeded()

定期删除：
activeExpireCycle()

==== 过期键处理
SAVE/BGSAVE生成RDB时，过期键不会被保存到新创建的RDB中

如果服务器以主服务器模式运行，过期键不会被载入到数据库
如果服务器以从服务器模式运行，过期键会被载入到数据库

RDB
        生成：

        载入：

AOF
        写入：

        重写：

删除过期键时会追加DEL命令到AOF文件

过期键不会被保存到重写后的AOF文件中

复制
        主服务器删除一个过期键后会向所有从服务器发送DEL命令。
        从服务器执行客户端命令时，遇到过期键也不会将过期键删除，而是像处理未过期的键一样
来处理
        从服务器只有在接到主服务器的DEL命令之后才会删除过期键

==== 从库的过期策略
从库不会进行过期扫描，从库对过期的处理是被动的。主库在key到期时，会在AOF文件里增加一条del指令，同步到所有的从库，从库通过执行这条 del 指令来删除过期的key。
因为指令同步是异步进行的，所以主库过期的key的del指令没有及时同步到从库的话，会出现主从数据的不一致，主库没有的数据在从库里还存在。

=== 通知
key-space notification: 关注某个键被执行了哪些命令
Key-event notification: 关注某个命令被什么键执行了