:toc:
:toclevels: 5
:hardbreaks-option:

== 性能

=== clustor

https://redis.io/topics/cluster-tutorial
https://redis.io/topics/cluster-spec

=== 脚本
- 作用

    ▪ 原子操作: 脚本作为一个整体执行
    ▪ 降低网络开销: 多条命令一次打包
    ▪ 重复使用: lua脚本能存放到redis服务器, 每次脚本的执行只需传入脚本唯一id就能执行该脚本

- 使用

    https://redis.io/commands/eval
    https://redis.io/commands/evalsha
    https://redis.io/commands/evalsha_ro
    https://redis.io/commands/eval_ro
    https://redis.io/commands/script-debug
    https://redis.io/commands/script-exists
    https://redis.io/commands/script-flush
    https://redis.io/commands/script-kill
    https://redis.io/commands/script-load

- 参考
https://redis.io/docs/interact/programmability/
https://redis.io/docs/interact/programmability/eval-intro/
https://rafaeleyng.github.io/redis-pipelining-transactions-and-lua-scripts

=== pipeline
原生命令: 例如mget、mset。
非原生命令: 可以使用pipeline提高效率。
但要注意控制一次批量操作的元素个数(例如500以内, 实际也和元素字节数有关)。

注意两者不同:
mget和mset是原子操作, pipeline是非原子操作。
pipeline可以打包不同的命令, mget和mset做不到。
pipeline需要客户端和服务端同时支持。

参考:
https://redis.io/docs/manual/pipelining/
https://stackoverflow.com/questions/29327544/pipelining-vs-transaction-in-redis

=== 非阻塞
UNLINK命令: https://redis.io/commands/unlink/
FLUSHALL ASYNC: https://redis.io/commands/flushall/
FLUSHDB ASYNC: https://redis.io/commands/flushdb/

=== 延迟
https://redis.io/topics/latency

=== 慢查询日志
- SLOWLOG GET
- CONFIG SET slow-log-slower-than 0  (u seconds)
- CONFIG SET slowlog-max-len 5

=== 大key问题

参考:
https://mp.weixin.qq.com/s?__biz=Mzg2NTEyNzE0OA==&mid=2247483677&idx=1&sn=5c320b46f0e06ce9369a29909d62b401&chksm=ce5f9e9ef928178834021b6f9b939550ac400abae5c31e1933bafca2f16b23d028cc51813aec&scene=21#wechat_redirect
https://www.getui.com/college/2019100911

=== 参考
https://redis.io/docs/management/optimization/
