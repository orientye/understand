:toc:
:toclevels: 5
:hardbreaks-option:

== 回溯(backtrack)

=== 思想
回溯本质上是对决策树(通常是多叉树，但不限于树)的遍历

==== 要素
- 路径: 已经做出的选择
- 选择: 下一步要做的选择
- 结束条件: 到达底部

==== 比较
- backtrack vs. DFS
回溯关注节点间的「树枝」，DFS关注「节点」。
According to Donald Knuth, it's the same: https://arxiv.org/pdf/cs/0011047.pdf[Backtracking, also called depth-first search]
https://stackoverflow.com/questions/1294720/whats-the-difference-between-backtracking-and-depth-first-search

- backtrack vs. Brute Force
回溯其实就是一种暴力搜索，有时候可以通过剪支来优化

- backtrack vs. DP
DP不是暴力搜索。
DP属于分解问题的思路，其关注点在整棵「子树」。
回溯属于遍历的思路，其关注点在节点间的「树枝」。
https://stackoverflow.com/questions/3592943/difference-between-back-tracking-and-dynamic-programming/3593147

- backtrack vs. Branch and Bound(分支限界法)
回溯适用于需要找到所有可能解或满足特定约束的场景，如排列组合、图的着色、路径问题等。
Branch and Bound适用于需要找到最优解的场景，是一种优化算法，专注于找到最优解并通过界限剪枝来提高效率，如最小生成树、最短路径、线性规划等。
https://stackoverflow.com/questions/30025421/difference-between-backtracking-and-branch-and-bound

=== 框架

    backtrack(路径, ...)
        if 满足结束条件:
            添加到结果集
            return
        for i in 选择:
            做选择
            backtrack(路径, ...)
            撤销选择

    循环-横向遍历，递归-纵向遍历

=== 优化
通过剪支来优化

=== 应用
==== 分类
组合/排列/切割/子集/棋盘...
组合问题: N个数里面按一定规则找出k个数的集合
排列问题: N个数按一定规则全排列，有几种排列方式
切割问题: 一个字符串按一定规则有几种切割方式
子集问题: 一个N个数的集合里有多少符合条件的子集
棋盘问题: N皇后，解数独等等

==== 排列组合子集
===== 形式
形式一、元素无重不可复选
即 nums 中的元素都是唯一的，每个元素最多只能被使用一次。
以组合为例，如果输入 nums = [2,3,6,7]，和为 7 的组合应该只有 [7]。
例如: lc77m: https://leetcode.com/problems/combinations/

形式二、元素有重不可复选
即 nums 中的元素可以存在重复，每个元素最多只能被使用一次。
以组合为例，如果输入 nums = [2,5,2,1,2]，和为 7 的组合应该有两种 [2,2,2,1] 和 [5,2]。
例如: lc40m: https://leetcode.com/problems/combination-sum-ii/

形式三、元素无重可复选
即 nums 中的元素都是唯一的，每个元素可以被使用若干次。
以组合为例，如果输入 nums = [2,3,6,7]，和为 7 的组合应该有两种 [2,2,3] 和 [7]。
例如: lc39m: https://leetcode.com/problems/combination-sum/

形式四、元素有重可复选
但既然元素可复选，就不必存在重复元素。元素去重之后就等同于形式三，因此这种情况不用考虑。

排列、组合、子集问题都可以有这三种基本形式。

除此之外，可以再添加各种限制条件，比如让求和为target且元素个数k的组合。

===== 组合子集树、排列树
组合问题和子集问题其实是等价的

===== 去重
使用过在树形结构有两个维度: 一个维度是同一树枝上使用过，一个维度是同一树层上使用过。
树层去重的话，需要对数组排序
used[i - 1] == true，说明同一树枝nums[i - 1]使用过
used[i - 1] == false，说明同一树层nums[i - 1]使用过
例如lc40m, lc90m

=== 例题
https://leetcode.com/tag/backtracking/

==== 组合问题
lc77m: https://leetcode.com/problems/combinations/
lc216m: https://leetcode.com/problems/combination-sum-iii/
lc17m: https://leetcode.com/problems/letter-combinations-of-a-phone-number/

如果是一个集合来求组合，就需要startIndex，例如：77.组合，216.组合总和III
如果是多个集合取组合，各个集合之间相互不影响，那么就不用startIndex，例如：17.电话号码的字母组合
注意，这是针对组合而言的。

lc39m: https://leetcode.com/problems/combination-sum/
lc40m: https://leetcode.com/problems/combination-sum-ii/

==== 排列问题
lc46m: https://leetcode.com/problems/permutations/
    每层都是从0开始搜索而不是startIndex
    需要used数组记录path里都放了哪些元素了
    另外一种解法:
    https://leetcode.com/problems/permutations/solutions/18247/my-elegant-recursive-c-solution-with-inline-explanation/
    https://www.geeksforgeeks.org/write-a-c-program-to-print-all-permutations-of-a-given-string/

lc47m: https://leetcode.com/problems/permutations-ii/

==== 切割问题
切割问题类似组合问题。
例如对于字符串abcdef：
    组合问题：选取一个a之后，在bcdef中再去选取第二个，选取b之后在cdef中再选取第三个.....
    切割问题：切割一个a之后，在bcdef中再去切割第二段，切割b之后在cdef中再切割第三段.....
lc131m: https://leetcode.com/problems/palindrome-partitioning/
lc93m: https://leetcode.com/problems/restore-ip-addresses/

==== 子集问题
子集问题是要收集所有节点的结果，而组合问题是收集叶子节点的结果
lc78m: https://leetcode.com/problems/subsets/
lc90m: https://leetcode.com/problems/subsets-ii/
lc491m: https://leetcode.com/problems/non-decreasing-subsequences/

==== 棋盘问题
lc51h: https://leetcode.com/problems/n-queens/
lc52h: https://leetcode.com/problems/n-queens-ii/

==== 其它
lc332h: https://leetcode.com/problems/reconstruct-itinerary/
lc37h: https://leetcode.com/problems/sudoku-solver/

==== 拓展
- dancing links
https://en.wikipedia.org/wiki/Dancing_Links

=== 参考
https://github.com/youngyangyang04/leetcode-master#%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95
https://labuladong.online/algo/essential-technique/backtrack-framework/
https://labuladong.online/algo/essential-technique/permutation-combination-subset-all-in-one/