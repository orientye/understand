:toc:
:toclevels: 4
:hardbreaks-option:

== 并查集(disjoint set/union find/merge find)

=== 思想
处理一些不交集(disjoint set, 一系列没有重复元素的集合)的合并及查询

=== 要素
- 通常有个一维数组，例如vector<int> parents, 存储各元素的root
- union: 合并两个元素的root， 如int merge(x, y, parents)
- find: 查找某个元素的root, 如int find(x, parents)

=== 优化
- 方法I. 路径压缩
    
    搞成两层, 达到一种极致的扁平

- 方法II. rank(秩)
    
    让结构扁平, 即深度(rank)更低
    把rank较低的合并到rank较高的节点

- 使用路径压缩的方法一般性能更好; rank方法多用了一个rank变量, 并且树往往有多层

=== 应用
Graph环/分组/相交/最小生成树的Kruskal算法

=== 例题
https://leetcode.com/problems/number-of-islands/
https://leetcode.com/problems/number-of-provinces/

=== 参考
参考: https://www.youtube.com/watch?v=cjImxgLtuGg
