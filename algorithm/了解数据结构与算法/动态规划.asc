:toc:
:toclevels: 4
:hardbreaks-option:

== 动态规划(dynamic programming)

=== 思想
- 最优子结构

    问题的最优解包含子问题的最优解。
    可以通过子问题的最优解，推导出问题的最优解。
    对应到动态规划问题模型上，可以理解为，后面阶段的状态可以通过前面阶段的状态推导出来。

- 无后效性

    无后效性有两层含义:
    (1)推导后面阶段的状态的时候，只关心前面阶段的状态值，而不关心这个状态是怎么一步步推导出来的。
    (2)某阶段状态一旦确定，就不受之后阶段的决策影响。

- 重复子问题

    不同的决策序列，到达某个相同的阶段时，可能会产生重复的状态。

一般用于:
- 最大值/最小值
- 是否可行
- 方案总数

=== 框架
根据最优子结构, 状态转移方程。
有了状态转移方程, 一般两种代码实现方法, 一种是递归+备忘录, 一种是迭代递推。

步骤:
(1) 确定DP数组以及下标的含义
(2) 确定递推公式
(3) DP数组的初始化
(4) 确定遍历顺序
(5) 举例推导DP数组

=== 优化
- 空间优化
滚动数组: 
https://leetcode.com/problems/unique-paths/discuss/22954/C%2B%2B-DP

- 时间优化
    通过变换状态优化
    通过决策单调优化
参考:《九章算法 动态规划十问十答》

=== 背包问题(knapsack problem)
==== 概要
给定一组物品，每种物品都有自己的重量和价值，在限定的总重量内，如何选择才能使得物品的总价值最高。

注意: 实际上背包问题不仅包括最值问题，还包括可行性，方案总数等问题。因此，以下的描述，递推公式等需要根据实际情况调整与变化。在实际的问题中，很多元素需要转化才能得到，比如什么是物品，什么是背包，什么是重量，什么是价值。

==== 01背包
01背包问题(01 knapsack problem): 一共有N件物品，第i件物品的重量为w[i]，价值为v[i]。
在总重量不超过背包承载上限W的情况下，能够装入背包的最大价值是多少？

===== 二维数组
- dp数组以及下标的含义

    dp[i][j] 表示从下标为[0-i]的物品里任意取，放进容量为j的背包，价值总和最大是多少

- 递推公式

    dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - weight[i]] + value[i]);

- 初始化

    vector<vector<int>> dp(weight.size(), vector<int>(bagweight + 1, 0));
    for (int j = weight[0]; j <= bagweight; j++) {
        dp[0][j] = value[0];
    }

- 遍历顺序

    // weight数组的大小 就是物品个数
    for(int i = 1; i < weight.size(); i++) { // 遍历物品
        for(int j = 0; j <= bagweight; j++) { // 遍历背包容量
            if (j < weight[i]) dp[i][j] = dp[i - 1][j]; 
            else dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - weight[i]] + value[i]);
        }
    }

    // weight数组的大小 就是物品个数
    for(int j = 0; j <= bagweight; j++) { // 遍历背包容量
        for(int i = 1; i < weight.size(); i++) { // 遍历物品
            if (j < weight[i]) dp[i][j] = dp[i - 1][j];
            else dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - weight[i]] + value[i]);
        }
    }

    虽然两个for循环遍历的次序不同，但是dp[i][j]所需要的数据就是左上角，根本不影响dp[i][j]公式的推导
    但先遍历物品再遍历背包这个顺序更好理解。

- 举例推导DP数组

    建议先推导, 再写代码

===== 一维数组
- dp数组以及下标的含义

    dp[j]表示容量为j的背包，所背的物品价值可以最大为dp[j]

- 递推公式

    dp[j]有两个选择:
    一个是取自己dp[j], 相当于二维dp数组中的dp[i-1][j]，即不放物品i;
    一个是取dp[j - weight[i]] + value[i]，即放物品i，指定是取最大的.
    因此递归公式为: dp[j] = max(dp[j], dp[j - weight[i]] + value[i]);

- 初始化

    vector<int> dp(bagWeight + 1, 0);

- 遍历顺序

    for(int i = 0; i < weight.size(); i++) { // 遍历物品
        for(int j = bagWeight; j >= weight[i]; j--) { // 遍历背包容量
            dp[j] = max(dp[j], dp[j - weight[i]] + value[i]);
        }
    }

    二维dp遍历的时候，背包容量是从小到大，而一维dp遍历的时候，背包是从大到小。
    倒序遍历是为了保证物品i只被放入一次！
    为什么二维dp数组遍历的时候不用倒序呢？
    因为对于二维dp，dp[i][j]都是通过上一层即dp[i - 1][j]计算而来，本层的dp[i][j]并不会被覆盖！

    再来看看两个嵌套for循环的顺序，代码中是先遍历物品嵌套遍历背包容量，那可不可以先遍历背包容量嵌套遍历物品呢？
    不可以！
    因为一维dp的写法，背包容量一定是要倒序遍历，如果遍历背包容量放在上一层，那么每个dp[j]就只会放入一个物品,
    即: 背包里只放入了一个物品。

- 举例推导DP数组

    建议先推导, 再写代码

==== 完全背包
完全背包(unbounded knapsack problem)与01背包不同就是每种物品可以有无限多个: 一共有N种物品，每种物品有无限多个，第i种物品的重量为w[i]，价值为v[i]。
在总重量不超过背包承载上限W的情况下，能够装入背包的最大价值是多少？

01背包内嵌的循环是从大到小遍历，为了保证每个物品仅被添加一次。
完全背包的物品是可以添加多次的，所以要从小到大去遍历，即：
for(int i = 0; i < weight.size(); i++) { // 遍历物品
    for(int j = weight[i]; j <= bagWeight ; j++) { // 遍历背包容量
        dp[j] = max(dp[j], dp[j - weight[i]] + value[i]);
    }
}

01背包中二维dp数组的两个for循环可以颠倒，而一维dp数组的两个for循环先后顺序一定是先遍历物品，再遍历背包容量。
在完全背包中，对于一维dp数组来说，其实两个for循环嵌套顺序可以颠倒。

==== 多重背包
多重背包(bounded knapsack problem)与前面不同就是每种物品是有限个: 一共有N种物品，第i种物品的数量为n[i]，重量为w[i]，价值为v[i]。
在总重量不超过背包承载上限W的情况下，能够装入背包的最大价值是多少？

==== 分组背包
物品被划分为若干组，每组中的物品互相冲突，最多选一件。
在总重量不超过背包承载上限W的情况下，能够装入背包的最大价值是多少？

=== 例题
- https://leetcode.com/tag/dynamic-programming/

==== 01背包
- 分割等和子集: https://leetcode.com/problems/partition-equal-subset-sum/
- 目标和: https://github.com/youngyangyang04/leetcode-master/blob/master/problems/0494.%E7%9B%AE%E6%A0%87%E5%92%8C.md
- https://leetcode.com/problems/ones-and-zeroes/submissions/

==== 完全背包
- https://programmercarl.com/0518.%E9%9B%B6%E9%92%B1%E5%85%91%E6%8D%A2II.html

==== 排列组合问题
https://leetcode.com/problems/target-sum/ (01背包，但不是纯01背包)
https://leetcode.com/problems/coin-change-2/ (完全背包，但不是纯完全背包)

- 确定dp数组以及下标的含义

    dp[j]表示满容量为j的背包，有dp[j]种方法

- 确定递推公式

    dp[j] += dp[j - weight[i]]

- dp数组如何初始化

    dp[0]初始化为1，其它应该初始化为0
    dp[0]=1: 装满容量为0的背包，有1种方法，即装0件物品

=== 参考
https://www.zdaiot.com/DataStructureAlgorithm/40%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%90%86%E8%AE%BA%EF%BC%9A%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0%E5%B8%A6%E4%BD%A0%E5%BD%BB%E5%BA%95%E6%90%9E%E6%87%82%E6%9C%80%E4%BC%98%E5%AD%90%E7%BB%93%E6%9E%84%E3%80%81%E6%97%A0%E5%90%8E%E6%95%88%E6%80%A7%E5%92%8C%E9%87%8D%E5%A4%8D%E5%AD%90%E9%97%AE%E9%A2%98/
https://github.com/youngyangyang04/leetcode-master#%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92
https://github.com/tianyicui/pack/blob/master/V2.pdf[《背包问题九讲2.0 - 崔添翼》]
https://zhuanlan.zhihu.com/p/93857890
