:toc:
:toclevels: 5
:hardbreaks-option:

== 字符串

=== KMP
==== 实现思想
- 复杂度
O(m+n)
有一个字符串"BBC ABCDAB ABCDABCDABDE"，求是否包含字符串"ABCDABD"？

- 前缀表
next数组就是一个前缀表(prefix table)
前缀表是用来回退的，它记录了模式串与主串(文本串)不匹配的时候，模式串应该从哪里开始重新匹配。

- 示例
ABCDABD的部分匹配表(Partial Match Table): [0,0,0,0,1,2,0]
部分匹配值"就是"前缀"和"后缀"的最长的共有元素的长度。
"前缀"指除了最后一个字符以外，一个字符串的全部头部组合；
"后缀"指除了第一个字符以外，一个字符串的全部尾部组合。
以"ABCDABD"为例:
"A"的前缀和后缀都为空集，共有元素的长度为0；
"AB"的前缀为[A]，后缀为[B]，共有元素的长度为0；
"ABC"的前缀为[A, AB]，后缀为[BC, C]，共有元素的长度0；
"ABCD"的前缀为[A, AB, ABC]，后缀为[BCD, CD, D]，共有元素的长度为0；
"ABCDA"的前缀为[A, AB, ABC, ABCD]，后缀为[BCDA, CDA, DA, A]，共有元素为"A"，长度为1；
"ABCDAB"的前缀为[A, AB, ABC, ABCD, ABCDA]，后缀为[BCDAB, CDAB, DAB, AB, B]，共有元素为"AB"，长度为2；
"ABCDABD"的前缀为[A, AB, ABC, ABCD, ABCDA, ABCDAB]，后缀为[BCDABD, CDABD, DABD, ABD, BD, D]，共有元素的长度为0。

- 前缀表的计算

- 匹配过程

==== 例题
lc28: https://leetcode.com/problems/find-the-index-of-the-first-occurrence-in-a-string/description/

==== 参考
https://www.ruanyifeng.com/blog/2013/05/Knuth%E2%80%93Morris%E2%80%93Pratt_algorithm.html
https://github.com/youngyangyang04/leetcode-master/blob/master/problems/0028.%E5%AE%9E%E7%8E%B0strStr.md
http://jakeboxer.com/blog/2009/12/13/the-knuth-morris-pratt-algorithm-in-my-own-words/
https://www.geeksforgeeks.org/kmp-algorithm-for-pattern-searching/

=== Boyer-Moore算法

=== 参考
https://github.com/youngyangyang04/leetcode-master#%E5%AD%97%E7%AC%A6%E4%B8%B2