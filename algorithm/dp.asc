:toc:
:toclevels: 5
:hardbreaks-option:

== 动态规划(dynamic programming)

=== 思想
- 最优子结构

    问题的最优解包含子问题的最优解。
    可以通过子问题的最优解，推导出问题的最优解。
    对应到动态规划问题模型上，可以理解为，后面阶段的状态可以通过前面阶段的状态推导出来。

- 无后效性

    无后效性有两层含义:
    (1)推导后面阶段的状态的时候，只关心前面阶段的状态值，而不关心这个状态是怎么一步步推导出来的。
    (2)某阶段状态一旦确定，就不受之后阶段的决策影响。

- 重叠子问题

    不同的决策序列，到达某个相同的阶段时，可能会产生重复的状态。

=== 典型场景

    最大值/最小值
    是否可行
    方案总数

=== 框架
核心问题:

    根据最优子结构, 确定状态转移方程。
    有了状态转移方程, 一般两种代码实现方法, 一种是递归+备忘录, 一种是迭代递推。

具体步骤:

    (1) 确定DP数组以及下标的含义
    (2) 确定递推公式
    (3) DP数组的初始化
    (4) 确定遍历顺序
    (5) 举例推导DP数组

=== 自底向上与自顶向下
可以使用「自顶向下」进行「递归」求解，递归又分为暴力递归与带备忘录的递归。
在DP问题里，更常见的是使用「自底向上」进行「递推」求解。
bottom-up method相较于top-down with memoization没有递归的开销，其时间复杂性函数通常具有更小的系数。
参考: https://labuladong.github.io/algo/di-ling-zh-bfe1b/dong-tai-g-1e688/

=== 优化
- 空间优化
滚动数组: 
https://leetcode.com/problems/unique-paths/discuss/22954/C%2B%2B-DP

- 时间优化
    通过变换状态优化
    通过决策单调优化
参考:《九章算法 动态规划十问十答》

=== 背包问题(knapsack problem)
==== 概要
给定一组物品，每种物品都有自己的重量和价值，在限定的总重量内，如何选择才能使得物品的总价值最高。

注意: 实际上背包问题不仅包括最值问题，还包括可行性，方案总数等问题。因此，以下的描述，递推公式等需要根据实际情况调整与变化。在实际的问题中，很多元素需要转化才能得到，比如什么是物品，什么是背包，什么是重量，什么是价值。

==== 01背包
01背包问题(01 knapsack problem): 一共有N件物品，第i件物品的重量为w[i]，价值为v[i]。
在总重量不超过背包承载上限W的情况下，能够装入背包的最大价值是多少？

===== 二维数组
- dp数组以及下标的含义

    dp[i][j]表示从下标为[0-i]的物品里任意取，放进容量为j的背包，价值总和最大是多少

- 递推公式

    dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - weight[i]] + value[i]);

- 初始化

    vector<vector<int>> dp(weight.size(), vector<int>(bagweight + 1, 0));
    for (int j = weight[0]; j <= bagweight; j++) {
        dp[0][j] = value[0];
    }

- 遍历顺序

    // weight数组的大小 就是物品个数
    for(int i = 1; i < weight.size(); i++) { // 遍历物品
        for(int j = 0; j <= bagweight; j++) { // 遍历背包容量
            if (j < weight[i]) dp[i][j] = dp[i - 1][j]; 
            else dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - weight[i]] + value[i]);
        }
    }

    // weight数组的大小 就是物品个数
    for(int j = 0; j <= bagweight; j++) { // 遍历背包容量
        for(int i = 1; i < weight.size(); i++) { // 遍历物品
            if (j < weight[i]) dp[i][j] = dp[i - 1][j];
            else dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - weight[i]] + value[i]);
        }
    }

    虽然两个for循环遍历的次序不同，但是dp[i][j]所需要的数据就是左上角，根本不影响dp[i][j]公式的推导
    但先遍历物品再遍历背包这个顺序更好理解。

- 举例推导DP数组

    建议先推导, 再写代码

===== 一维数组
- dp数组以及下标的含义

    dp[j]表示容量为j的背包，所背的物品价值可以最大为dp[j]

- 递推公式

    dp[j]有两个选择:
    一个是取自己dp[j], 相当于二维dp数组中的dp[i-1][j]，即不放物品i;
    一个是取dp[j - weight[i]] + value[i]，即放物品i，指定是取最大的.
    因此递归公式为: dp[j] = max(dp[j], dp[j - weight[i]] + value[i]);

- 初始化

    vector<int> dp(bagWeight + 1, 0);

- 遍历顺序

    for(int i = 0; i < weight.size(); i++) { // 遍历物品
        for(int j = bagWeight; j >= weight[i]; j--) { // 遍历背包容量
            dp[j] = max(dp[j], dp[j - weight[i]] + value[i]);
        }
    }

    二维dp遍历的时候，背包容量是从小到大，而一维dp遍历的时候，背包是从大到小。
    倒序遍历是为了保证物品i只被放入一次！
    为什么二维dp数组遍历的时候不用倒序呢？
    因为对于二维dp，dp[i][j]都是通过上一层即dp[i - 1][j]计算而来，本层的dp[i][j]并不会被覆盖！

    再来看看两个嵌套for循环的顺序，代码中是先遍历物品嵌套遍历背包容量，那可不可以先遍历背包容量嵌套遍历物品呢？
    不可以！
    因为一维dp的写法，背包容量一定是要倒序遍历，如果遍历背包容量放在上一层，那么每个dp[j]就只会放入一个物品,
    即: 背包里只放入了一个物品。

- 举例推导DP数组

    建议先推导, 再写代码

==== 完全背包
完全背包(unbounded knapsack problem)与01背包不同就是每种物品可以有无限多个: 一共有N种物品，每种物品有无限多个，第i种物品的重量为w[i]，价值为v[i]。
在总重量不超过背包承载上限W的情况下，能够装入背包的最大价值是多少？

01背包内嵌的循环是从大到小遍历，为了保证每个物品仅被添加一次。
完全背包的物品是可以添加多次的，因此要从小到大去遍历，即:

    for(int i = 0; i < weight.size(); i++) { // 遍历物品
        for(int j = weight[i]; j <= bagWeight ; j++) { // 遍历背包容量
            dp[j] = max(dp[j], dp[j - weight[i]] + value[i]);
        }
    }

01背包中二维dp数组的两个for循环可以颠倒，而一维dp数组的两个for循环先后顺序一定是先遍历物品，再遍历背包容量。
在完全背包中，对于一维dp数组来说，其实两个for循环嵌套顺序可以颠倒。

==== 多重背包
多重背包(bounded knapsack problem)与前面不同就是每种物品是有限个: 一共有N种物品，第i种物品的数量为n[i]，重量为w[i]，价值为v[i]。
在总重量不超过背包承载上限W的情况下，能够装入背包的最大价值是多少？

==== 分组背包
物品被划分为若干组，每组中的物品互相冲突，最多选一件。
在总重量不超过背包承载上限W的情况下，能够装入背包的最大价值是多少？

=== 例题
https://leetcode.com/tag/dynamic-programming/
lc509e: https://leetcode.com/problems/fibonacci-number/
lc70e: https://leetcode.com/problems/climbing-stairs/
    拓展: 一步一个台阶，两个台阶，三个台阶，直到m个台阶，有多少种方法爬到n阶楼顶
    参考: https://github.com/youngyangyang04/leetcode-master/blob/master/problems/0070.%E7%88%AC%E6%A5%BC%E6%A2%AF%E5%AE%8C%E5%85%A8%E8%83%8C%E5%8C%85%E7%89%88%E6%9C%AC.md
lc746e: https://leetcode.com/problems/min-cost-climbing-stairs/
lc62m: https://leetcode.com/problems/unique-paths/
    滚动数组: https://leetcode.com/problems/unique-paths/discuss/22954/C%2B%2B-DP
lc63m: https://leetcode.com/problems/unique-paths-ii/
lc343m: https://leetcode.com/problems/integer-break/
lc96m: https://leetcode.com/problems/unique-binary-search-trees/

==== 01背包
lc416m: https://leetcode.com/problems/partition-equal-subset-sum/
lc494m: https://leetcode.com/problems/target-sum/
lc474m: https://leetcode.com/problems/ones-and-zeroes/

==== 完全背包
lc518m: https://leetcode.com/problems/coin-change-ii/
lc377m: https://leetcode.com/problems/combination-sum-iv/
lc322m: https://leetcode.com/problems/coin-change/
lc279m: https://leetcode.com/problems/perfect-squares/
lc139m: https://leetcode.com/problems/word-break/

==== 排列组合问题
lc494m: https://leetcode.com/problems/target-sum/ (01背包，但不是纯01背包)
lc518m: https://leetcode.com/problems/coin-change-2/ (完全背包，但不是纯完全背包)
lc377m: https://leetcode.com/problems/combination-sum-iv/ (完全背包, 排列数)
https://github.com/youngyangyang04/leetcode-master/blob/master/problems/0070.%E7%88%AC%E6%A5%BC%E6%A2%AF%E5%AE%8C%E5%85%A8%E8%83%8C%E5%8C%85%E7%89%88%E6%9C%AC.md

- 确定dp数组以及下标的含义

    dp[j]表示满容量为j的背包，有dp[j]种方法

- 确定递推公式

    dp[j] += dp[j - weight[i]]

- dp数组如何初始化

    dp[0]初始化为1，其它应该初始化为0
    dp[0]=1: 装满容量为0的背包，有1种方法，即装0件物品

- 遍历顺序

    组合数外层for循环遍历物品，内层for循环遍历背包
    排列数外层for循环遍历背包，内层for循环遍历物品

==== 多重背包
https://github.com/youngyangyang04/leetcode-master/blob/master/problems/%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%80%E5%A4%9A%E9%87%8D%E8%83%8C%E5%8C%85.md

==== house-robber
lc198m: https://leetcode.com/problems/house-robber/
lc213m: https://leetcode.com/problems/house-robber-ii/
lc337m: https://leetcode.com/problems/house-robber-iii/

==== best-time-to-buy-and-sell-stock
lc121e: https://leetcode.com/problems/best-time-to-buy-and-sell-stock/  (只能买卖一次)
lc122m: https://leetcode.com/problems/best-time-to-buy-and-sell-stock-ii/ (可以买卖多次)
lc123h: https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iii/ (最多买卖两次)
lc188h: https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iv/ (最多买卖k次)
lc309m: https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-cooldown/ (可以买卖多次, 卖出有一天冷冻期)
lc714m: https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-transaction-fee/ (可以买卖多次, 每次有手续费)

==== 子序列
lc300m: https://leetcode.com/problems/longest-increasing-subsequence/
lc673m: https://leetcode.com/problems/number-of-longest-increasing-subsequence/
lc718m: https://leetcode.com/problems/maximum-length-of-repeated-subarray/
lc1143m: https://leetcode.com/problems/longest-common-subsequence/
lc1035m: https://leetcode.com/problems/uncrossed-lines/
lc53m: https://leetcode.com/problems/maximum-subarray/
lc392e: https://leetcode.com/problems/is-subsequence/
lc115h: https://leetcode.com/problems/distinct-subsequences/
lc583m: https://leetcode.com/problems/delete-operation-for-two-strings/
lc72m: https://leetcode.com/problems/edit-distance/
lc647m: https://leetcode.com/problems/palindromic-substrings/
lc516m: https://leetcode.com/problems/longest-palindromic-subsequence/
lc5m: https://leetcode.com/problems/longest-palindromic-substring/
lc132h: https://leetcode.com/problems/palindrome-partitioning-ii/
lc673m: https://leetcode.com/problems/number-of-longest-increasing-subsequence/

=== 参考
https://zhuanlan.zhihu.com/p/26743197
https://github.com/youngyangyang04/leetcode-master#%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92
https://labuladong.online/algo/essential-technique/dynamic-programming-framework/
https://github.com/tianyicui/pack/blob/master/V2.pdf[《背包问题九讲2.0 - 崔添翼》]
https://zhuanlan.zhihu.com/p/93857890
