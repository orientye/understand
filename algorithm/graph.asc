:toc:
:toclevels: 5
:hardbreaks-option:

== graph

=== 概念
- vs. 树
https://zh.wikipedia.org/zh-hans/%E6%A0%91_(%E5%9B%BE%E8%AE%BA)[树(图论)]
https://en.wikipedia.org/wiki/Tree_(data_structure)[Tree_(data_structure)]

- 有向与无向

- 有环与无环(acyclic)

    DAG(Directed Acyclic Graph, 有向无环图)
    Q: 如何判断是否有环?

- 连通与非连通

    Q: 如何判断是否连通?
    强联通: 任何两个顶点之间都是可达的
    联通分量: 在无向图中的极大连通子图称之为该图的一个连通分量

- 度(degree) 入度(in-degree) 出度(out-degree)

    在无向图中，「度」就是每个节点相连的边的条数。
    有向图的边有方向，因此有向图中每个节点的「度」被细分为入度(indegree)和出度(outdegree)

- 带权: weight

- 表示

    邻接矩阵(adjacency matrix)
        二维数组
        优点:
            简单
            检查任意两个顶点间是否存在边的操作非常快
            方便计算，例如转换成矩阵之间的运算
            适合稠密图，在边数接近顶点数平方的图中，邻接矩阵是一种空间效率较高的表示方法
        缺点:
            浪费空间，例如稀疏图(sparse matrix)

    邻接表(adjacency list)
        每个顶点都对应一个链表，存储与其相连接的其它顶点
        优点:
            比较节省存储空间(对于稀疏图的存储，只需要存储边)
            遍历节点连接情况相对容易
        缺点:
            不方便查找(如检查任意两个节点间是否存在边)，查询效率没有邻接矩阵高，不过可以优化:
                将链表换成更加高效的数据结构，如红黑树、跳表、有序动态数组、散列表等
            实现相对复杂些

    关联矩阵(incidence matrix)
        邻接矩阵和邻接链表都是用来表示图中各个点和每个点之间的关系
        关联矩阵用一个矩阵来表示各个点和每条边之间的关系

- 遍历与搜索

    广度优先搜索和深度优先搜索是一种暴力搜索算法
    比起其它高级的搜索算法如A*等，要简单粗暴且没有什么优化
    BFS与DFS仅适用于状态空间不大的图的搜索，其时间复杂度都是O(E)，空间复杂度均为O(V)

=== 遍历
图的遍历就是多叉树遍历的延伸。主要的遍历方式还是DFS和BFS。

区别是，树结构中不存在环，而图结构中可能存在环(此时需要标记遍历过的节点，避免遍历函数在环中死循环)。
如果图不存在环，那么图的遍历就基本等同于多叉树的遍历。

具体来说，遍历图的所有「节点」时，需要 visited 数组在前序位置标记节点；遍历图的所有「路径」时，需要 onPath 数组在前序位置标记节点，在后序位置撤销标记。

[source, c]
----
    /* 多叉树遍历 */
    void traverse(TreeNode root) {
        if (root == null) return;
        // 前序位置
        for (TreeNode child : root.children) {
            traverse(child);
        }
        // 后序位置
    }
----

如果图包含环，遍历框架就要一个visited数组进行辅助:
[source, c]
----
    // 记录被遍历过的节点
    vector<bool> visited;
    // 记录从起点到当前节点的路径
    vector<bool> onPath;

    /* 图遍历 */
    void traverse(Graph graph, int s) {
        if (visited[s]) return;
        // 经过节点s，标记为已遍历
        visited[s] = true;
        // 做选择：标记节点s在路径上
        onPath[s] = true;
        for (int neighbor : graph.neighbors(s)) {
            traverse(graph, neighbor);
        }
        // 撤销选择：节点s离开路径
        onPath[s] = false;
    }
----

onPath数组的操作很像回溯算法中的「做选择」和「撤销选择」，区别在于位置：回溯算法的「做选择」和「撤销选择」在for循环里面，而对onPath数组的操作在for循环外面。

为什么会有这个区别呢？
这是因为回溯算法和DFS算法的区别是：回溯算法关注的不是节点，而是树枝。

如果图中不含环，可以把visited数组都省掉，基本就是多叉树的遍历。

=== 环问题
==== 存在问题
- 概要

    DFS: 适合有向图和无向图，实现简单
    BFS: 适合有向图，通常结合拓扑排序的思想
    并查集: 适合无向图，效率高

- DFS

    算法步骤：
        从任意一个未访问的节点开始 DFS。
        在遍历时，记录当前路径上的节点（使用一个递归栈或标记数组）。
        如果遍历到一个已经在当前路径中的节点，说明存在环。
        如果遍历完所有节点都没有发现环，则图中无环。

- BFS

    算法步骤：
        计算每个节点的入度（指向该节点的边数）。
        将所有入度为 0 的节点加入队列。
        依次从队列中取出节点，减少其邻居节点的入度。如果某个邻居节点的入度变为 0，则将其加入队列。
        如果最终所有节点都被处理过，则无环；否则，存在环。

- 并查集
https://stackoverflow.com/questions/61167751/can-we-detect-cycles-in-directed-graph-using-union-find-data-structure

    算法步骤：
        初始化并查集，每个节点是自己的父节点。
        遍历每条边，查找两个节点的根节点。
        如果根节点相同，说明存在环。
        否则，将两个节点合并。
        如果遍历完所有边都没有发现环，则图中无环。

==== 最长环
lc2360h: https://leetcode.com/problems/longest-cycle-in-a-graph/

==== 最短环
lc2608h: https://leetcode.com/problems/shortest-cycle-in-a-graph/

=== 拓扑排序(Topological Sorting)
==== 概念
在图论中，拓扑排序是一个有向无环图(DAG, Directed Acyclic Graph)的所有顶点的线性序列。
且该序列必须满足下面两个条件:
1、每个顶点出现且只出现一次。
2、若存在一条从顶点 A 到顶点 B 的路径，那么在序列中顶点 A 出现在顶点 B 的前面。

有向无环图(DAG)才有拓扑排序。

一个有向无环图可以有一个或多个拓扑排序序列。

概括来说，给出一个有向图，把这个有向图转成线性的排序就叫拓扑排序。
当然拓扑排序也要检测这个有向图是否有环，即存在循环依赖的情况，因为这种情况是不能做线性排序的。
因此拓扑排序也是图论中判断有向无环图的常用方法。

==== 例题
https://leetcode.com/problem-list/topological-sort/

==== 参考
https://github.com/youngyangyang04/leetcode-master/blob/master/problems/kamacoder/0117.%E8%BD%AF%E4%BB%B6%E6%9E%84%E5%BB%BA.md

=== 最短路径

=== 最小生成树
==== 概念
最小生成树(minimum spanning tree，简称MST)，也称最小权重生成树(minimum weight spanning tree)
https://zh.wikipedia.org/zh-cn/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91

=== 网络流

=== 二分图(Bipartite graph)/二部图

=== 范例
lc2658m: https://leetcode.com/problems/maximum-number-of-fish-in-a-grid/
    https://leetcode.com/problems/maximum-number-of-fish-in-a-grid/solutions/3466685/c-dfs-bfs-union-find-maximum-of-water-components/

=== 例题
https://leetcode.com/tag/graph/

lc797m: https://leetcode.com/problems/all-paths-from-source-to-target/
https://github.com/youngyangyang04/leetcode-master/blob/master/problems/kamacoder/0098.%E6%89%80%E6%9C%89%E5%8F%AF%E8%BE%BE%E8%B7%AF%E5%BE%84.md

lc1319m: https://leetcode.com/problems/number-of-operations-to-make-network-connected/

lc1361m: https://leetcode.com/problems/validate-binary-tree-nodes/

lc785m: https://leetcode.com/problems/is-graph-bipartite/

=== 参考
https://oi-wiki.org/graph/
https://github.com/youngyangyang04/leetcode-master#%E5%9B%BE%E8%AE%BA
https://labuladong.online/algo/data-structure/graph-traverse/
