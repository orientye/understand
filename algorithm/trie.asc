:toc:
:toclevels: 5
:hardbreaks-option:

== trie
=== 概念
也称字典树、前缀树(prefix-tree)、单词查找树

优点:

    前缀查询效率极高。哈希表实现的插入和查询时间复杂度都是 O(L)。
    对于大量字符串的集合，如果有很多公共前缀，Trie 树可以很好地压缩存储（共享前缀）。
    可以按字典序遍历所有键。

缺点：

    空间消耗大。尤其是数组实现方式，每个节点都可能包含一个很大的数组，但其中很多元素是空的。
    标准 Trie 树不支持后缀搜索（后缀树可以解决，但更复杂）。

参考:
https://www.zhihu.com/question/318375802
https://www.zhihu.com/question/30736334

主要应用场景:

    1、字符串检索
    2、词频统计
    3、字符串排序
    4、前缀匹配
    5、其它数据结构和算法的辅助结构

=== 例题
https://leetcode.com/tag/trie/
lc208m: https://leetcode.com/problems/implement-trie-prefix-tree/
lc1804m: Implement Trie II (Prefix Tree) https://github.com/doocs/leetcode/blob/main/solution/1800-1899/1804.Implement%20Trie%20II%20%28Prefix%20Tree%29/README_EN.md

=== 参考
https://labuladong.gitee.io/algo/di-yi-zhan-da78c/shou-ba-sh-daeca/qian-zhui--46e56/