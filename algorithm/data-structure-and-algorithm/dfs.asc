:toc:
:toclevels: 5
:hardbreaks-option:

== dfs(depth first search)

=== 思想
DFS是一种用于遍历或搜索树或图的算法。它尽可能深的搜索树的分支。当节点v的所在边都己被探寻过，搜索将回溯到发现节点v的那条边的起始节点。这一过程一直进行到已发现从源节点可达的所有节点为止。如果还存在未被发现的节点，则选择其中一个作为源节点并重复以上过程，整个进程反复进行直到所有节点都被访问为止。

=== 框架
回溯:

    void backtracking(参数) {
        if (终止条件) {
            存放结果;
            return;
        }
        for (选择：本层集合中元素（树中节点孩子的数量就是集合的大小）) {
            处理节点;
            backtracking(路径，选择列表); // 递归
            回溯，撤销处理结果
        }
    }
    回溯算法，其实就是dfs的过程。

dfs:

    void dfs(参数) {
        if (终止条件) {
            存放结果;
            return;
        }

        for (选择：本节点所连接的其他节点) {
            处理节点;
            dfs(图，选择的节点); // 递归
            回溯，撤销处理结果
        }
    }
    dfs的代码框架和回溯算法的代码框架是差不多的。

=== 网格类DFS
如何避免重复遍历:

    网格结构的DFS与二叉树的DFS最大的不同之处在于，遍历中可能遇到遍历过的结点。
    因为网格结构本质上是一个图，我们可以把每个格子看成图中的结点，每个结点有向上下左右的四条边。
    在图中遍历时，自然可能遇到重复遍历结点。

示例代码:
[source, java]
----
void dfs(int[][] grid, int r, int c) {
    // 判断 base case
    // 如果坐标 (r, c) 超出了网格范围，直接返回
    if (!inArea(grid, r, c)) {
        return;
    }
    // 访问上、下、左、右四个相邻结点
    dfs(grid, r - 1, c);
    dfs(grid, r + 1, c);
    dfs(grid, r, c - 1);
    dfs(grid, r, c + 1);
}

// 判断坐标 (r, c) 是否在网格中
boolean inArea(int[][] grid, int r, int c) {
    return 0 <= r && r < grid.length 
        	&& 0 <= c && c < grid[0].length;
}
----

=== 例题
https://leetcode.com/tag/depth-first-search/
lc1905m: https://leetcode.com/problems/count-sub-islands/
lc200m:  https://leetcode.com/problems/number-of-islands/
lc399m:  https://leetcode.com/problems/evaluate-division/

=== 参考
https://leetcode-cn.com/problems/number-of-islands/solution/dao-yu-lei-wen-ti-de-tong-yong-jie-fa-dfs-bian-li-/
https://github.com/youngyangyang04/leetcode-master#%E6%B7%B1%E6%90%9C%E5%B9%BF%E6%90%9C
lc399: https://www.youtube.com/watch?v=UwpvInpgFmo
