:toc:
:toclevels: 5
:hardbreaks-option:

== graph

=== 概念
- vs. 树
https://zh.wikipedia.org/zh-hans/%E6%A0%91_(%E5%9B%BE%E8%AE%BA)[树(图论)]
https://en.wikipedia.org/wiki/Tree_(data_structure)[Tree_(data_structure)]

- 有向与无向

- 有环与无环

    如何判断是否有环?

- 连通与非连通

    如何判断是否连通?

- 度(degree) 入度(in-degree) 出度(out-degree)

    在无向图中，「度」就是每个节点相连的边的条数。
    有向图的边有方向，因此有向图中每个节点的「度」被细分为入度(indegree)和出度(outdegree)

- 带权: weight

- 表示

    邻接矩阵(adjacency matrix)
        二维数组
        优点:
            简单，查找十分高效
            方便计算，例如转换成矩阵之间的运算
        缺点:
            浪费空间，例如稀疏图(sparse matrix)
    
    邻接表(adjacency list)
        每个顶点都对应一个链表，存储与其相连接的其他顶点
        优点:
            比较节省存储空间
        缺点:
            不方便查找，查询效率没有邻接矩阵存储方式高，不过可以优化:
            将链表换成更加高效的数据结构，如红黑树、跳表、有序动态数组、散列表等
    
    关联矩阵(incidence matrix)
        邻接矩阵和邻接链表都是用来表示图中各个点和每个点之间的关系
        关联矩阵用一个矩阵来表示各个点和每条边之间的关系

- 遍历与搜索
    
    广度优先搜索和深度优先搜索是一种暴力搜索算法，比起其他高级的搜索算法如A*等，要简单粗暴且没有什么优化
    BFS与DFS仅适用于状态空间不大的图的搜索，其时间复杂度都是O(E)，空间复杂度均为O(V)

- 拓扑排序

=== 遍历
[source, c]
----
/* 多叉树遍历框架 */
void traverse(TreeNode root) {
    if (root == null) return;
    // 前序位置
    for (TreeNode child : root.children) {
        traverse(child);
    }
    // 后序位置
}
----

=== 环问题
Q: 并查集能用于判断有向图的有环吗?
https://stackoverflow.com/questions/61167751/can-we-detect-cycles-in-directed-graph-using-union-find-data-structure

=== 范例
- lc2658m: https://leetcode.com/problems/maximum-number-of-fish-in-a-grid/
https://leetcode.com/problems/maximum-number-of-fish-in-a-grid/solutions/3466685/c-dfs-bfs-union-find-maximum-of-water-components/

=== 例题
https://leetcode.com/tag/graph/
lc1319m: https://leetcode.com/problems/number-of-operations-to-make-network-connected/
lc1361m: https://leetcode.com/problems/validate-binary-tree-nodes/

=== 参考
https://labuladong.gitee.io/algo/di-yi-zhan-da78c/shou-ba-sh-03a72/tu-lun-ji--d55b2/
https://github.com/youngyangyang04/leetcode-master#%E5%9B%BE%E8%AE%BA