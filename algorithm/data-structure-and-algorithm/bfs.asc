:toc:
:toclevels: 5
:hardbreaks-option:

== bfs(breath first search)

=== 思想
BFS是从根节点开始，沿着树的宽度遍历树的节点。如果所有节点均被访问，则算法中止。

BFS是一圈一圈的搜索过程，DFS是一条路跑到黑然后再回溯。

使用场景:
适合于解决两个点之间的最短路径问题。
因为广搜是从起点出发，以起始点为中心一圈一圈进行搜索，一旦遇到终点，记录之前走过的节点就是一条最短路径。
并且，地图还可以有障碍。

数据结构:
仅仅需要一个容器，能保存要遍历过的元素就可以，用队列，还是用栈，甚至用数组，都是可以的。
用队列的话，就是保证每一圈都是一个方向去转，例如统一顺时针或者逆时针。
因为队列是先进先出，加入元素和弹出元素的顺序是没有改变的。
如果用栈的话，就是第一圈顺时针遍历，第二圈逆时针遍历，第三圈顺时针遍历。
因为栈是先进后出，加入元素和弹出元素的顺序改变了。

参考: https://github.com/youngyangyang04/leetcode-master/blob/master/problems/%E5%9B%BE%E8%AE%BA%E5%B9%BF%E6%90%9C%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%80.md

=== 递归
https://labuladong.github.io/algo/di-ling-zh-bfe1b/dong-ge-da-334dd/#%E5%B1%82%E5%BA%8F%E9%81%8D%E5%8E%86

=== 最短距离
BFS的depth每增加一次，队列中的所有节点都向前迈一步，这保证了第一次到达终点的时候，走的步数是最少的。DFS也能找最短路径，但是时间复杂度相对高很多，因为DFS实际上是靠递归的堆栈记录走过的路径，需要探索完整棵树。而BFS借助队列做到一次一步齐头并进，是可以在不遍历完整棵树的条件下找到最短距离的。

例题:
lc111e: https://leetcode.com/problems/minimum-depth-of-binary-tree/

=== 例题
https://leetcode.com/tag/breadth-first-search/

=== 参考
https://github.com/youngyangyang04/leetcode-master#%E6%B7%B1%E6%90%9C%E5%B9%BF%E6%90%9C
https://labuladong.github.io/algo/di-ling-zh-bfe1b/bfs-suan-f-463fd/
