:toc:
:toclevels: 5
:hardbreaks-option:

== tree

=== 二叉树
==== 前中后序
快速排序是个二叉树的前序遍历，归并排序是个二叉树的后序遍历。

前中后序是遍历二叉树过程中处理每一个节点的三个特殊时间点。
二叉树的所有问题，就是在前中后序位置注入巧妙的代码逻辑，去达到自己的目的，只需要单独思考每一个节点应该做什么，其他的不用管，抛给二叉树遍历框架，递归会在所有节点上做相同的操作。

==== 解题思路
二叉树的递归解法可以分两类思路，第一类是遍历一遍二叉树得出答案，第二类是通过分解问题计算出答案，这两类思路分别对应着回溯算法核心框架和动态规划核心框架。

==== 树视角
动态规划算法属于分解问题的思路，其关注点在整棵「子树」。
回溯算法属于遍历的思路，其关注点在节点间的「树枝」。
DFS算法属于遍历的思路，其关注点在单个「节点」。

==== 后序位置的特殊性
只有后序位置才能通过返回值获取子树的信息。
换句话说，一旦发现题目和子树有关，那大概率要给函数设置合理的定义和返回值，在后序位置写代码了。
lc543e: https://leetcode.com/problems/diameter-of-binary-tree/

==== 非递归
lc144e: https://leetcode.com/problems/binary-tree-preorder-traversal/
lc94e:  https://leetcode.com/problems/binary-tree-inorder-traversal/
lc145e: https://leetcode.com/problems/binary-tree-postorder-traversal/

[source, cpp]
.https://leetcode.com/problems/binary-tree-preorder-traversal/
----
vector<int> preorderTraversal(TreeNode* root) {
    vector<int> vec;
    stack<TreeNode*> st;
    TreeNode* cur = root;
            
    while (!st.empty() || cur) {
        if (cur) {
            vec.push_back(cur->val); //visit
            st.push(cur);
            cur = cur->left;
        } else {
            TreeNode* tn = st.top();
            st.pop();
            cur = tn->right;
        } 
    }     
    return vec;
}
----

[source, cpp]
.https://leetcode.com/problems/binary-tree-inorder-traversal/
----
vector<int> inorderTraversal(TreeNode* root) {
    vector<int> vec;
    stack<TreeNode*> st;
    TreeNode* cur = root;
            
    while (!st.empty() || cur) {
        if (cur) {
            st.push(cur);
            cur = cur->left;
        } else {
            TreeNode* tn = st.top();
            st.pop();
            vec.push_back(tn->val); //visit
            cur = tn->right;
        } 
    }     
    return vec;
}
----

[source, cpp]
.https://leetcode.com/problems/binary-tree-postorder-traversal/
----
vector<int> postorderTraversal(TreeNode* root) {
    vector<int> vec;
    stack<TreeNode*> st;
    TreeNode* cur = root;
    TreeNode* prev;

    while (!st.empty() || cur) {
        if (cur) {
            st.push(cur);
            cur = cur->left;
        } else {
            TreeNode* tn = st.top();
            if (tn->right && prev != tn->right) {
                cur = tn->right;
            } else  {
                st.pop();
                prev = tn;
                vec.push_back(tn->val); //visit
            }
        }
    }
    return vec;
}
----

另外的参考解法:
https://github.com/youngyangyang04/leetcode-master/blob/master/problems/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E8%BF%AD%E4%BB%A3%E9%81%8D%E5%8E%86.md
https://github.com/youngyangyang04/leetcode-master/blob/master/problems/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E7%BB%9F%E4%B8%80%E8%BF%AD%E4%BB%A3%E6%B3%95.md

==== Morris traversal

===== 参考
https://zhuanlan.zhihu.com/p/102285533
https://github.com/chefyuan/algorithm-base?tab=readme-ov-file#-%E4%BA%8C%E5%8F%89%E6%A0%91

==== 层序遍历
===== 迭代
[source, cpp]
.https://leetcode.com/problems/binary-tree-level-order-traversal/
----
vector<vector<int>> levelOrder(TreeNode* root) {
    queue<TreeNode*> que;
    if (root != NULL) que.push(root);
    vector<vector<int>> result;
    while (!que.empty()) {
        int size = que.size();
        vector<int> vec;
        for (int i = 0; i < size; i++) {
            TreeNode* node = que.front();
            que.pop();
            vec.push_back(node->val);
            if (node->left) que.push(node->left);
            if (node->right) que.push(node->right);
        }
        result.push_back(vec);
    }
    return result;
}
----

===== 递归
[source, cpp]
.https://leetcode.com/problems/binary-tree-level-order-traversal/
----
void order(TreeNode* cur, vector<vector<int>>& result, int depth)
{
    if (cur == nullptr) return;
    if (result.size() == depth) result.push_back(vector<int>());
    result[depth].push_back(cur->val);
    order(cur->left, result, depth + 1);
    order(cur->right, result, depth + 1);
}
vector<vector<int>> levelOrder(TreeNode* root) {
    vector<vector<int>> result;
    int depth = 0;
    order(root, result, depth);
    return result;
}
----

===== 例题
lc102m: https://leetcode.com/problems/binary-tree-level-order-traversal/
lc107m: https://leetcode.com/problems/binary-tree-level-order-traversal-ii/
lc199m: https://leetcode.com/problems/binary-tree-right-side-view/
lc637e: https://leetcode.com/problems/average-of-levels-in-binary-tree/
lc429m: https://leetcode.com/problems/n-ary-tree-level-order-traversal/

===== 参考
https://github.com/youngyangyang04/leetcode-master/blob/master/problems/0102.%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%B1%82%E5%BA%8F%E9%81%8D%E5%8E%86.md
https://labuladong.github.io/algo/di-ling-zh-bfe1b/dong-ge-da-334dd/#%E5%B1%82%E5%BA%8F%E9%81%8D%E5%8E%86

=== 例题
https://leetcode.com/tag/tree/
lc104e: https://leetcode.com/problems/maximum-depth-of-binary-tree/
lc111e: https://leetcode.com/problems/minimum-depth-of-binary-tree/
lc366m: https://cloud.tencent.com/developer/article/1659731
lc226e: https://leetcode.com/problems/invert-binary-tree/
lc589e: https://leetcode.cn/problems/n-ary-tree-preorder-traversal/
lc590e: https://leetcode.com/problems/n-ary-tree-postorder-traversal/

=== 参考
https://labuladong.github.io/algo/di-ling-zh-bfe1b/dong-ge-da-334dd/
https://labuladong.gitee.io/algo/di-yi-zhan-da78c/shou-ba-sh-66994/
https://github.com/youngyangyang04/leetcode-master#%E4%BA%8C%E5%8F%89%E6%A0%91