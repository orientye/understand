:toc:
:toclevels: 5
:hardbreaks-option:

== tree

=== 二叉树
==== 前中后序
快速排序是个二叉树的前序遍历，归并排序是个二叉树的后序遍历。

前中后序是遍历二叉树过程中处理每一个节点的三个特殊时间点。
二叉树的所有问题，就是在前中后序位置注入巧妙的代码逻辑，去达到自己的目的，只需要单独思考每一个节点应该做什么，其他的不用管，抛给二叉树遍历框架，递归会在所有节点上做相同的操作。

==== 解题思路
二叉树的递归解法可以分两类思路，第一类是遍历一遍二叉树得出答案，第二类是通过分解问题计算出答案，这两类思路分别对应着回溯算法核心框架和动态规划核心框架。

==== 后序位置的特殊性
只有后序位置才能通过返回值获取子树的信息。
换句话说，一旦发现题目和子树有关，那大概率要给函数设置合理的定义和返回值，在后序位置写代码了。
lc543e: https://leetcode.com/problems/diameter-of-binary-tree/

=== 例题
https://leetcode.com/tag/tree/
lc104e: https://leetcode.com/problems/maximum-depth-of-binary-tree/
lc366m: https://cloud.tencent.com/developer/article/1659731

=== 参考
https://labuladong.github.io/algo/di-ling-zh-bfe1b/dong-ge-da-334dd/