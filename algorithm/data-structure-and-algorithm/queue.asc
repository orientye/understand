:toc:
:toclevels: 5
:hardbreaks-option:

== 队列

=== 例题
https://leetcode.com/tag/queue/
lc225e: https://leetcode.com/problems/implement-stack-using-queues/  （一个队列也可以的）

=== 单调队列(monotonic queue)
==== 概念
队列中的元素全都是单调递增或递减的。

==== 场景
单调队列是一种主要用于解决滑动窗口类问题的数据结构，例如，在长度为n的序列中，求每个长度为m的区间的区间最值。因为有些稍微复杂的滑动窗口问题不能只靠两个指针来解决，需要更先进的数据结构。

给一个数组window，已知其最值为A，如果给window中添加一个数B，那么比较一下A和B就可以立即算出新的最值；但如果要从window数组中减少一个数，就不能直接得到最值了，因为如果减少的这个数恰好是A，就需要遍历window中的所有元素重新寻找新的最值。

这个场景很常见，但不用单调队列似乎也可以，比如优先级队列也是一种特殊的队列，专门用来动态寻找最值的，创建一个大(小)顶堆，就可以很快拿到最大(小)值。

如果单纯地维护最值的话，优先级队列是没有问题的，队头元素就是最值。但优先级队列无法满足标准队列结构「先进先出」的时间顺序，因为优先级队列底层利用二叉堆对元素进行动态排序，元素的出队顺序是元素的大小顺序，和入队的先后顺序完全没有关系。

因此，需要一种新的队列结构，既能够维护队列元素「先进先出」的时间顺序，又能够正确维护队列中所有元素的最值，这就是单调队列结构。

==== 例题
https://leetcode.com/tag/monotonic-queue/
lc239h: https://leetcode.com/problems/sliding-window-maximum/

==== 参考
https://github.com/youngyangyang04/leetcode-master/blob/master/problems/0239.%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3%E6%9C%80%E5%A4%A7%E5%80%BC.md
https://labuladong.gitee.io/algo/di-yi-zhan-da78c/shou-ba-sh-daeca/dan-diao-d-32cd5/

=== 参考
https://github.com/youngyangyang04/leetcode-master#%E6%A0%88%E4%B8%8E%E9%98%9F%E5%88%97
https://labuladong.gitee.io/algo/di-yi-zhan-da78c/shou-ba-sh-daeca/dui-lie-sh-88541/