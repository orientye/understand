:toc:
:toclevels: 5
:hardbreaks-option:

== 滑动窗口(sliding window)

=== 思想
数组中的连续问题, 相同部分不必重复计算

滑动窗口: 不断的调节子序列的起始位置和终止位置，从而获得结果。

=== 比较
- vs. two pointers

    双指针:
        计算过程仅与两端点相关
        可以同向移动也可以双向移动
    滑动窗口:
        计算过程与两端点表示的区间相关
        仅能同向移动
    滑动窗口就是移动方向相同的双指针?

=== 框架
[source, cpp]
----
int left = 0, right = 0;

while (left < right && right < s.size()) {
    // 增大窗口
    window.add(s[right]);
    right++;
    
    while (window needs shrink) {
        // 缩小窗口
        window.remove(s[left]);
        left++;
    }
}
----
注意:
窗口: 可以设计两端都开或者两端都闭的区间，但设计为左闭右开区间是最方便处理的。
因为这样初始化left = right = 0 时区间[0, 0)中没有元素，但只要让right向右移动(扩大)一位，区间[0, 1)就包含一个元素0了。
如果设置为两端都开的区间，那么让right向右移动一位后开区间(0, 1)仍然没有元素;
如果设置为两端都闭的区间，那么初始区间[0, 0]就包含了一个元素。
这两种情况都会给边界处理带来不必要的麻烦。

1、什么时候应该扩大窗口？
2、什么时候应该缩小窗口？
3、如何更新窗口相关数据？

=== 例题
https://leetcode.com/tag/sliding-window/
lc209m: https://leetcode.com/problems/minimum-size-subarray-sum/
lc1652e: https://leetcode.com/problems/defuse-the-bomb/
lc76h: https://leetcode.com/problems/minimum-window-substring/
lc567m: https://leetcode.com/problems/permutation-in-string/
lc3m: https://leetcode.com/problems/longest-substring-without-repeating-characters/
lc438m: https://leetcode.com/problems/find-all-anagrams-in-a-string/

=== 参考
https://labuladong.gitee.io/algo/di-yi-zhan-da78c/shou-ba-sh-48c1d/wo-xie-le--f7a92/
https://leetcode.com/problems/minimum-size-subarray-sum/discuss/433123/JavaC%2B%2BPython-Sliding-Window