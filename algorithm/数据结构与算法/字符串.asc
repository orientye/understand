:toc:
:toclevels: 5
:hardbreaks-option:

== 字符串

=== 匹配/查找

==== KMP
===== 实现思想

====== 部分匹配表(Partial Match Table)

    记录了模式串与主串(文本串)不匹配的时候，模式串应该从哪里开始重新匹配。
    
    "部分匹配值"就是"前缀"和"后缀"的最长的共有元素的长度。
    "前缀"指除了最后一个字符以外，一个字符串的全部头部组合；
    "后缀"指除了第一个字符以外，一个字符串的全部尾部组合。

- 示例1

    ABCDABD的部分匹配表: [0,0,0,0,1,2,0]
    这是因为:
    A的前缀和后缀都为空集，共有元素的长度为0
    AB的前缀为[A]，后缀为[B]，共有元素的长度为0
    ABC的前缀为[A, AB]，后缀为[BC, C]，共有元素的长度0
    ABCD的前缀为[A, AB, ABC]，后缀为[BCD, CD, D]，共有元素的长度为0
    ABCDA的前缀为[A, AB, ABC, ABCD]，后缀为[BCDA, CDA, DA, A]，共有元素为"A"，长度为1
    ABCDAB的前缀为[A, AB, ABC, ABCD, ABCDA]，后缀为[BCDAB, CDAB, DAB, AB, B]，共有元素为"AB"，长度为2
    ABCDABD的前缀为[A, AB, ABC, ABCD, ABCDA, ABCDAB]，后缀为[BCDABD, CDABD, DABD, ABD, BD, D]，共有元素的长度为0

- 示例2

    aabaaf的部分匹配表: [0,1,0,1,2,0]
    a: 0
    aa: [a]  [a]  1
    aab:  [a, aa]  [ab, b]  0
    aaba: [a, aa, aab]  [aba, ba, a]  1
    aabaa: [a, aa, aab, aaba]  [abaa, baa, aa, a]  2
    aabaaf: [a, aa, aab, aaba, aabaa]  [abaaf, baaf, aaf, af, f]  0

====== 匹配过程
移动位数 = 已匹配的字符数 - 对应的部分匹配值

有一个字符串"BBC ABCDAB ABCDABCDABDE"，求是否包含字符串"ABCDABD"？

    首先，在上面的示例1中，已经求得ABCDABD的部分匹配表: [0,0,0,0,1,2,0]

    BBC ABCDAB ABCDABCDABDE
    ABCDABD
    已匹配的字符数: 1(A), 对应的部分匹配值: 0, 则移动位数: 1

    BBC ABCDAB ABCDABCDABDE
    ABCDABD
    会一直后移，直到有一个匹配

    BBC ABCDAB ABCDABCDABDE
        ABCDABD
    已匹配的字符数: 6(ABCDAB), 对应的部分匹配值: 2, 则移动位数: 4

    BBC ABCDAB ABCDABCDABDE
            ABCDABD
    已匹配的字符数: 2(AB), 对应的部分匹配值: 0, 则移动位数: 2

    BBC ABCDAB ABCDABCDABDE
            ABCDABD
    会一直后移，直到有一个匹配

    BBC ABCDAB ABCDABCDABDE
            ABCDABD
    已匹配的字符数: 6(ABCDAB), 对应的部分匹配值: 2, 则移动位数: 4

    BBC ABCDAB ABCDABCDABDE
                ABCDABD
    至此，完成匹配。如果还要继续搜索即找出全部匹配，则移动位数: 7-0=7。

===== 例题
lc28e: https://leetcode.com/problems/find-the-index-of-the-first-occurrence-in-a-string/description/
lc459e: https://leetcode.com/problems/repeated-substring-pattern/

===== 参考
https://www.ruanyifeng.com/blog/2013/05/Knuth%E2%80%93Morris%E2%80%93Pratt_algorithm.html
https://github.com/youngyangyang04/leetcode-master/blob/master/problems/0028.%E5%AE%9E%E7%8E%B0strStr.md
http://jakeboxer.com/blog/2009/12/13/the-knuth-morris-pratt-algorithm-in-my-own-words/
https://www.geeksforgeeks.org/kmp-algorithm-for-pattern-searching/
https://en.wikipedia.org/wiki/Knuth%E2%80%93Morris%E2%80%93Pratt_algorithm

==== Boyer-Moore算法
===== 实现思想

    主串与模式串/搜索词头部对齐，从尾部开始比较:

    坏字符:
        后移位数 = 坏字符的位置 - 搜索词中的上一次出现位置
        如果"坏字符"不包含在搜索词之中，则上一次出现位置为-1

    好后缀:
        后移位数 = 好后缀的位置 - 搜索词中的上一次出现位置

    每次后移这两个规则之中的较大值。

    这两个规则的移动位数，只与搜索词有关，与原字符串无关。
    因此，可以预先计算生成《坏字符规则表》和《好后缀规则表》。

===== 匹配过程
假定字符串为"HERE IS A SIMPLE EXAMPLE"，搜索词为"EXAMPLE":

- step 1
HERE IS A SIMPLE EXAMPLE
EXAMPLE
"S"与"E"不匹配。这时，"S"就被称为"坏字符"（bad character），即不匹配的字符。此外，"S"不包含在搜索词"EXAMPLE"之中，这意味着可以把搜索词直接移到"S"的后一位，即后移位数: 6-(-1)=7。

- step 2
HERE IS A SIMPLE EXAMPLE
       EXAMPLE
"P"与"E"不匹配，因此"P"是"坏字符"。但是"P"含在搜索词"EXAMPLE"之中。因此，将搜索词后移两位，两个"P"对齐，即后移位数: 6-4=2。

- step 3
HERE IS A SIMPLE EXAMPLE
         EXAMPLE
"MPLE"、"PLE"、"LE"、"E"都是好后缀，再往前，I是坏字符。
按照坏字符，搜索词应该后移: 2-(-1)=3位
按照好后缀，搜索词应该后移: 6位(E: 6-0)，为什么是6参考下面的关于好后缀的示例与注意事项。
取两者的较大值6，即后移位数: 6

- 好后缀示例
示例1. 如果字符串"ABCDAB"的后一个"AB"是好后缀，那么它的位置是5(从0开始计算，取最后的"B"的值)，在搜索词中的上一次出现位置是1(第一个B的位置)，因此后移5-1=4位，前一个"AB"移到后一个"AB"的位置。
示例2. 如果字符串"ABCDEF"的"EF"是好后缀，则它的位置是5，上一次出现的位置是-1(未出现)，因此后移5-(-1)=6位，即整个字符串移到F的后一位。

- 好后缀注意事项
1 好后缀的位置以最后一个字符为准。假定"ABCDEF"的"EF"是好后缀，则它的位置以F为准，即5。
2 如果好后缀在搜索词中只出现一次，则它的上一次出现位置为-1。比如，"EF"在"ABCDEF"之中只出现一次，则它的上一次出现位置为-1。
3 如果好后缀有多个，则除了最长的那个好后缀，其他好后缀的上一次出现位置必须在头部。比如，假定"BABCDAB"的好后缀是"DAB"、"AB"、"B"，请问这时"好后缀"的上一次出现位置是什么？回答是，此时采用的好后缀是"B"，它的上一次出现位置是头部，即第0位。这个规则也可以这样表达: 如果最长的那个"好后缀"只出现一次，则可以把搜索词改写成如下形式进行位置计算"(DA)BABCDAB"，即虚拟加入最前面的"DA"。

- 回到step3
此时，所有的好后缀(MPLE、PLE、LE、E)之中，只有"E"在"EXAMPLE"还出现在头部，因此后移6-0=6位。

- step4
HERE IS A SIMPLE EXAMPLE
               EXAMPLE
"P"与"E"不匹配，因此"P"是"坏字符"。根据"坏字符规则"，后移6-4=2位。

- step5
HERE IS A SIMPLE EXAMPLE
                 EXAMPLE
至此，完成匹配。如果还要继续搜索即找出全部匹配，则根据"好后缀规则"，后移6-0=6位，即头部的"E"移到尾部的"E"的位置。

===== 参考
https://www.ruanyifeng.com/blog/2013/05/boyer-moore_string_search_algorithm.html
https://en.wikipedia.org/wiki/Boyer%E2%80%93Moore_string-search_algorithm

==== Rabin-Karp算法
Rabin-Karp算法主要用来检测文章抄袭。

由于通过计算模式串和文本子串的散列值来做相等性比较，因此有一定概率出现冲突，即散列值相同但是字符串不匹配。
出现冲突的概率与大素数的选择有关，概率约为1/Q（Q为大素数的值），实际应用中，该算法是可靠的，只有极小的概率会出现冲突。

===== 参考
https://en.wikipedia.org/wiki/Rabin%E2%80%93Karp_algorithm
https://www.geeksforgeeks.org/rabin-karp-algorithm-for-pattern-searching/
https://www.jianshu.com/p/24895aca0459

==== 参考
https://en.wikipedia.org/wiki/String-searching_algorithm

=== 双指针
lc344e: https://leetcode.com/problems/reverse-string/
lc345e: https://leetcode.com/problems/reverse-vowels-of-a-string/
lc27e:  https://leetcode.com/problems/remove-element/
lc151m: https://leetcode.com/problems/reverse-words-in-a-string/

=== 滑动窗口
lc76h: https://leetcode.com/problems/minimum-window-substring/

=== 反转
lc151m: https://leetcode.com/problems/reverse-words-in-a-string/

=== 例题
https://leetcode.com/problemset/all/?topicSlugs=string

=== 参考
https://github.com/youngyangyang04/leetcode-master#%E5%AD%97%E7%AC%A6%E4%B8%B2