:toc:
:toclevels: 5
:hardbreaks-option:

== bsearch

=== 思想
通常是有序的数组

=== 实现
[source, cpp]
----
    int search(vector<int>& nums, int target) {
        int left = 0;
        int right = nums.size() - 1;
        
        while(left <= right) {
            int mid = (unsigned(right + left) >> 1);
            if(nums[mid] < target) {
                left = mid + 1;
            } else if(nums[mid] > target) {
                right = mid - 1;
            } else {
                return mid;
            }
        }
        
        return -1;
    }
----

=== 循环不变量(loop invariant)
循环不变量的定义可以参考《算法导论3rd》2.1
循环不变量是一组在循环体内、每次迭代均保持为真的某种性质，通常被用来证明程序或算法的正确性。

=== 二分查找与循环不变量
对于二分查找，到底是 while(left < right) 还是 while(left <= right)，到底是right = middle呢，还是要right = middle - 1呢？

二分法经常写乱，主要是因为对区间的定义没有想清楚，区间的定义就是不变量。要在二分查找的过程中，保持不变量，就是在while寻找中每一次边界的处理都要坚持根据区间的定义来操作，这就是循环不变量规则。

对于二分法，区间的定义一般为两种，左闭右闭即[left, right]，或者左闭右开即[left, right)。

拿第一种写法来说，定义target在一个在左闭右闭的区间里，也就是[left, right]。
区间的定义这就决定了代码应该如何写，因为定义target在[left, right]区间，所以:
1. while (left <= right)要使用<=，因为left == right是有意义的
2. if(nums[middle] > target)时right要赋值为middle - 1，因为当前这个nums[middle]一定不是target，那么接下来要查找的左区间结束下标位置就是middle - 1

=== 进阶
lc34M: https://leetcode.com/problems/find-first-and-last-position-of-element-in-sorted-array/

=== 例题
https://leetcode.com/tag/binary-search/
lc704E: https://leetcode.com/problems/binary-search/
lc69E: https://leetcode.com/problems/sqrtx/

=== 参考
https://github.com/youngyangyang04/leetcode-master/blob/master/problems/0704.%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE.md