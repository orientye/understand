:toc:
:toclevels: 5
:hardbreaks-option:

== 并查集(disjoint set/union find/merge find)

=== 概念
并查集是一种树形数据结构，用来处理一些不交集(disjoint set, 一系列没有重复元素的集合)的合并及查询。

很多并查集的问题也可以通过DFS等方法来解决。

=== 要素
- 通常有个一维数组，例如vector<int> parents, 存储各元素的root
- union: 合并两个元素的root， 如int merge(x, y, parents)
- find: 查找某个元素的root, 如int find(x, parents)

=== 框架
[source, pseudo]
----
function MakeSet(x)
    x.parent := x

function Find(x)
    if x.parent == x
        return x
    else
        return Find(x.parent) //或者return x.parent = Find(x.parent)

function Union(x, y)
    xRoot := Find(x)
    yRoot := Find(y)
    if xRoot!= yRoot
        xRoot.parent = yRoot //可以优化
    
    /////////////////////////////////
    //方法I: 路径压缩，在Find里用while循环就可以实现扁平化
    
    /////////////////////////////////
    //方法II: rank优化
    if xRoot == yRoot
        return
    if xRoot.rank < yRoot.rank
        xRoot.parent = yRoot
    else if xRoot.rank > yRoot.rank
        yRoot.parent = xRoot
    else
        yRoot.parent = xRoot
        xRoot.rank = xRoot.rank + 1
    /////////////////////////////////
----

=== 优化
- 方法I. 路径压缩
    
    搞成两层, 达到一种极致的扁平

- 方法II. rank(秩)
    
    让结构扁平, 即深度(rank)更低
    把rank较低的合并到rank较高的节点

- 使用路径压缩的方法一般性能更好，因为不需要额外的内存; rank方法多用了一个rank变量, 并且树往往有多层

=== 应用
Graph环/分组/相交/最小生成树的Kruskal算法

=== 例题
https://leetcode.com/tag/union-find/
lc1319: https://leetcode.com/problems/number-of-operations-to-make-network-connected/
lc1971: https://leetcode.com/problems/find-if-path-exists-in-graph/
lc1905: https://leetcode.com/problems/count-sub-islands/
lc200:  https://leetcode.com/problems/number-of-islands/
lc1020: https://leetcode.com/problems/number-of-enclaves/
lc547:  https://leetcode.com/problems/number-of-provinces/
lc695:  https://leetcode.com/problems/max-area-of-island/
lc1061: https://leetcode.com/problems/lexicographically-smallest-equivalent-string/
lc959:  https://leetcode.com/problems/regions-cut-by-slashes/
lc399:  https://leetcode.com/problems/evaluate-division/
lc1267: https://leetcode.com/problems/count-servers-that-communicate/

=== 参考
https://www.youtube.com/watch?v=cjImxgLtuGg
lc959: https://zxi.mytechroad.com/blog/graph/leetcode-959-regions-cut-by-slashes/
lc399: https://www.youtube.com/watch?v=UwpvInpgFmo
