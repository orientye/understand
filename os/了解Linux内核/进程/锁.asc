== 锁
:hardbreaks-option:

=== 原子操作

=== 自旋锁
Q: 什么情况下使用

Q: 为什么要关闭中断?
A: https://stackoverflow.com/questions/37146637/why-is-interrupt-disabled-between-spin-lock-and-spin-unlock-in-linux

Q: 为什么要关闭抢占？

Q: 为什么自旋锁保护的代码不能进入睡眠状态？

spin_lock/spin_unlock — 禁止内核抢占
spin_lock_irq/spin_unlock_irq — 禁止内核抢占并屏蔽中断
spin_lock_irqsave/spin_unlock_irqrestore — 禁止内核抢占并屏蔽中断，事先保存中断屏蔽位并事后恢复原状

==== raw spinlock

==== ticket spinlock
https://en.wikipedia.org/wiki/Ticket_lock
主要解决公平性

==== mcs spinlock
per-CPU structure, 在cache-line上效率更高
https://lwn.net/Articles/590243/

==== queue spinlock
基于mcs spinlock的思想但解决了mcs spinlock占用空间大的问题
https://lwn.net/Articles/561775/
https://0xax.gitbooks.io/linux-insides/content/SyncPrim/linux-sync-2.html

=== 信号量

=== Seqlock顺序锁
v2.6引入, 对写友好, 写总能成功

=== RCU

=== 内存屏障

=== 读写锁

=== 大内核锁

=== 互斥量
可以看作是0-1信号量

=== 计数器

=== 锁