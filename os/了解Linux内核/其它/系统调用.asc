:toc:
:toclevels: 4
:hardbreaks-option:

== 系统调用

=== 概念
a system call is the programmatic way in which a computer program requests a service from the kernel of the operating system on which it is executed.

Q: vs. 中断
A: 系统调用是从用户态切换到核心态的同步机制，中断则是一种异步切换

Q: 系统调用与信号冲突时怎么处理？

=== 实现

==== 调用分派和参数传递
IA32使用汇编指令int $0x80来引发中断
IA32更为现代的处理器使用汇编指令sysenter和sysexit来快速进入和退出核心态
其它平台类似
系统调用表, 例如linux/arch/ia64/kernel/syscalls/syscall.tbl

==== 处理程序函数的实现
每个函数名称前缀都是sys_
所有的处理程序函数最多接受5个参数
所有的系统调用在核心态执行

==== 返回用户态
返回值与错误码
切回用户态

==== 访问用户空间
某些情况下, 内核需要访问应用程序的虚拟内存:
系统调用需要超过6个不同的参数
系统调用产生了大量数据，不能通过返回值机制传递给用户进程

==== 追踪系统调用
strace工具(使用ptrace系统调用, 即sys_ptrace)

==== v0.12
kernel/sys_call.s
kernel/sys.c
以及分布在其它文件中的sys_函数