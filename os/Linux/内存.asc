:toc:
:toclevels: 5
:hardbreaks-option:

== 内存

=== 分配与释放
==== 堆

    malloc
        Q: malloc的实现
        Q: 是否线程安全? 是否可重入?

    free 
        free() is a NULL pointer, then the call does nothing   
        freeing the same memory twice leads to unpredictable behavior

    calloc() and realloc()

    memalign() and posix_memalign()
        allocating aligned memory

==== 栈

    alloca
        https://stackoverflow.com/questions/1018853/why-is-the-use-of-alloca-not-considered-good-practice
        https://stackoverflow.com/questions/1887097/why-arent-variable-length-arrays-part-of-the-c-standard

==== 实践

    Q: jemalloc vs tcmalloc

==== 参考
https://github.com/orientye/understanding-the-linux-kernel/blob/main/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Linux%E5%86%85%E6%A0%B8/%E5%86%85%E5%AD%98/%E5%88%86%E9%85%8D%E4%B8%8E%E9%87%8A%E6%94%BE.asc#mallocfreecallocreallocreallocarray

=== 内存映射
==== 作用

    绝大多数操作系统(Windows/Unix-like)用于加载进程(主要用途)
    多个进程的共享内存(Q: mmap vs. shm)
    对大文件的读写(Q: why?)

==== mmap/munmap/mremap
[source, c]
----
#include <sys/mman.h>
void *mmap(void *addr, size_t length, int prot, int flags, int fd, off_t offset); 
Returns starting address of mapping on success, or MAP_FAILED on error 
int munmap(void *addr, size_t length); 
int msync(void *addr, size_t length, int flags);
void *mremap(void *old_address, size_t old_size, size_t new_size, int flags, ...); 
int remap_file_pages(void *addr, size_t size, int prot, size_t pgoff, int flags);
----

    Q: mmap线程安全吗?
    A: 是(参考https://man7.org/linux/man-pages/man2/mmap.2.html), 但不要误以为在mmap映射出来的内存上进行多线程操作也是安全的

==== file-based or anonymous

==== MAP_PRIVATE or MAP_SHARED

=== 虚拟内存

- mprotect

- mlock mlockall

- mincore

- madvise

[source, c]
----
#include <sys/mman.h> 
int mprotect(void *addr, size_t length, int prot);
int mlock(void *addr, size_t length); 
int munlock(void *addr, size_t length); 
int mincore(void *addr, size_t length, unsigned char *vec);
int madvise(void *addr, size_t length, int advice);
----

=== 共享内存
==== POSIX 共享内存

[source, c]
----
#include <sys/mman.h>
#include <sys/stat.h>        /* For mode constants */
#include <fcntl.h>           /* For O_* constants */
int shm_open(const char *name, int oflag, mode_t mode);
int shm_unlink(const char *name);
----

==== System V 共享内存

[source, c]
----
#include <sys/shm.h>
int shmget(key_t key, size_t size, int shmflg);
void *shmat(int shmid, const void *shmaddr, int shmflg);
int shmdt(const void *shmaddr);
int shmctl(int shmid, int cmd, struct shmid_ds *buf);
----

https://stackoverflow.com/questions/21311080/linux-shared-memory-shmget-vs-mmap

==== memfd
since 3.17
https://man7.org/linux/man-pages/man2/memfd_create.2.html