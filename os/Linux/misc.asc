:toc:
:toclevels: 5
:hardbreaks-option:

== misc

=== exception conrol flow
- ECF
    In general, we refer to these abrupt changes as exceptional control flow (ECF). 
    ECF occurs at all levels of a computer system. For example, at the hardware level, events detected by the hardware trigger abrupt control transfers to exception handlers. At the operating systems level, the kernel transfers control from one user process to another via context switches. At the application level, a process can send a signal to another process that abruptly transfers control to a signal handler in the recipient. An individual program can react to errors by sidestepping the usual stack discipline and making nonlocal jumps to arbitrary locations in other functions.
    Exceptions are a form of exceptional control flow that are implemented partly by the hardware and partly by the operating system.

.Image source: Computer Systems. A Programmer’s Perspective [3rd ed.] (2016, Pearson) 8.1
image::img/exception.png[]

- 异常类别

    Interrupt: 例如来自IO设备的信号
    Trap: 例如系统调用
    Fault: 例如缺页异常
    Abort: 例如一些硬件错误，比如DRAM或者SRAM位被损坏时发生的奇偶错误

==== signal
A signal is a notification to a process that an event has occurred
Signals are sometimes described as software interrupts

可靠信号与不可靠信号
实时信号与非实时信号

Q: 信号的整个流程
https://github.com/orientye/understanding-the-linux-kernel/blob/main/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Linux%E5%86%85%E6%A0%B8/%E8%BF%9B%E7%A8%8B/%E9%80%9A%E4%BF%A1.asc#%E4%BF%A1%E5%8F%B7

void ( *signal(int sig, void (*handler)(int)) ) (int);
int kill(pid_t pid, int sig)
int raise(int sig)
    In a single-threaded program, a call to raise() is equivalent to the following call to kill(): kill(getpid(), sig);
    On a system that supports threads, raise(sig) is implemented as:pthread_kill(pthread_self(), sig)
int killpg(pid_t pgrp, int sig);
char *strsignal(int sig);
void psignal(int sig, const char *msg);
int sigemptyset(sigset_t *set);
int sigfillset(sigset_t *set);
int sigaddset(sigset_t *set, int sig);
int sigdelset(sigset_t *set, int sig);
int sigismember(const sigset_t *set, int sig);
int sigprocmask(int how, const sigset_t *set, sigset_t *oldset);
int sigpending(sigset_t *set);
int sigaction(int sig, const struct sigaction *act, struct sigaction *oldact);
pause(): waiting for a signal
int tgkill(pid_t tgid, pid_t tid, int sig) https://man7.org/linux/man-pages/man2/tkill.2.html

Q: sigaction() vs signal() 
https://stackoverflow.com/questions/231912/what-is-the-difference-between-sigaction-and-signal
在生产环境中，尽量使用 sigaction()

A function is said to be reentrant if it can safely be simultaneously executed by multiple threads of execution in the same process. In this context, "safe" means that the function achieves its expected result, regardless of the state of execution of any other thread of execution.
The SUSv3 definition of a reentrant function is one "whose effect, when called by two or more threads, is guaranteed to be as if the threads each executed the function one after the other in an undefined order, even if the actual execution is interleaved."
A function may be nonreentrant if it updates global or static data structures. (A function that employs only local variables is guaranteed to be reentrant.) 

An async-signal-safe function is one that the implementation guarantees to be safe when called from a signal handler. A function is async-signal-safe either because it is reentrant or because it is not interruptible by a signal handler.

Q: reentrant vs thread-safe
https://stackoverflow.com/questions/856823/threadsafe-vs-re-entrant

Q: malloc线程安全吗? 可重入吗? printf呢? 为什么
linux 中可重入这个概念一般只有在 signal的场景下有意义(?)，叫 async-signal-safe。
很多线程安全的函数都是不可重入的，例如malloc(3)、printf(3)。
可重入的函数一般是线程安全的。
Posix中大多数函数都是线程安全的，但只有少数是async-signal-safe。
参考: https://www.zhihu.com/question/21526405/answer/37330407

async-signal-safe系统函数
http://man7.org/linux/man-pages/man7/signal-safety.7.html

非线程安全函数
https://man7.org/linux/man-pages/man7/pthreads.7.html

Q: 多线程下操作系统如何处理信号?
Q: 多线程下应用程序如何处理信号?

Interruption and Restarting of System Calls
Q: 如果read的过程中发生signal了，整个过程是什么样的? tips: EINTR
Q: 如果是普通函数(非系统调用)呢?
Q: SA_RESTART   https://stackoverflow.com/questions/4959524/when-to-check-for-eintr-and-repeat-the-function-call

Q: 应用层signal handler 该怎么写?
处理程序应尽可能简单;
在处理程序中只调用异步信号安全函数
保存和恢复errno
阻塞所有的信号，保护对共享全局数据结构的访问
用volatile声明全局变量
用sig_atomic_t声明标志，即指令: volatile sig_atomic_t flag;
C99 and SUSv3 specify that an implementation should define two constants (in<stdint.h>), SIG_ATOMIC_MIN and SIG_ATOMIC_MAX, that define the range of values that may be assigned to variables of type sig_atomic_t. The standards require that this range be at least –127 to 127 if sig_atomic_t is represented as a signed value, or 0 to 255 if it is represented as an unsigned value. On Linux, these two constants equate to the negative and positive limits for signed 32-bit integers

Q: 应用层signal handler该怎么写，有没有更好的方式?
Two common designs for signal handlers are the following:
The signal handler sets a global flag and exits. The main program periodically checks this flag and, if it is set, takes appropriate action. 
The signal handler performs some type of cleanup and then either terminates the process or uses a nonlocal goto to unwind the stack and return control to a predetermined location in the main program.
eg. libuv

Q: 为什么windows没有signal机制(CRT实现的)?
Windows没有原生信号机制，是一种有意的设计选择：
哲学不同：基于对象的模型 vs 基于进程的模型。
提供了更优的替代品：结构化异常处理、控制台事件、作业对象、I/O完成端口等机制，在功能、安全性和灵活性上都超越了传统的Unix信号，能够更优雅地解决信号所要处理的各类问题。
规避了信号的固有缺陷：避免了异步安全性等棘手问题。
因此，Microsoft的CRT库为了兼容Unix/Linux上移植过来的代码，才在用户层模拟了signal()和raise()函数。但这个模拟是不完整且不可靠的，它通常只是将Windows的异常（如EXCEPTION_ACCESS_VIOLATION）映射为相应的信号（如SIGSEGV）。在复杂的、多线程的或性能要求高的程序中，依赖CRT的信号模拟通常不是最佳实践，直接使用Windows的原生机制才是正确之道。

Q: SIGCHLD一般怎么处理比较好?

Q: SIGPIPE呢?

signal与coredump
https://man7.org/linux/man-pages/man7/signal.7.html

Interruptible and Uninterruptible Process Sleep States
TASK_INTERRUPTIBLE
TASK_UNINTERRUPTIBLE
TASK_KILLABLE(kernel 2.6.25)

signal与IPC
signal作为IPC的缺陷

查看信号数值: kill -l
查看对应快捷键: man tcsetattr, 然后/Ctrl
查看default action: https://github.com/torvalds/linux/blob/master/include/linux/signal.h

参考:
《The Linux Programming inTerface》chapter 20-22

=== 时间
计时，用于获得当前时间:
time(2) / time_t (秒)
ftime(3) / struct timeb (毫秒)
gettimeofday(2) / struct timeval (微秒)
clock_gettime(2) / struct timespec (纳秒)
gmtime / localtime / timegm / mktime / strftime / struct tm (这些与当前时间无关)

定时函数，用于让程序等待一段时间或安排计划任务:
sleep
alarm
usleep
nanosleep
clock_nanosleep
getitimer / setitimer
timer_create / timer_settime / timer_gettime / timer_delete
timerfd_create / timerfd_gettime / timerfd_settime

计时: 使用 gettimeofday 来获取当前时间。
定时: 使用 timerfd_* 系列函数来处理。

http://www.cppblog.com/Solstice/archive/2014/08/21/139769.html
补充:  gettimeofday应该也是系统调用，见
https://github.com/torvalds/linux/blob/v4.4/arch/x86/entry/syscalls/syscall_64.tbl#L105
POSIX.1-2008 marks gettimeofday() as obsolete, recommending the use of clock_gettime(2) instead，参考: https://linux.die.net/man/2/gettimeofday

所以，结论?

定时器:
http://orientye.com/timer-and-timewheel/

=== 静态库/动态库
静态库
动态库

=== 终端与伪终端
tty 与 ptty
https://stackoverflow.com/questions/4426280/what-do-pty-and-tty-mean

终端:
tty命令
stty命令

伪终端:
a pseudoterminal pair consists of a connected master device and slave device.

狭义上的终端(Terminal)指物理终端，通常就是一个键盘和一个显示器，这些是真实的、物理的硬件设备。

伪终端是一个软件抽象层，它扮演了物理终端和终端驱动程序之间的角色，但它完全是在操作系统内核中通过软件实现的。它是一对双向的字符设备，

在 GNOME Terminal 里输入 ls 时，这个字符流发送给了谁？谁来执行那个古老的“终端驱动程序”的角色来处理按键（如 Ctrl+C）？
答案就是：伪终端。