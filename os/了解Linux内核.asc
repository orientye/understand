= 了解Linux内核
:revnumber: 0.0.1
:author: orient
:toc:
:homepage: http://orientye.com

<<<

include::了解Linux内核/概念.asc[]

include::了解Linux内核/进程.asc[]

include::了解Linux内核/内存.asc[]

include::了解Linux内核/文件.asc[]

include::了解Linux内核/网络.asc[]

include::了解Linux内核/其它.asc[]

include::了解Linux内核/附录.asc[]


物理内存的分配

内存

页面交换
利用磁盘空间作为扩展内存，从而增大了可用的内存。缺页异常机制。

页面回收
用于将内存映射被修改的内容与底层的块设备同步，也称为数据回写。

页表

内存

The process of address translation must be integrated with the operation of any hardware caches in the system. Most page table entries are 
located in the L1 cache, but the cost of accessing page table entries from L1 is usually eliminated by an on-chip cache of page table entries 
called a TLB.

why? 

VM

(1) It uses mainmemory efficiently by treating it as a cache for an address space stored on disk,keeping only the active areas in main memory 
and transferring data back and forth between disk and memory as needed. 

(2) It simplifies memory management by providing each process with a uniform address space.

(3) It protects the address space of each process from corruption by other processes.

Physical and Virtual Addressing 

VM

Early PCs used physical addressing, and systems such as digital signal processors, embedded microcontrollers, and Cray supercomputers 
continue to do so.
However, modern processors use a form of addressing known as virtual addressing.

（1）VM as a tool for Caching 

VM

（2）VM as a tool for Memory Management 

VM

           简化： 链接， 加载，共享， 内存分配

（3）VM as a Tool for Memory Protection 

VM

VM

● 大小

● 布局  mm_types.h : struct mm_struct
    当前运行代码的二进制代码，即text段
    程序使用的动态库代码
    存储全局变量和动态产生的数据的堆
    保存局部变量和实现函数/过程调用的栈
    环境变量和命令行参数的段
    将文件内容映射到虚拟地址空间中的内存映射

   布局的建立:  load_elf_binary()(exex系统调用使用了此函数)

VM - Address Translation

VM - Intel core i7/linux

VM - Intel core i7/linux

VM

● 大小

● 布局  mm_types.h : struct mm_struct
    当前运行代码的二进制代码，即text段
    程序使用的动态库代码
    存储全局变量和动态产生的数据的堆
    保存局部变量和实现函数/过程调用的栈
    环境变量和命令行参数的段
    将文件内容映射到虚拟地址空间中的内存映射

Q: 环境变量和命令行参数存在哪里？
https://unix.stackexchange.com/questions/75939/
where-is-the-environment-string-actual-stored

   布局的建立:  load_elf_binary()(exex系统调用使用了此函数)

VM-内存映射

Linux initializes the contents of a virtual memory area by associating it with an object on disk, a process known as memory mapping. Areas can 
be mapped to one of two types of objects:

1. Regular file in the Linux file system: An area can be mapped to a contiguous section of a regular disk file, such as an executable object file. 
The file section is divided into page-size pieces, with each piece containing the initial contents of a virtual page. Because of demand paging, 
none of these virtual pages is actually swapped into physical memory until the CPU first touches the page (i.e., issues a virtual address that falls 
within that page’s region of the address space). If the area is larger than the file section, then the area is padded with zeros. 适合于很大的文件

2. Anonymous file: An area can also be mapped to an anonymous file, created by the kernel, that contains all binary zeros. The first time the 
CPU touches a virtual page in such an area, the kernel finds an appropriate victim page in physical memory, swaps out the victim page if it is 
dirty, overwrites the victim page with binary zeros, and updates the page table to mark the page as resident. Notice that no data are actually 
transferred between disk and memory. For this reason, pages in areas that are mapped to anonymous files are sometimes called demand-zero 
pages.  适合于创建进程间通信的共享内存。

In either case, once a virtual page is initialized, it is swapped back and forth
between a special swap file maintained by the kernel. The swap file is also known as the swap space or the swap area. An important point to 
realize is that at any point in time, the swap space bounds the total amount of virtual pages that can be allocated by the currently running 
processes.

内存映射是一种重要的抽象手段，在内核中大量使用，也用于用户应用程序。映射方法可以任意来源的数据传输到进程的虚拟地址空间中。作为映射目标的
地址空间区域，可以像普通内存那样用通常的方法访问。但任何修改都会自动传输到原数据源。例如，文件的内容映射到内存中，处理只需要读取相应的内
存即可访问文件内容，或向内存写入数据来修改文件的内容，内核保证任何修改都会自动同步到文件中。
内核在实现设备驱动程序时直接使用了内存映射。外设的输入/输出可以映射到虚拟地址空间的区域中。对相关内存区域的都写会由系统重定向到设备，因而
大大简化了驱动程序的实现。

缺点
内存映射文件需要在进程的占用一块很大的连续逻辑地址空间。对于Intel的IA-32的4 GiB逻辑地址空间，可用的连续地址空间远远小于2---3 GiB。
相关联的文件的I/O错误（如可拔出驱动器或光驱被弹出，磁盘满时写操作等）的内存映射文件会向应用程序报告SIGSEGV/SIGBUS信号（POSIX环境）或
EXECUTE_IN_PAGE_ERROR结构化异常（Windows环境）。通常的内存操作是无需考虑这些异常的。
有内存管理单元（MMU）才支持内存映射文件。

VM-内存映射

copy on write

fork

execve
          execve("a.out", NULL, NULL);

VM-动态内存分配

malloc

             $ strace ./malloc 1

...
brk(NULL)                               = 0x5585209f2000
brk(0x558520a13000)                     = 0x558520a13000
exit_group(0)                           = ?
+++ exited with 0 +++
$ strace ./malloc 100000
...
brk(NULL)                               = 0x55b45a386000
brk(0x55b45a3bf000)                     = 0x55b45a3bf000
exit_group(0)                           = ?
$ strace ./malloc 1000000
...
mmap(NULL, 1003520, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x7f05f7cbf000
exit_group(0)                           = ?

glibc:   https://github.com/bminor/glibc/blob/master/malloc/malloc.c       brk/sbrk   mmap  128K?

动态内存分配要考虑的问题

文件-设备驱动程序

系统调用

实现：

        系统调用的结构：

处理程序函数的实现
调用分派和参数传递
返回用户态

        访问用户控件
        追踪系统调用

sys_ptrace    

vs. 中断
    系统调用是从用户态切换到和心态的同步机制  中断是这两种状态之间的异步切换

Q: 系统调用与信号冲突时怎么处理？

中断

概念

软中断

tasklet

wait queue & completion & work queue

中断-概念

硬件中断(hardware interrupt) 
软中断(SoftIRQ) 

同步中断和异常
        由CPU自身产生，针对当前执行的程序
异步中断
        由外部设备产生，可能发生在任何时间

中断禁用
        Q： 中断禁用有什么影响
        Q： 哪些情况需要禁用中断

中断处理
        进入和退出任务
        中断处理程序

数据结构
        kernel/irq/handle.c
        中断处理程序

中断电流处理
        边沿触发  水平触发

初始化和分配IRQ

处理IRQ

中断-软中断

软中断(SoftIRQ) 

interrupt.h   struct softirp_action
kernel/softirq.c

开启软中断处理
        do_softirq

软中断守护进程
        ksoftirqd

中断-tasklet

interrupt.h   struct tasklet_struct

注册tasklet
        interrupt.h task_schedule

执行tasklet
        kernel/softirq.c  tasklet_action

中断-等待队列&完成量&工作队列

等待队列
        数据结构 wait.h __wait_queue
        使进程睡眠   wait.h  kernel/wait.c
        唤醒进程 wait.h v  kernel/sched.c

完成量
        与信号量相似，基于等待队列
        completion.h

工作队列
        kernel/workqueue.c

