= 了解Linux性能优化
:hardbreaks-option:
:revnumber: 0.0.1
:author: orient
:toc:
:homepage: http://orientye.com

<<<

== 概述

=== latency

In 2020:

L1 cache reference: 1 ns
L2 cache reference: 4 ns
Branch mispredict: 3 ns
Mutex lock/unlock: 17 ns
Main memory reference: 100 ns
Compress 1K bytes with Zippy: 2000 ns
Send 2K bytes over commodity network: 44 ns
Read 1 MB sequentially from memory: 3000 ns
Round trip within same datacenter: 500,000 ns
Disk seek: 2,000,000 ns
Read 1 MB sequentially from disk: 825,000 ns
Read 1 MB sequentially from SSD: 49000 ns

https://colin-scott.github.io/personal_website/research/interactive_latency.html


== cpu

[format="csv", options="header", separator=#]
|===
指标#工具#说明
平均负载  #  top;uptime;cat /proc/loadavg  #  主要使用top
|===

=== 平均负载

平均负载

    System load averages is the average number of processes that are either in a runnable or uninterruptable state.  A process in a runnable state 
    is either using the CPU  or waiting  to  use  the CPU(也就是R状态).  A process in uninterruptable state is waiting for some I/O access, eg waiting 
    for disk(也就是D状态).  (man uptime)

多少合适

    平均负载可以简单地理解为平均活跃进程数，理想情况下等于CPU(核心)个数（lscpu或者grep 'model name' /proc/cpuinfo | wc -l）
    当平均负载高于CPU数量70%的时候，可以认为负载过高 或者监控看历史数据变化

vs. CPU使用率

    平均负载还包括 D uninterruptible sleep (usually IO)以及R running or runnable (on run queue)中的runnable状态
    因此，没有对应关系
    例如IO密集型进程，可能导致平均负载较高，但CPU利用率较低
    例如大量进程，有些进程等待CPU调度(pidstat %wait列查看?)

原因分析

    借助mpstat, pidstat等命令分析

== 内存

[format="csv", options="header", separator=#]
|===
指标#工具#说明
系统已用,可用,剩余内存  #  free;vmstat;sar;cat /proc/meminfo  #  vmstat,sar比较全面
|===

== 文件

cat /proc/loadavg

== 网络